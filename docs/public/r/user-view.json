{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "user-view",
  "type": "registry:component",
  "title": "User View",
  "description": "",
  "dependencies": [],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "https://better-auth-ui.com/r/profile.json",
    "skeleton",
    "https://better-auth-ui.com/r/user-avatar.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/user-view.tsx",
      "content": "\"use client\"\n\nimport { useContext, useMemo } from \"react\"\nimport { AuthUIContext } from \"../lib/auth-ui-provider\"\nimport { cn } from \"../lib/utils\"\nimport type { AuthLocalization } from \"../localization/auth-localization\"\nimport type { Profile } from \"../types/profile\"\nimport { Skeleton } from \"./ui/skeleton\"\nimport { UserAvatar, type UserAvatarClassNames } from \"./user-avatar\"\n\nexport interface UserViewClassNames {\n    base?: string\n    avatar?: UserAvatarClassNames\n    content?: string\n    title?: string\n    subtitle?: string\n    skeleton?: string\n}\n\nexport interface UserViewProps {\n    className?: string\n    classNames?: UserViewClassNames\n    isPending?: boolean\n    size?: \"sm\" | \"default\" | \"lg\" | null\n    user?: Profile | null\n    /**\n     * @default authLocalization\n     * @remarks `AuthLocalization`\n     */\n    localization?: AuthLocalization\n}\n\n/**\n * Displays user information with avatar and details in a compact view\n *\n * Renders a user's profile information with appropriate fallbacks:\n * - Shows avatar alongside user name and email when available\n * - Shows loading skeletons when isPending is true\n * - Falls back to generic \"User\" text when neither name nor email is available\n * - Supports customization through classNames prop\n */\nexport function UserView({\n    className,\n    classNames,\n    isPending,\n    size,\n    user,\n    localization: propLocalization\n}: UserViewProps) {\n    const { localization: contextLocalization } = useContext(AuthUIContext)\n\n    const localization = useMemo(\n        () => ({ ...contextLocalization, ...propLocalization }),\n        [contextLocalization, propLocalization]\n    )\n\n    return (\n        <div\n            className={cn(\n                \"flex items-center gap-2\",\n                className,\n                classNames?.base\n            )}\n        >\n            <UserAvatar\n                className={cn(size !== \"sm\" && \"my-0.5\")}\n                classNames={classNames?.avatar}\n                isPending={isPending}\n                size={size}\n                user={user}\n                localization={localization}\n            />\n\n            <div\n                className={cn(\n                    \"grid flex-1 text-left leading-tight\",\n                    classNames?.content\n                )}\n            >\n                {isPending ? (\n                    <>\n                        <Skeleton\n                            className={cn(\n                                \"max-w-full\",\n                                size === \"lg\" ? \"h-4.5 w-32\" : \"h-3.5 w-24\",\n                                classNames?.title,\n                                classNames?.skeleton\n                            )}\n                        />\n                        {size !== \"sm\" && (\n                            <Skeleton\n                                className={cn(\n                                    \"mt-1.5 max-w-full\",\n                                    size === \"lg\" ? \"h-3.5 w-40\" : \"h-3 w-32\",\n                                    classNames?.subtitle,\n                                    classNames?.skeleton\n                                )}\n                            />\n                        )}\n                    </>\n                ) : (\n                    <>\n                        <span\n                            className={cn(\n                                \"truncate font-semibold\",\n                                size === \"lg\" ? \"text-base\" : \"text-sm\",\n                                classNames?.title\n                            )}\n                        >\n                            {user?.displayName ||\n                                user?.name ||\n                                user?.fullName ||\n                                user?.firstName ||\n                                user?.displayUsername ||\n                                user?.username ||\n                                user?.email ||\n                                localization?.USER}\n                        </span>\n\n                        {!user?.isAnonymous &&\n                            size !== \"sm\" &&\n                            (user?.name || user?.username) && (\n                                <span\n                                    className={cn(\n                                        \"truncate opacity-70\",\n                                        size === \"lg\" ? \"text-sm\" : \"text-xs\",\n                                        classNames?.subtitle\n                                    )}\n                                >\n                                    {user?.email}\n                                </span>\n                            )}\n                    </>\n                )}\n            </div>\n        </div>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}