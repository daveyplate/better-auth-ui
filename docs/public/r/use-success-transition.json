{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-success-transition",
  "type": "registry:hook",
  "title": "Use Success Transition",
  "description": "",
  "dependencies": [],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/hooks/use-success-transition.ts",
      "content": "import {\n    useCallback,\n    useContext,\n    useEffect,\n    useState,\n    useTransition\n} from \"react\"\nimport { AuthUIContext } from \"../lib/auth-ui-provider\"\nimport { getSearchParam } from \"../lib/utils\"\n\nexport function useOnSuccessTransition({\n    redirectTo: redirectToProp\n}: {\n    redirectTo?: string\n}) {\n    const { redirectTo: contextRedirectTo } = useContext(AuthUIContext)\n\n    const getRedirectTo = useCallback(\n        () =>\n            redirectToProp || getSearchParam(\"redirectTo\") || contextRedirectTo,\n        [redirectToProp, contextRedirectTo]\n    )\n\n    const [isPending, startTransition] = useTransition()\n    const [success, setSuccess] = useState(false)\n\n    const {\n        navigate,\n        hooks: { useSession },\n        onSessionChange\n    } = useContext(AuthUIContext)\n\n    const { refetch: refetchSession } = useSession()\n\n    useEffect(() => {\n        if (!success || isPending) return\n\n        startTransition(() => {\n            navigate(getRedirectTo())\n        })\n    }, [success, isPending, navigate, getRedirectTo])\n\n    const onSuccess = useCallback(async () => {\n        await refetchSession?.()\n        setSuccess(true)\n\n        if (onSessionChange) startTransition(onSessionChange)\n    }, [refetchSession, onSessionChange])\n\n    return { onSuccess, isPending }\n}\n",
      "type": "registry:hook"
    }
  ]
}