{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "account-cell",
  "type": "registry:component",
  "title": "Account Cell",
  "description": "",
  "dependencies": [
    "better-auth",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "card",
    "dropdown-menu",
    "https://better-auth-ui.com/r/refetch.json",
    "https://better-auth-ui.com/r/settings-card.json",
    "https://better-auth-ui.com/r/user-view.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/settings/account/account-cell.tsx",
      "content": "\"use client\"\n\nimport type { Session, User } from \"better-auth\"\nimport {\n    EllipsisIcon,\n    Loader2,\n    LogOutIcon,\n    RepeatIcon,\n    UserX2Icon\n} from \"lucide-react\"\nimport { useContext, useState } from \"react\"\n\nimport { AuthUIContext } from \"../../../lib/auth-ui-provider\"\nimport { cn, getLocalizedError } from \"../../../lib/utils\"\nimport type { AuthLocalization } from \"../../../localization/auth-localization\"\nimport type { Refetch } from \"../../../types/refetch\"\nimport { Button } from \"../../ui/button\"\nimport { Card } from \"../../ui/card\"\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger\n} from \"../../ui/dropdown-menu\"\nimport { UserView } from \"../../user-view\"\nimport type { SettingsCardClassNames } from \"../shared/settings-card\"\n\nexport interface AccountCellProps {\n    className?: string\n    classNames?: SettingsCardClassNames\n    deviceSession: { user: User; session: Session }\n    localization?: Partial<AuthLocalization>\n    refetch?: Refetch\n}\n\nexport function AccountCell({\n    className,\n    classNames,\n    deviceSession,\n    localization,\n    refetch\n}: AccountCellProps) {\n    const {\n        basePath,\n        localization: contextLocalization,\n        hooks: { useSession },\n        mutators: { revokeDeviceSession, setActiveSession },\n        toast,\n        viewPaths,\n        navigate\n    } = useContext(AuthUIContext)\n\n    localization = { ...contextLocalization, ...localization }\n\n    const { data: sessionData } = useSession()\n    const [isLoading, setIsLoading] = useState(false)\n\n    const handleRevoke = async () => {\n        setIsLoading(true)\n\n        try {\n            await revokeDeviceSession({\n                sessionToken: deviceSession.session.token\n            })\n\n            refetch?.()\n        } catch (error) {\n            setIsLoading(false)\n\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n    }\n\n    const handleSetActiveSession = async () => {\n        setIsLoading(true)\n\n        try {\n            await setActiveSession({\n                sessionToken: deviceSession.session.token\n            })\n\n            refetch?.()\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n\n        setIsLoading(false)\n    }\n\n    const isCurrentSession =\n        deviceSession.session.id === sessionData?.session.id\n\n    return (\n        <Card className={cn(\"flex-row p-4\", className, classNames?.cell)}>\n            <UserView user={deviceSession.user} localization={localization} />\n\n            <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                    <Button\n                        className={cn(\n                            \"relative ms-auto\",\n                            classNames?.button,\n                            classNames?.outlineButton\n                        )}\n                        disabled={isLoading}\n                        size=\"icon\"\n                        type=\"button\"\n                        variant=\"outline\"\n                    >\n                        {isLoading ? (\n                            <Loader2 className=\"animate-spin\" />\n                        ) : (\n                            <EllipsisIcon className={classNames?.icon} />\n                        )}\n                    </Button>\n                </DropdownMenuTrigger>\n\n                <DropdownMenuContent>\n                    {!isCurrentSession && (\n                        <DropdownMenuItem onClick={handleSetActiveSession}>\n                            <RepeatIcon className={classNames?.icon} />\n\n                            {localization.SWITCH_ACCOUNT}\n                        </DropdownMenuItem>\n                    )}\n\n                    <DropdownMenuItem\n                        onClick={() => {\n                            if (isCurrentSession) {\n                                navigate(`${basePath}/${viewPaths.SIGN_OUT}`)\n                                return\n                            }\n\n                            handleRevoke()\n                        }}\n                        variant=\"destructive\"\n                    >\n                        {isCurrentSession ? (\n                            <LogOutIcon className={classNames?.icon} />\n                        ) : (\n                            <UserX2Icon className={classNames?.icon} />\n                        )}\n\n                        {isCurrentSession\n                            ? localization.SIGN_OUT\n                            : localization.REVOKE}\n                    </DropdownMenuItem>\n                </DropdownMenuContent>\n            </DropdownMenu>\n        </Card>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}