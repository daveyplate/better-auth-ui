{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "invitation-cell",
  "type": "registry:component",
  "title": "Invitation Cell",
  "description": "",
  "dependencies": [
    "better-auth",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "card",
    "dropdown-menu",
    "https://better-auth-ui.com/r/invitation.json",
    "https://better-auth-ui.com/r/settings-card.json",
    "https://better-auth-ui.com/r/user-avatar.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/organization/invitation-cell.tsx",
      "content": "\"use client\"\n\nimport type { Organization } from \"better-auth/plugins/organization\"\nimport { EllipsisIcon, Loader2, XIcon } from \"lucide-react\"\nimport { useContext, useMemo, useState } from \"react\"\n\nimport { AuthUIContext } from \"../../lib/auth-ui-provider\"\nimport { cn, getLocalizedError } from \"../../lib/utils\"\nimport type { AuthLocalization } from \"../../localization/auth-localization\"\nimport type { Invitation } from \"../../types/invitation\"\nimport type { SettingsCardClassNames } from \"../settings/shared/settings-card\"\nimport { Button } from \"../ui/button\"\nimport { Card } from \"../ui/card\"\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger\n} from \"../ui/dropdown-menu\"\nimport { UserAvatar } from \"../user-avatar\"\n\nexport interface InvitationCellProps {\n    className?: string\n    classNames?: SettingsCardClassNames\n    invitation: Invitation\n    localization?: AuthLocalization\n    organization: Organization\n}\n\nexport function InvitationCell({\n    className,\n    classNames,\n    invitation,\n    localization: localizationProp,\n    organization\n}: InvitationCellProps) {\n    const {\n        authClient,\n        hooks: { useListInvitations },\n        organization: organizationOptions,\n        localization: contextLocalization,\n        toast\n    } = useContext(AuthUIContext)\n\n    const localization = useMemo(\n        () => ({ ...contextLocalization, ...localizationProp }),\n        [contextLocalization, localizationProp]\n    )\n\n    const [isLoading, setIsLoading] = useState(false)\n\n    const builtInRoles = [\n        { role: \"owner\", label: localization.OWNER },\n        { role: \"admin\", label: localization.ADMIN },\n        { role: \"member\", label: localization.MEMBER }\n    ]\n\n    const roles = [...builtInRoles, ...(organizationOptions?.customRoles || [])]\n    const role = roles.find((r) => r.role === invitation.role)\n\n    const { refetch } = useListInvitations({\n        query: { organizationId: organization?.id }\n    })\n\n    const handleCancelInvitation = async () => {\n        setIsLoading(true)\n\n        try {\n            await authClient.organization.cancelInvitation({\n                invitationId: invitation.id,\n                fetchOptions: { throw: true }\n            })\n\n            await refetch?.()\n\n            toast({\n                variant: \"success\",\n                message: localization.INVITATION_CANCELLED\n            })\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n\n        setIsLoading(false)\n    }\n\n    return (\n        <Card\n            className={cn(\n                \"flex-row items-center p-4\",\n                className,\n                classNames?.cell\n            )}\n        >\n            <div className=\"flex flex-1 items-center gap-2\">\n                <UserAvatar\n                    className=\"my-0.5\"\n                    user={invitation}\n                    localization={localization}\n                />\n\n                <div className=\"grid flex-1 text-left leading-tight\">\n                    <span className=\"truncate font-semibold text-sm\">\n                        {invitation.email}\n                    </span>\n\n                    <span className=\"truncate text-muted-foreground text-xs\">\n                        {localization.EXPIRES}{\" \"}\n                        {invitation.expiresAt.toLocaleDateString()}\n                    </span>\n                </div>\n            </div>\n\n            <span className=\"truncate text-sm opacity-70\">{role?.label}</span>\n\n            <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                    <Button\n                        className={cn(\n                            \"relative ms-auto\",\n                            classNames?.button,\n                            classNames?.outlineButton\n                        )}\n                        disabled={isLoading}\n                        size=\"icon\"\n                        type=\"button\"\n                        variant=\"outline\"\n                    >\n                        {isLoading ? (\n                            <Loader2 className=\"animate-spin\" />\n                        ) : (\n                            <EllipsisIcon className={classNames?.icon} />\n                        )}\n                    </Button>\n                </DropdownMenuTrigger>\n\n                <DropdownMenuContent\n                    onCloseAutoFocus={(e) => e.preventDefault()}\n                >\n                    <DropdownMenuItem\n                        onClick={handleCancelInvitation}\n                        disabled={isLoading}\n                        variant=\"destructive\"\n                    >\n                        <XIcon className={classNames?.icon} />\n\n                        {localization.CANCEL_INVITATION}\n                    </DropdownMenuItem>\n                </DropdownMenuContent>\n            </DropdownMenu>\n        </Card>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}