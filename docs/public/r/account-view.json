{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "account-view",
  "type": "registry:component",
  "title": "Account View",
  "description": "",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/account-settings-cards.json",
    "https://better-auth-ui.com/r/api-keys-card.json",
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "drawer",
    "label",
    "https://better-auth-ui.com/r/organizations-card.json",
    "https://better-auth-ui.com/r/security-settings-cards.json",
    "https://better-auth-ui.com/r/settings-card.json",
    "https://better-auth-ui.com/r/user-invitations-card.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/account/account-view.tsx",
      "content": "\"use client\"\n\nimport { MenuIcon } from \"lucide-react\"\nimport { useContext, useMemo } from \"react\"\n\nimport { AuthUIContext } from \"../../lib/auth-ui-provider\"\nimport { cn, getViewByPath } from \"../../lib/utils\"\nimport type { AuthLocalization } from \"../../localization/auth-localization\"\nimport type { AccountViewPath } from \"../../server\"\nimport { OrganizationsCard } from \"../organization/organizations-card\"\nimport { UserInvitationsCard } from \"../organization/user-invitations-card\"\nimport { AccountSettingsCards } from \"../settings/account-settings-cards\"\nimport { ApiKeysCard } from \"../settings/api-key/api-keys-card\"\nimport { SecuritySettingsCards } from \"../settings/security-settings-cards\"\nimport type { SettingsCardClassNames } from \"../settings/shared/settings-card\"\nimport { Button } from \"../ui/button\"\nimport {\n    Drawer,\n    DrawerContent,\n    DrawerHeader,\n    DrawerTitle,\n    DrawerTrigger\n} from \"../ui/drawer\"\nimport { Label } from \"../ui/label\"\n\nexport interface AccountViewProps {\n    className?: string\n    classNames?: {\n        base?: string\n        cards?: string\n        drawer?: { menuItem?: string }\n        sidebar?: { base?: string; button?: string; buttonActive?: string }\n        card?: SettingsCardClassNames\n    }\n    localization?: AuthLocalization\n    pathname?: string\n    view?: AccountViewPath\n    hideNav?: boolean\n}\n\nexport function AccountView({\n    className,\n    classNames,\n    localization: localizationProp,\n    pathname,\n    view: viewProp,\n    hideNav\n}: AccountViewProps) {\n    const {\n        apiKey,\n        localization: contextLocalization,\n        organization,\n        account: accountOptions,\n        Link\n    } = useContext(AuthUIContext)\n\n    if (!accountOptions) {\n        return null\n    }\n\n    const localization = useMemo(\n        () => ({ ...contextLocalization, ...localizationProp }),\n        [contextLocalization, localizationProp]\n    )\n\n    const view =\n        viewProp ||\n        getViewByPath(accountOptions.viewPaths, pathname) ||\n        \"SETTINGS\"\n\n    const navItems: {\n        view: AccountViewPath\n        label: string\n    }[] = [\n        { view: \"SETTINGS\", label: localization.ACCOUNT },\n        { view: \"SECURITY\", label: localization.SECURITY }\n    ]\n\n    if (apiKey) {\n        navItems.push({\n            view: \"API_KEYS\",\n            label: localization.API_KEYS\n        })\n    }\n\n    if (organization) {\n        navItems.push({\n            view: \"ORGANIZATIONS\",\n            label: localization.ORGANIZATIONS\n        })\n    }\n\n    return (\n        <div\n            className={cn(\n                \"flex w-full grow flex-col gap-4 md:flex-row md:gap-12\",\n                className,\n                classNames?.base\n            )}\n        >\n            {!hideNav && (\n                <div className=\"flex justify-between gap-2 md:hidden\">\n                    <Label className=\"font-semibold text-base\">\n                        {navItems.find((i) => i.view === view)?.label}\n                    </Label>\n\n                    <Drawer>\n                        <DrawerTrigger asChild>\n                            <Button variant=\"outline\">\n                                <MenuIcon />\n                            </Button>\n                        </DrawerTrigger>\n                        <DrawerContent>\n                            <DrawerHeader>\n                                <DrawerTitle className=\"hidden\">\n                                    {localization.SETTINGS}\n                                </DrawerTitle>\n                            </DrawerHeader>\n                            <div className=\"flex flex-col px-4 pb-4\">\n                                {navItems.map((item) => (\n                                    <Link\n                                        key={item.view}\n                                        href={`${accountOptions?.basePath}/${accountOptions?.viewPaths[item.view]}`}\n                                    >\n                                        <Button\n                                            size=\"lg\"\n                                            className={cn(\n                                                \"w-full justify-start px-4 transition-none\",\n                                                classNames?.drawer?.menuItem,\n                                                view === item.view\n                                                    ? \"font-semibold\"\n                                                    : \"text-foreground/70\"\n                                            )}\n                                            variant=\"ghost\"\n                                        >\n                                            {item.label}\n                                        </Button>\n                                    </Link>\n                                ))}\n                            </div>\n                        </DrawerContent>\n                    </Drawer>\n                </div>\n            )}\n\n            {!hideNav && (\n                <div className=\"hidden md:block\">\n                    <div\n                        className={cn(\n                            \"flex w-60 flex-col gap-1\",\n                            classNames?.sidebar?.base\n                        )}\n                    >\n                        {navItems.map((item) => (\n                            <Link\n                                key={item.view}\n                                href={`${accountOptions?.basePath}/${accountOptions?.viewPaths[item.view]}`}\n                            >\n                                <Button\n                                    size=\"lg\"\n                                    className={cn(\n                                        \"w-full justify-start px-4 transition-none\",\n                                        classNames?.sidebar?.button,\n                                        view === item.view\n                                            ? \"font-semibold\"\n                                            : \"text-foreground/70\",\n                                        view === item.view &&\n                                            classNames?.sidebar?.buttonActive\n                                    )}\n                                    variant=\"ghost\"\n                                >\n                                    {item.label}\n                                </Button>\n                            </Link>\n                        ))}\n                    </div>\n                </div>\n            )}\n\n            {view === \"SETTINGS\" && (\n                <AccountSettingsCards\n                    classNames={classNames}\n                    localization={localization}\n                />\n            )}\n\n            {view === \"SECURITY\" && (\n                <SecuritySettingsCards\n                    classNames={classNames}\n                    localization={localization}\n                />\n            )}\n\n            {view === \"API_KEYS\" && (\n                <ApiKeysCard\n                    classNames={classNames?.card}\n                    localization={localization}\n                />\n            )}\n\n            {view === \"ORGANIZATIONS\" && organization && (\n                <div className=\"grid w-full gap-4 md:gap-6\">\n                    <OrganizationsCard\n                        classNames={classNames?.card}\n                        localization={localization}\n                    />\n\n                    <UserInvitationsCard\n                        classNames={classNames?.card}\n                        localization={localization}\n                    />\n                </div>\n            )}\n        </div>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}