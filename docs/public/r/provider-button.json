{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "provider-button",
  "type": "registry:component",
  "title": "Provider Button",
  "description": "",
  "dependencies": [
    "better-auth"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "https://better-auth-ui.com/r/auth-view.json",
    "button",
    "https://better-auth-ui.com/r/social-providers.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/auth/provider-button.tsx",
      "content": "import type { SocialProvider } from \"better-auth/social-providers\"\nimport { useCallback, useContext } from \"react\"\n\nimport { AuthUIContext } from \"../../lib/auth-ui-provider\"\nimport type { Provider } from \"../../lib/social-providers\"\nimport { cn, getLocalizedError, getSearchParam } from \"../../lib/utils\"\nimport type { AuthLocalization } from \"../../localization/auth-localization\"\nimport { Button } from \"../ui/button\"\nimport type { AuthViewClassNames } from \"./auth-view\"\n\ninterface ProviderButtonProps {\n    className?: string\n    classNames?: AuthViewClassNames\n    callbackURL?: string\n    isSubmitting: boolean\n    localization: Partial<AuthLocalization>\n    other?: boolean\n    provider: Provider\n    redirectTo?: string\n    socialLayout: \"auto\" | \"horizontal\" | \"grid\" | \"vertical\"\n    setIsSubmitting: (isSubmitting: boolean) => void\n}\n\nexport function ProviderButton({\n    className,\n    classNames,\n    callbackURL: callbackURLProp,\n    isSubmitting,\n    localization,\n    other,\n    provider,\n    redirectTo: redirectToProp,\n    socialLayout,\n    setIsSubmitting\n}: ProviderButtonProps) {\n    const {\n        authClient,\n        basePath,\n        baseURL,\n        persistClient,\n        redirectTo: contextRedirectTo,\n        viewPaths,\n        social,\n        genericOAuth,\n        toast\n    } = useContext(AuthUIContext)\n\n    const getRedirectTo = useCallback(\n        () =>\n            redirectToProp || getSearchParam(\"redirectTo\") || contextRedirectTo,\n        [redirectToProp, contextRedirectTo]\n    )\n\n    const getCallbackURL = useCallback(\n        () =>\n            `${baseURL}${\n                callbackURLProp ||\n                (persistClient\n                    ? `${basePath}/${viewPaths.CALLBACK}?redirectTo=${getRedirectTo()}`\n                    : getRedirectTo())\n            }`,\n        [\n            callbackURLProp,\n            persistClient,\n            basePath,\n            viewPaths,\n            baseURL,\n            getRedirectTo\n        ]\n    )\n\n    const doSignInSocial = async () => {\n        setIsSubmitting(true)\n\n        try {\n            if (other) {\n                const oauth2Params = {\n                    providerId: provider.provider,\n                    callbackURL: getCallbackURL(),\n                    fetchOptions: { throw: true }\n                }\n\n                if (genericOAuth?.signIn) {\n                    await genericOAuth.signIn(oauth2Params)\n\n                    setTimeout(() => {\n                        setIsSubmitting(false)\n                    }, 10000)\n                } else {\n                    await authClient.signIn.oauth2(oauth2Params)\n                }\n            } else {\n                const socialParams = {\n                    provider: provider.provider as SocialProvider,\n                    callbackURL: getCallbackURL(),\n                    fetchOptions: { throw: true }\n                }\n\n                if (social?.signIn) {\n                    await social.signIn(socialParams)\n\n                    setTimeout(() => {\n                        setIsSubmitting(false)\n                    }, 10000)\n                } else {\n                    await authClient.signIn.social(socialParams)\n                }\n            }\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n\n            setIsSubmitting(false)\n        }\n    }\n\n    return (\n        <Button\n            className={cn(\n                socialLayout === \"vertical\" ? \"w-full\" : \"grow\",\n                className,\n                classNames?.form?.button,\n                classNames?.form?.outlineButton,\n                classNames?.form?.providerButton\n            )}\n            disabled={isSubmitting}\n            variant=\"outline\"\n            onClick={doSignInSocial}\n        >\n            {provider.icon && (\n                <provider.icon className={classNames?.form?.icon} />\n            )}\n\n            {socialLayout === \"grid\" && provider.name}\n            {socialLayout === \"vertical\" &&\n                `${localization.SIGN_IN_WITH} ${provider.name}`}\n        </Button>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}