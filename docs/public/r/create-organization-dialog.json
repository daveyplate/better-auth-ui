{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "create-organization-dialog",
  "type": "registry:component",
  "title": "Create Organization Dialog",
  "description": "",
  "dependencies": [
    "@hookform/resolvers",
    "lucide-react",
    "react-hook-form",
    "zod"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "dialog",
    "dropdown-menu",
    "form",
    "https://better-auth-ui.com/r/image-utils.json",
    "input",
    "https://better-auth-ui.com/r/organization-logo.json",
    "https://better-auth-ui.com/r/settings-card.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/organization/create-organization-dialog.tsx",
      "content": "\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { Loader2, Trash2Icon, UploadCloudIcon } from \"lucide-react\"\nimport {\n    type ComponentProps,\n    useContext,\n    useMemo,\n    useRef,\n    useState\n} from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n\nimport { AuthUIContext } from \"../../lib/auth-ui-provider\"\nimport { fileToBase64, resizeAndCropImage } from \"../../lib/image-utils\"\nimport { cn, getLocalizedError } from \"../../lib/utils\"\nimport type { AuthLocalization } from \"../../localization/auth-localization\"\nimport type { SettingsCardClassNames } from \"../settings/shared/settings-card\"\nimport { Button } from \"../ui/button\"\nimport {\n    Dialog,\n    DialogContent,\n    DialogDescription,\n    DialogFooter,\n    DialogHeader,\n    DialogTitle\n} from \"../ui/dialog\"\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger\n} from \"../ui/dropdown-menu\"\nimport {\n    Form,\n    FormControl,\n    FormField,\n    FormItem,\n    FormLabel,\n    FormMessage\n} from \"../ui/form\"\nimport { Input } from \"../ui/input\"\nimport { OrganizationLogo } from \"./organization-logo\"\n\nexport interface CreateOrganizationDialogProps\n    extends ComponentProps<typeof Dialog> {\n    className?: string\n    classNames?: SettingsCardClassNames\n    localization?: AuthLocalization\n}\n\nexport function CreateOrganizationDialog({\n    className,\n    classNames,\n    localization: localizationProp,\n    onOpenChange,\n    ...props\n}: CreateOrganizationDialogProps) {\n    const {\n        authClient,\n        localization: contextLocalization,\n        organization: organizationOptions,\n        navigate,\n        toast\n    } = useContext(AuthUIContext)\n\n    const localization = useMemo(\n        () => ({ ...contextLocalization, ...localizationProp }),\n        [contextLocalization, localizationProp]\n    )\n\n    const [logo, setLogo] = useState<string | null>(null)\n    const [logoPending, setLogoPending] = useState(false)\n\n    const fileInputRef = useRef<HTMLInputElement>(null)\n    const openFileDialog = () => fileInputRef.current?.click()\n\n    const formSchema = z.object({\n        logo: z.string().optional(),\n        name: z.string().min(1, {\n            message: `${localization.ORGANIZATION_NAME} ${localization.IS_REQUIRED}`\n        }),\n        slug: z\n            .string()\n            .min(1, {\n                message: `${localization.ORGANIZATION_SLUG} ${localization.IS_REQUIRED}`\n            })\n            .regex(/^[a-z0-9-]+$/, {\n                message: `${localization.ORGANIZATION_SLUG} ${localization.IS_INVALID}`\n            })\n    })\n\n    const form = useForm({\n        resolver: zodResolver(formSchema),\n        defaultValues: {\n            logo: \"\",\n            name: \"\",\n            slug: \"\"\n        }\n    })\n\n    const isSubmitting = form.formState.isSubmitting\n\n    const handleLogoChange = async (file: File) => {\n        if (!organizationOptions?.logo) return\n\n        setLogoPending(true)\n\n        try {\n            const resizedFile = await resizeAndCropImage(\n                file,\n                crypto.randomUUID(),\n                organizationOptions.logo.size,\n                organizationOptions.logo.extension\n            )\n\n            let image: string | undefined | null\n\n            if (organizationOptions?.logo.upload) {\n                image = await organizationOptions.logo.upload(resizedFile)\n            } else {\n                image = await fileToBase64(resizedFile)\n            }\n\n            setLogo(image || null)\n            form.setValue(\"logo\", image || \"\")\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n\n        setLogoPending(false)\n    }\n\n    const deleteLogo = async () => {\n        setLogoPending(true)\n\n        const currentUrl = logo || undefined\n        if (currentUrl && organizationOptions?.logo?.delete) {\n            await organizationOptions.logo.delete(currentUrl)\n        }\n\n        setLogo(null)\n        form.setValue(\"logo\", \"\")\n        setLogoPending(false)\n    }\n\n    async function onSubmit({ name, slug, logo }: z.infer<typeof formSchema>) {\n        try {\n            const organization = await authClient.organization.create({\n                name,\n                slug,\n                logo,\n                fetchOptions: { throw: true }\n            })\n\n            if (organizationOptions?.pathMode === \"slug\") {\n                navigate(`${organizationOptions.basePath}/${organization.slug}`)\n                return\n            }\n\n            await authClient.organization.setActive({\n                organizationId: organization.id\n            })\n\n            onOpenChange?.(false)\n            form.reset()\n            setLogo(null)\n\n            toast({\n                variant: \"success\",\n                message: localization.CREATE_ORGANIZATION_SUCCESS\n            })\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n    }\n\n    return (\n        <Dialog onOpenChange={onOpenChange} {...props}>\n            <DialogContent className={classNames?.dialog?.content}>\n                <DialogHeader className={classNames?.dialog?.header}>\n                    <DialogTitle\n                        className={cn(\"text-lg md:text-xl\", classNames?.title)}\n                    >\n                        {localization.CREATE_ORGANIZATION}\n                    </DialogTitle>\n\n                    <DialogDescription\n                        className={cn(\n                            \"text-xs md:text-sm\",\n                            classNames?.description\n                        )}\n                    >\n                        {localization.ORGANIZATIONS_INSTRUCTIONS}\n                    </DialogDescription>\n                </DialogHeader>\n\n                <Form {...form}>\n                    <form\n                        onSubmit={form.handleSubmit(onSubmit)}\n                        className=\"space-y-6\"\n                    >\n                        {organizationOptions?.logo && (\n                            <FormField\n                                control={form.control}\n                                name=\"logo\"\n                                render={() => (\n                                    <FormItem>\n                                        <input\n                                            ref={fileInputRef}\n                                            accept=\"image/*\"\n                                            disabled={logoPending}\n                                            hidden\n                                            type=\"file\"\n                                            onChange={(e) => {\n                                                const file =\n                                                    e.target.files?.item(0)\n                                                if (file) handleLogoChange(file)\n                                                e.target.value = \"\"\n                                            }}\n                                        />\n\n                                        <FormLabel>\n                                            {localization.LOGO}\n                                        </FormLabel>\n\n                                        <div className=\"flex items-center gap-4\">\n                                            <DropdownMenu>\n                                                <DropdownMenuTrigger asChild>\n                                                    <Button\n                                                        className=\"size-fit rounded-full\"\n                                                        size=\"icon\"\n                                                        type=\"button\"\n                                                        variant=\"ghost\"\n                                                    >\n                                                        <OrganizationLogo\n                                                            className=\"size-16\"\n                                                            isPending={\n                                                                logoPending\n                                                            }\n                                                            localization={\n                                                                localization\n                                                            }\n                                                            organization={{\n                                                                name: form.watch(\n                                                                    \"name\"\n                                                                ),\n                                                                logo\n                                                            }}\n                                                        />\n                                                    </Button>\n                                                </DropdownMenuTrigger>\n\n                                                <DropdownMenuContent\n                                                    align=\"start\"\n                                                    onCloseAutoFocus={(e) =>\n                                                        e.preventDefault()\n                                                    }\n                                                >\n                                                    <DropdownMenuItem\n                                                        onClick={openFileDialog}\n                                                        disabled={logoPending}\n                                                    >\n                                                        <UploadCloudIcon />\n\n                                                        {\n                                                            localization.UPLOAD_LOGO\n                                                        }\n                                                    </DropdownMenuItem>\n\n                                                    {logo && (\n                                                        <DropdownMenuItem\n                                                            onClick={deleteLogo}\n                                                            disabled={\n                                                                logoPending\n                                                            }\n                                                            variant=\"destructive\"\n                                                        >\n                                                            <Trash2Icon />\n\n                                                            {\n                                                                localization.DELETE_LOGO\n                                                            }\n                                                        </DropdownMenuItem>\n                                                    )}\n                                                </DropdownMenuContent>\n                                            </DropdownMenu>\n\n                                            <Button\n                                                disabled={logoPending}\n                                                variant=\"outline\"\n                                                onClick={openFileDialog}\n                                                type=\"button\"\n                                            >\n                                                {logoPending && (\n                                                    <Loader2 className=\"animate-spin\" />\n                                                )}\n\n                                                {localization.UPLOAD}\n                                            </Button>\n                                        </div>\n\n                                        <FormMessage />\n                                    </FormItem>\n                                )}\n                            />\n                        )}\n\n                        <FormField\n                            control={form.control}\n                            name=\"name\"\n                            render={({ field }) => (\n                                <FormItem>\n                                    <FormLabel>\n                                        {localization.ORGANIZATION_NAME}\n                                    </FormLabel>\n\n                                    <FormControl>\n                                        <Input\n                                            placeholder={\n                                                localization.ORGANIZATION_NAME_PLACEHOLDER\n                                            }\n                                            {...field}\n                                        />\n                                    </FormControl>\n\n                                    <FormMessage />\n                                </FormItem>\n                            )}\n                        />\n\n                        <FormField\n                            control={form.control}\n                            name=\"slug\"\n                            render={({ field }) => (\n                                <FormItem>\n                                    <FormLabel>\n                                        {localization.ORGANIZATION_SLUG}\n                                    </FormLabel>\n\n                                    <FormControl>\n                                        <Input\n                                            placeholder={\n                                                localization.ORGANIZATION_SLUG_PLACEHOLDER\n                                            }\n                                            {...field}\n                                        />\n                                    </FormControl>\n\n                                    <FormMessage />\n                                </FormItem>\n                            )}\n                        />\n\n                        <DialogFooter className={classNames?.dialog?.footer}>\n                            <Button\n                                type=\"button\"\n                                variant=\"outline\"\n                                onClick={() => onOpenChange?.(false)}\n                                className={cn(\n                                    classNames?.button,\n                                    classNames?.outlineButton\n                                )}\n                            >\n                                {localization.CANCEL}\n                            </Button>\n\n                            <Button\n                                type=\"submit\"\n                                className={cn(\n                                    classNames?.button,\n                                    classNames?.primaryButton\n                                )}\n                                disabled={isSubmitting}\n                            >\n                                {isSubmitting && (\n                                    <Loader2 className=\"animate-spin\" />\n                                )}\n\n                                {localization.CREATE_ORGANIZATION}\n                            </Button>\n                        </DialogFooter>\n                    </form>\n                </Form>\n            </DialogContent>\n        </Dialog>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}