{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "update-field-card",
  "type": "registry:component",
  "title": "Update Field Card",
  "description": "",
  "dependencies": [
    "@hookform/resolvers",
    "react-hook-form",
    "zod"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/additional-fields.json",
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "card",
    "checkbox",
    "form",
    "input",
    "https://better-auth-ui.com/r/settings-card.json",
    "skeleton",
    "textarea",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/settings/account/update-field-card.tsx",
      "content": "\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { type ReactNode, useContext, useMemo } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n\nimport { AuthUIContext } from \"../../../lib/auth-ui-provider\"\nimport { cn, getLocalizedError } from \"../../../lib/utils\"\nimport type { AuthLocalization } from \"../../../localization/auth-localization\"\nimport type { FieldType } from \"../../../types/additional-fields\"\nimport { CardContent } from \"../../ui/card\"\nimport { Checkbox } from \"../../ui/checkbox\"\nimport {\n    Form,\n    FormControl,\n    FormField,\n    FormItem,\n    FormLabel,\n    FormMessage\n} from \"../../ui/form\"\nimport { Input } from \"../../ui/input\"\nimport { Skeleton } from \"../../ui/skeleton\"\nimport { Textarea } from \"../../ui/textarea\"\nimport {\n    SettingsCard,\n    type SettingsCardClassNames\n} from \"../shared/settings-card\"\n\nexport interface UpdateFieldCardProps {\n    className?: string\n    classNames?: SettingsCardClassNames\n    description?: ReactNode\n    instructions?: ReactNode\n    localization?: Partial<AuthLocalization>\n    name: string\n    placeholder?: string\n    required?: boolean\n    label?: ReactNode\n    type?: FieldType\n    multiline?: boolean\n    value?: unknown\n    validate?: (value: string) => boolean | Promise<boolean>\n}\n\nexport function UpdateFieldCard({\n    className,\n    classNames,\n    description,\n    instructions,\n    localization: localizationProp,\n    name,\n    placeholder,\n    required,\n    label,\n    type,\n    multiline,\n    value,\n    validate\n}: UpdateFieldCardProps) {\n    const {\n        hooks: { useSession },\n        mutators: { updateUser },\n        localization: contextLocalization,\n        optimistic,\n        toast\n    } = useContext(AuthUIContext)\n\n    const localization = useMemo(\n        () => ({ ...contextLocalization, ...localizationProp }),\n        [contextLocalization, localizationProp]\n    )\n\n    const { isPending } = useSession()\n\n    let fieldSchema = z.unknown() as z.ZodType<unknown>\n\n    // Create the appropriate schema based on type\n    if (type === \"number\") {\n        fieldSchema = required\n            ? z.preprocess(\n                  (val) => (!val ? undefined : Number(val)),\n                  z.number({\n                      required_error: `${label} ${localization.IS_REQUIRED}`,\n                      invalid_type_error: `${label} ${localization.IS_INVALID}`\n                  })\n              )\n            : z.coerce\n                  .number({\n                      invalid_type_error: `${label} ${localization.IS_INVALID}`\n                  })\n                  .optional()\n    } else if (type === \"boolean\") {\n        fieldSchema = required\n            ? z.coerce\n                  .boolean({\n                      required_error: `${label} ${localization.IS_REQUIRED}`,\n                      invalid_type_error: `${label} ${localization.IS_INVALID}`\n                  })\n                  .refine((val) => val === true, {\n                      message: `${label} ${localization.IS_REQUIRED}`\n                  })\n            : z.coerce.boolean({\n                  invalid_type_error: `${label} ${localization.IS_INVALID}`\n              })\n    } else {\n        fieldSchema = required\n            ? z.string().min(1, `${label} ${localization.IS_REQUIRED}`)\n            : z.string().optional()\n    }\n\n    const form = useForm({\n        resolver: zodResolver(z.object({ [name]: fieldSchema })),\n        values: { [name]: value || \"\" }\n    })\n\n    const { isSubmitting } = form.formState\n\n    const updateField = async (values: Record<string, unknown>) => {\n        await new Promise((resolve) => setTimeout(resolve))\n        const newValue = values[name]\n\n        if (value === newValue) {\n            toast({\n                variant: \"error\",\n                message: `${label} ${localization.IS_THE_SAME}`\n            })\n            return\n        }\n\n        if (\n            validate &&\n            typeof newValue === \"string\" &&\n            !(await validate(newValue))\n        ) {\n            form.setError(name, {\n                message: `${label} ${localization.IS_INVALID}`\n            })\n\n            return\n        }\n\n        try {\n            await updateUser({ [name]: newValue })\n\n            toast({\n                variant: \"success\",\n                message: `${label} ${localization.UPDATED_SUCCESSFULLY}`\n            })\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n    }\n\n    return (\n        <Form {...form}>\n            <form onSubmit={form.handleSubmit(updateField)}>\n                <SettingsCard\n                    className={className}\n                    classNames={classNames}\n                    description={description}\n                    instructions={instructions}\n                    isPending={isPending}\n                    title={label}\n                    actionLabel={localization.SAVE}\n                    optimistic={optimistic}\n                >\n                    <CardContent className={classNames?.content}>\n                        {type === \"boolean\" ? (\n                            <FormField\n                                control={form.control}\n                                name={name}\n                                render={({ field }) => (\n                                    <FormItem className=\"flex\">\n                                        <FormControl>\n                                            <Checkbox\n                                                checked={field.value as boolean}\n                                                onCheckedChange={field.onChange}\n                                                disabled={isSubmitting}\n                                                className={classNames?.checkbox}\n                                            />\n                                        </FormControl>\n\n                                        <FormLabel\n                                            className={classNames?.label}\n                                        >\n                                            {label}\n                                        </FormLabel>\n\n                                        <FormMessage\n                                            className={classNames?.error}\n                                        />\n                                    </FormItem>\n                                )}\n                            />\n                        ) : isPending ? (\n                            <Skeleton\n                                className={cn(\n                                    \"h-9 w-full\",\n                                    classNames?.skeleton\n                                )}\n                            />\n                        ) : (\n                            <FormField\n                                control={form.control}\n                                name={name}\n                                render={({ field }) => (\n                                    <FormItem>\n                                        <FormControl>\n                                            {type === \"number\" ? (\n                                                <Input\n                                                    className={\n                                                        classNames?.input\n                                                    }\n                                                    type=\"number\"\n                                                    placeholder={\n                                                        placeholder ||\n                                                        (typeof label ===\n                                                        \"string\"\n                                                            ? label\n                                                            : \"\")\n                                                    }\n                                                    disabled={isSubmitting}\n                                                    {...field}\n                                                    value={\n                                                        field.value as string\n                                                    }\n                                                />\n                                            ) : multiline ? (\n                                                <Textarea\n                                                    className={\n                                                        classNames?.input\n                                                    }\n                                                    placeholder={\n                                                        placeholder ||\n                                                        (typeof label ===\n                                                        \"string\"\n                                                            ? label\n                                                            : \"\")\n                                                    }\n                                                    disabled={isSubmitting}\n                                                    {...field}\n                                                    value={\n                                                        field.value as string\n                                                    }\n                                                />\n                                            ) : (\n                                                <Input\n                                                    className={\n                                                        classNames?.input\n                                                    }\n                                                    type=\"text\"\n                                                    placeholder={\n                                                        placeholder ||\n                                                        (typeof label ===\n                                                        \"string\"\n                                                            ? label\n                                                            : \"\")\n                                                    }\n                                                    disabled={isSubmitting}\n                                                    {...field}\n                                                    value={\n                                                        field.value as string\n                                                    }\n                                                />\n                                            )}\n                                        </FormControl>\n\n                                        <FormMessage\n                                            className={classNames?.error}\n                                        />\n                                    </FormItem>\n                                )}\n                            />\n                        )}\n                    </CardContent>\n                </SettingsCard>\n            </form>\n        </Form>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}