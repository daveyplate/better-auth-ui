{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "backup-codes-dialog",
  "type": "registry:component",
  "title": "Backup Codes Dialog",
  "description": "",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "dialog",
    "https://better-auth-ui.com/r/settings-card.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/settings/two-factor/backup-codes-dialog.tsx",
      "content": "\"use client\"\n\nimport { CheckIcon, CopyIcon } from \"lucide-react\"\nimport { type ComponentProps, useContext, useState } from \"react\"\n\nimport { AuthUIContext } from \"../../../lib/auth-ui-provider\"\nimport { cn } from \"../../../lib/utils\"\nimport { Button } from \"../../ui/button\"\nimport {\n    Dialog,\n    DialogContent,\n    DialogDescription,\n    DialogFooter,\n    DialogHeader,\n    DialogTitle\n} from \"../../ui/dialog\"\nimport type { SettingsCardClassNames } from \"../shared/settings-card\"\n\ninterface BackupCodesDialogProps extends ComponentProps<typeof Dialog> {\n    classNames?: SettingsCardClassNames\n    backupCodes: string[]\n}\n\nexport function BackupCodesDialog({\n    classNames,\n    backupCodes,\n    onOpenChange,\n    ...props\n}: BackupCodesDialogProps) {\n    const { localization } = useContext(AuthUIContext)\n    const [copied, setCopied] = useState(false)\n\n    const handleCopy = () => {\n        const codeText = backupCodes.join(\"\\n\")\n        navigator.clipboard.writeText(codeText)\n        setCopied(true)\n        setTimeout(() => setCopied(false), 2000)\n    }\n\n    return (\n        <Dialog onOpenChange={onOpenChange} {...props}>\n            <DialogContent\n                onOpenAutoFocus={(e) => e.preventDefault()}\n                className={classNames?.dialog?.content}\n            >\n                <DialogHeader className={classNames?.dialog?.header}>\n                    <DialogTitle\n                        className={cn(\"text-lg md:text-xl\", classNames?.title)}\n                    >\n                        {localization.BACKUP_CODES}\n                    </DialogTitle>\n\n                    <DialogDescription\n                        className={cn(\n                            \"text-xs md:text-sm\",\n                            classNames?.description\n                        )}\n                    >\n                        {localization.BACKUP_CODES_DESCRIPTION}\n                    </DialogDescription>\n                </DialogHeader>\n\n                <div className=\"grid grid-cols-2 gap-2\">\n                    {backupCodes.map((code, index) => (\n                        <div\n                            key={index}\n                            className=\"rounded-md bg-muted p-2 text-center font-mono text-sm\"\n                        >\n                            {code}\n                        </div>\n                    ))}\n                </div>\n\n                <DialogFooter className={classNames?.dialog?.footer}>\n                    <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={handleCopy}\n                        disabled={copied}\n                        className={cn(\n                            classNames?.button,\n                            classNames?.outlineButton\n                        )}\n                    >\n                        {copied ? (\n                            <>\n                                <CheckIcon className={classNames?.icon} />\n                                {localization.COPIED_TO_CLIPBOARD}\n                            </>\n                        ) : (\n                            <>\n                                <CopyIcon className={classNames?.icon} />\n                                {localization.COPY_ALL_CODES}\n                            </>\n                        )}\n                    </Button>\n\n                    <Button\n                        type=\"button\"\n                        variant=\"default\"\n                        onClick={() => onOpenChange?.(false)}\n                        className={cn(\n                            classNames?.button,\n                            classNames?.primaryButton\n                        )}\n                    >\n                        {localization.CONTINUE}\n                    </Button>\n                </DialogFooter>\n            </DialogContent>\n        </Dialog>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}