{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "recover-account-form",
  "type": "registry:component",
  "title": "Recover Account Form",
  "description": "",
  "dependencies": [
    "@hookform/resolvers",
    "lucide-react",
    "react-hook-form",
    "zod"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-form.json",
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "form",
    "input",
    "https://better-auth-ui.com/r/use-success-transition.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/auth/forms/recover-account-form.tsx",
      "content": "\"use client\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { Loader2 } from \"lucide-react\"\nimport { useContext, useEffect } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n\nimport { useOnSuccessTransition } from \"../../../hooks/use-success-transition\"\nimport { AuthUIContext } from \"../../../lib/auth-ui-provider\"\nimport { cn, getLocalizedError } from \"../../../lib/utils\"\nimport type { AuthLocalization } from \"../../../localization/auth-localization\"\nimport { Button } from \"../../ui/button\"\nimport {\n    Form,\n    FormControl,\n    FormField,\n    FormItem,\n    FormLabel,\n    FormMessage\n} from \"../../ui/form\"\nimport { Input } from \"../../ui/input\"\nimport type { AuthFormClassNames } from \"../auth-form\"\n\nexport interface RecoverAccountFormProps {\n    className?: string\n    classNames?: AuthFormClassNames\n    isSubmitting?: boolean\n    localization: Partial<AuthLocalization>\n    redirectTo?: string\n    setIsSubmitting?: (value: boolean) => void\n}\n\nexport function RecoverAccountForm({\n    className,\n    classNames,\n    isSubmitting,\n    localization,\n    redirectTo,\n    setIsSubmitting\n}: RecoverAccountFormProps) {\n    const {\n        authClient,\n        localization: contextLocalization,\n        toast\n    } = useContext(AuthUIContext)\n\n    localization = { ...contextLocalization, ...localization }\n\n    const { onSuccess, isPending: transitionPending } = useOnSuccessTransition({\n        redirectTo\n    })\n\n    const formSchema = z.object({\n        code: z.string().min(1, { message: localization.BACKUP_CODE_REQUIRED })\n    })\n\n    const form = useForm({\n        resolver: zodResolver(formSchema),\n        defaultValues: {\n            code: \"\"\n        }\n    })\n\n    isSubmitting =\n        isSubmitting || form.formState.isSubmitting || transitionPending\n\n    useEffect(() => {\n        setIsSubmitting?.(form.formState.isSubmitting || transitionPending)\n    }, [form.formState.isSubmitting, transitionPending, setIsSubmitting])\n\n    async function verifyBackupCode({ code }: z.infer<typeof formSchema>) {\n        try {\n            await authClient.twoFactor.verifyBackupCode({\n                code,\n                fetchOptions: { throw: true }\n            })\n\n            await onSuccess()\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n\n            form.reset()\n        }\n    }\n\n    return (\n        <Form {...form}>\n            <form\n                onSubmit={form.handleSubmit(verifyBackupCode)}\n                className={cn(\"grid gap-6\", className, classNames?.base)}\n            >\n                <FormField\n                    control={form.control}\n                    name=\"code\"\n                    render={({ field }) => (\n                        <FormItem>\n                            <FormLabel className={classNames?.label}>\n                                {localization.BACKUP_CODE}\n                            </FormLabel>\n\n                            <FormControl>\n                                <Input\n                                    placeholder={\n                                        localization.BACKUP_CODE_PLACEHOLDER\n                                    }\n                                    autoComplete=\"off\"\n                                    className={classNames?.input}\n                                    disabled={isSubmitting}\n                                    {...field}\n                                />\n                            </FormControl>\n\n                            <FormMessage className={classNames?.error} />\n                        </FormItem>\n                    )}\n                />\n\n                <Button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    className={cn(\n                        classNames?.button,\n                        classNames?.primaryButton\n                    )}\n                >\n                    {isSubmitting ? (\n                        <Loader2 className=\"animate-spin\" />\n                    ) : (\n                        localization.RECOVER_ACCOUNT_ACTION\n                    )}\n                </Button>\n            </form>\n        </Form>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}