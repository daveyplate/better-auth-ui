{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "two-factor-form",
  "type": "registry:component",
  "title": "Two Factor Form",
  "description": "",
  "dependencies": [
    "@better-fetch/fetch",
    "@hookform/resolvers",
    "lucide-react",
    "react-hook-form",
    "react-qr-code",
    "zod"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-client.json",
    "https://better-auth-ui.com/r/auth-form.json",
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "checkbox",
    "form",
    "input-otp",
    "label",
    "https://better-auth-ui.com/r/otp-input-group.json",
    "https://better-auth-ui.com/r/use-hydrated.json",
    "https://better-auth-ui.com/r/use-success-transition.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/auth/forms/two-factor-form.tsx",
      "content": "\"use client\"\n\nimport type { BetterFetchError } from \"@better-fetch/fetch\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { Loader2, QrCodeIcon, SendIcon } from \"lucide-react\"\nimport { useContext, useEffect, useRef, useState } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport QRCode from \"react-qr-code\"\nimport * as z from \"zod\"\n\nimport { useIsHydrated } from \"../../../hooks/use-hydrated\"\nimport { useOnSuccessTransition } from \"../../../hooks/use-success-transition\"\nimport { AuthUIContext } from \"../../../lib/auth-ui-provider\"\nimport { cn, getLocalizedError, getSearchParam } from \"../../../lib/utils\"\nimport type { AuthLocalization } from \"../../../localization/auth-localization\"\nimport type { User } from \"../../../types/auth-client\"\nimport { Button } from \"../../ui/button\"\nimport { Checkbox } from \"../../ui/checkbox\"\nimport {\n    Form,\n    FormControl,\n    FormField,\n    FormItem,\n    FormLabel,\n    FormMessage\n} from \"../../ui/form\"\nimport { InputOTP } from \"../../ui/input-otp\"\nimport { Label } from \"../../ui/label\"\nimport type { AuthFormClassNames } from \"../auth-form\"\nimport { OTPInputGroup } from \"../otp-input-group\"\n\nexport interface TwoFactorFormProps {\n    className?: string\n    classNames?: AuthFormClassNames\n    isSubmitting?: boolean\n    localization?: Partial<AuthLocalization>\n    otpSeparators?: 0 | 1 | 2\n    redirectTo?: string\n    setIsSubmitting?: (value: boolean) => void\n}\n\nexport function TwoFactorForm({\n    className,\n    classNames,\n    isSubmitting,\n    localization,\n    otpSeparators = 0,\n    redirectTo,\n    setIsSubmitting\n}: TwoFactorFormProps) {\n    const isHydrated = useIsHydrated()\n    const totpURI = isHydrated ? getSearchParam(\"totpURI\") : null\n    const initialSendRef = useRef(false)\n\n    const {\n        authClient,\n        basePath,\n        hooks: { useSession },\n        localization: contextLocalization,\n        twoFactor,\n        viewPaths,\n        toast,\n        Link\n    } = useContext(AuthUIContext)\n\n    localization = { ...contextLocalization, ...localization }\n\n    const { onSuccess, isPending: transitionPending } = useOnSuccessTransition({\n        redirectTo\n    })\n\n    const { data: sessionData } = useSession()\n    const isTwoFactorEnabled = (sessionData?.user as User)?.twoFactorEnabled\n\n    const [method, setMethod] = useState<\"totp\" | \"otp\" | null>(\n        twoFactor?.length === 1 ? twoFactor[0] : null\n    )\n\n    const [isSendingOtp, setIsSendingOtp] = useState(false)\n    const [cooldownSeconds, setCooldownSeconds] = useState(0)\n\n    const formSchema = z.object({\n        code: z\n            .string()\n            .min(1, {\n                message: `${localization.ONE_TIME_PASSWORD} ${localization.IS_REQUIRED}`\n            })\n            .min(6, {\n                message: `${localization.ONE_TIME_PASSWORD} ${localization.IS_INVALID}`\n            }),\n        trustDevice: z.boolean().optional()\n    })\n\n    const form = useForm({\n        resolver: zodResolver(formSchema),\n        defaultValues: {\n            code: \"\"\n        }\n    })\n\n    isSubmitting =\n        isSubmitting || form.formState.isSubmitting || transitionPending\n\n    useEffect(() => {\n        setIsSubmitting?.(form.formState.isSubmitting || transitionPending)\n    }, [form.formState.isSubmitting, transitionPending, setIsSubmitting])\n\n    // biome-ignore lint/correctness/useExhaustiveDependencies: ignore\n    useEffect(() => {\n        if (\n            method === \"otp\" &&\n            cooldownSeconds <= 0 &&\n            !initialSendRef.current\n        ) {\n            initialSendRef.current = true\n            sendOtp()\n        }\n    }, [method])\n\n    useEffect(() => {\n        if (cooldownSeconds <= 0) return\n\n        const timer = setTimeout(() => {\n            setCooldownSeconds((prev) => prev - 1)\n        }, 1000)\n        return () => clearTimeout(timer)\n    }, [cooldownSeconds])\n\n    const sendOtp = async () => {\n        if (isSendingOtp || cooldownSeconds > 0) return\n\n        try {\n            setIsSendingOtp(true)\n            await authClient.twoFactor.sendOtp({\n                fetchOptions: { throw: true }\n            })\n            setCooldownSeconds(60)\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n\n            if (\n                (error as BetterFetchError).error.code ===\n                \"INVALID_TWO_FACTOR_COOKIE\"\n            ) {\n                history.back()\n            }\n        }\n\n        initialSendRef.current = false\n        setIsSendingOtp(false)\n    }\n\n    async function verifyCode({\n        code,\n        trustDevice\n    }: z.infer<typeof formSchema>) {\n        try {\n            const verifyMethod =\n                method === \"totp\"\n                    ? authClient.twoFactor.verifyTotp\n                    : authClient.twoFactor.verifyOtp\n\n            await verifyMethod({\n                code,\n                trustDevice,\n                fetchOptions: { throw: true }\n            })\n\n            await onSuccess()\n\n            if (sessionData && !isTwoFactorEnabled) {\n                toast({\n                    variant: \"success\",\n                    message: localization?.TWO_FACTOR_ENABLED\n                })\n            }\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n\n            form.reset()\n        }\n    }\n\n    return (\n        <Form {...form}>\n            <form\n                onSubmit={form.handleSubmit(verifyCode)}\n                className={cn(\"grid w-full gap-6\", className, classNames?.base)}\n            >\n                {twoFactor?.includes(\"totp\") &&\n                    totpURI &&\n                    method === \"totp\" && (\n                        <div className=\"space-y-3\">\n                            <Label className={classNames?.label}>\n                                {localization.TWO_FACTOR_TOTP_LABEL}\n                            </Label>\n\n                            <QRCode\n                                className={cn(\n                                    \"border shadow-xs\",\n                                    classNames?.qrCode\n                                )}\n                                value={totpURI}\n                            />\n                        </div>\n                    )}\n\n                {method !== null && (\n                    <>\n                        <FormField\n                            control={form.control}\n                            name=\"code\"\n                            render={({ field }) => (\n                                <FormItem>\n                                    <div className=\"flex items-center justify-between\">\n                                        <FormLabel\n                                            className={classNames?.label}\n                                        >\n                                            {localization.ONE_TIME_PASSWORD}\n                                        </FormLabel>\n\n                                        <Link\n                                            className={cn(\n                                                \"text-sm hover:underline\",\n                                                classNames?.forgotPasswordLink\n                                            )}\n                                            href={`${basePath}/${viewPaths.RECOVER_ACCOUNT}${isHydrated ? window.location.search : \"\"}`}\n                                        >\n                                            {localization.FORGOT_AUTHENTICATOR}\n                                        </Link>\n                                    </div>\n\n                                    <FormControl>\n                                        <InputOTP\n                                            {...field}\n                                            maxLength={6}\n                                            onChange={(value) => {\n                                                field.onChange(value)\n\n                                                if (value.length === 6) {\n                                                    form.handleSubmit(\n                                                        verifyCode\n                                                    )()\n                                                }\n                                            }}\n                                            containerClassName={\n                                                classNames?.otpInputContainer\n                                            }\n                                            className={classNames?.otpInput}\n                                            disabled={isSubmitting}\n                                        >\n                                            <OTPInputGroup\n                                                otpSeparators={otpSeparators}\n                                            />\n                                        </InputOTP>\n                                    </FormControl>\n\n                                    <FormMessage\n                                        className={classNames?.error}\n                                    />\n                                </FormItem>\n                            )}\n                        />\n\n                        <FormField\n                            control={form.control}\n                            name=\"trustDevice\"\n                            render={({ field }) => (\n                                <FormItem className=\"flex\">\n                                    <FormControl>\n                                        <Checkbox\n                                            checked={field.value}\n                                            onCheckedChange={field.onChange}\n                                            disabled={isSubmitting}\n                                            className={classNames?.checkbox}\n                                        />\n                                    </FormControl>\n\n                                    <FormLabel className={classNames?.label}>\n                                        {localization.TRUST_DEVICE}\n                                    </FormLabel>\n                                </FormItem>\n                            )}\n                        />\n                    </>\n                )}\n\n                <div className=\"grid gap-4\">\n                    {method !== null && (\n                        <Button\n                            type=\"submit\"\n                            disabled={isSubmitting}\n                            className={cn(\n                                classNames?.button,\n                                classNames?.primaryButton\n                            )}\n                        >\n                            {isSubmitting && (\n                                <Loader2 className=\"animate-spin\" />\n                            )}\n                            {localization.TWO_FACTOR_ACTION}\n                        </Button>\n                    )}\n\n                    {method === \"otp\" && twoFactor?.includes(\"otp\") && (\n                        <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={sendOtp}\n                            disabled={\n                                cooldownSeconds > 0 ||\n                                isSendingOtp ||\n                                isSubmitting\n                            }\n                            className={cn(\n                                classNames?.button,\n                                classNames?.outlineButton\n                            )}\n                        >\n                            {isSendingOtp ? (\n                                <Loader2 className=\"animate-spin\" />\n                            ) : (\n                                <SendIcon className={classNames?.icon} />\n                            )}\n\n                            {localization.RESEND_CODE}\n                            {cooldownSeconds > 0 && ` (${cooldownSeconds})`}\n                        </Button>\n                    )}\n\n                    {method !== \"otp\" && twoFactor?.includes(\"otp\") && (\n                        <Button\n                            type=\"button\"\n                            variant=\"secondary\"\n                            className={cn(\n                                classNames?.button,\n                                classNames?.secondaryButton\n                            )}\n                            onClick={() => setMethod(\"otp\")}\n                            disabled={isSubmitting}\n                        >\n                            <SendIcon className={classNames?.icon} />\n                            {localization.SEND_VERIFICATION_CODE}\n                        </Button>\n                    )}\n\n                    {method !== \"totp\" && twoFactor?.includes(\"totp\") && (\n                        <Button\n                            type=\"button\"\n                            variant=\"secondary\"\n                            className={cn(\n                                classNames?.button,\n                                classNames?.secondaryButton\n                            )}\n                            onClick={() => setMethod(\"totp\")}\n                            disabled={isSubmitting}\n                        >\n                            <QrCodeIcon className={classNames?.icon} />\n                            {localization.CONTINUE_WITH_AUTHENTICATOR}\n                        </Button>\n                    )}\n                </div>\n            </form>\n        </Form>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}