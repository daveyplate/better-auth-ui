{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "delete-account-dialog",
  "type": "registry:component",
  "title": "Delete Account Dialog",
  "description": "",
  "dependencies": [
    "@hookform/resolvers",
    "lucide-react",
    "react-hook-form",
    "zod"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "card",
    "dialog",
    "form",
    "input",
    "https://better-auth-ui.com/r/settings-card.json",
    "https://better-auth-ui.com/r/user-view.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/settings/account/delete-account-dialog.tsx",
      "content": "import { zodResolver } from \"@hookform/resolvers/zod\"\nimport { Loader2 } from \"lucide-react\"\nimport { type ComponentProps, useContext } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\nimport { AuthUIContext } from \"../../../lib/auth-ui-provider\"\nimport { cn, getLocalizedError } from \"../../../lib/utils\"\nimport type { AuthLocalization } from \"../../../localization/auth-localization\"\nimport { Button } from \"../../ui/button\"\nimport { Card } from \"../../ui/card\"\nimport {\n    Dialog,\n    DialogContent,\n    DialogDescription,\n    DialogFooter,\n    DialogHeader,\n    DialogTitle\n} from \"../../ui/dialog\"\nimport {\n    Form,\n    FormControl,\n    FormField,\n    FormItem,\n    FormLabel,\n    FormMessage\n} from \"../../ui/form\"\nimport { Input } from \"../../ui/input\"\nimport { UserView } from \"../../user-view\"\nimport type { SettingsCardClassNames } from \"../shared/settings-card\"\n\nexport interface DeleteAccountDialogProps\n    extends ComponentProps<typeof Dialog> {\n    classNames?: SettingsCardClassNames\n    accounts?: { provider: string }[] | null\n    localization?: AuthLocalization\n}\n\nexport function DeleteAccountDialog({\n    classNames,\n    accounts,\n    localization,\n    onOpenChange,\n    ...props\n}: DeleteAccountDialogProps) {\n    const {\n        authClient,\n        basePath,\n        baseURL,\n        deleteUser,\n        freshAge,\n        hooks: { useSession },\n        localization: contextLocalization,\n        viewPaths,\n        navigate,\n        toast\n    } = useContext(AuthUIContext)\n\n    localization = { ...contextLocalization, ...localization }\n\n    const { data: sessionData } = useSession()\n    const session = sessionData?.session\n    const user = sessionData?.user\n\n    const isFresh = session\n        ? Date.now() - new Date(session?.createdAt).getTime() < freshAge * 1000\n        : false\n    const credentialsLinked = accounts?.some(\n        (acc) => acc.provider === \"credential\"\n    )\n\n    const formSchema = z.object({\n        password: credentialsLinked\n            ? z.string().min(1, { message: localization.PASSWORD_REQUIRED! })\n            : z.string().optional()\n    })\n\n    const form = useForm({\n        resolver: zodResolver(formSchema),\n        defaultValues: {\n            password: \"\"\n        }\n    })\n\n    const { isSubmitting } = form.formState\n\n    const deleteAccount = async ({ password }: z.infer<typeof formSchema>) => {\n        const params = {} as Record<string, string>\n\n        if (credentialsLinked) {\n            params.password = password!\n        } else if (!isFresh) {\n            navigate(`${basePath}/${viewPaths.SIGN_OUT}`)\n            return\n        }\n\n        if (deleteUser?.verification) {\n            params.callbackURL = `${baseURL}${basePath}/${viewPaths.SIGN_OUT}`\n        }\n\n        try {\n            await authClient.deleteUser({\n                ...params,\n                fetchOptions: {\n                    throw: true\n                }\n            })\n\n            if (deleteUser?.verification) {\n                toast({\n                    variant: \"success\",\n                    message: localization.DELETE_ACCOUNT_VERIFY!\n                })\n            } else {\n                toast({\n                    variant: \"success\",\n                    message: localization.DELETE_ACCOUNT_SUCCESS!\n                })\n                navigate(`${basePath}/${viewPaths.SIGN_OUT}`)\n            }\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n\n        onOpenChange?.(false)\n    }\n\n    return (\n        <Dialog onOpenChange={onOpenChange} {...props}>\n            <DialogContent\n                className={cn(\"sm:max-w-md\", classNames?.dialog?.content)}\n            >\n                <DialogHeader className={classNames?.dialog?.header}>\n                    <DialogTitle\n                        className={cn(\"text-lg md:text-xl\", classNames?.title)}\n                    >\n                        {localization?.DELETE_ACCOUNT}\n                    </DialogTitle>\n\n                    <DialogDescription\n                        className={cn(\n                            \"text-xs md:text-sm\",\n                            classNames?.description\n                        )}\n                    >\n                        {isFresh\n                            ? localization?.DELETE_ACCOUNT_INSTRUCTIONS\n                            : localization?.SESSION_NOT_FRESH}\n                    </DialogDescription>\n                </DialogHeader>\n\n                <Card className={cn(\"my-2 flex-row p-4\", classNames?.cell)}>\n                    <UserView user={user} localization={localization} />\n                </Card>\n\n                <Form {...form}>\n                    <form\n                        onSubmit={form.handleSubmit(deleteAccount)}\n                        className=\"grid gap-6\"\n                    >\n                        {credentialsLinked && (\n                            <FormField\n                                control={form.control}\n                                name=\"password\"\n                                render={({ field }) => (\n                                    <FormItem>\n                                        <FormLabel\n                                            className={classNames?.label}\n                                        >\n                                            {localization?.PASSWORD}\n                                        </FormLabel>\n\n                                        <FormControl>\n                                            <Input\n                                                autoComplete=\"current-password\"\n                                                placeholder={\n                                                    localization?.PASSWORD_PLACEHOLDER\n                                                }\n                                                type=\"password\"\n                                                className={classNames?.input}\n                                                {...field}\n                                            />\n                                        </FormControl>\n\n                                        <FormMessage\n                                            className={classNames?.error}\n                                        />\n                                    </FormItem>\n                                )}\n                            />\n                        )}\n\n                        <DialogFooter className={classNames?.dialog?.footer}>\n                            <Button\n                                type=\"button\"\n                                variant=\"secondary\"\n                                className={cn(\n                                    classNames?.button,\n                                    classNames?.secondaryButton\n                                )}\n                                onClick={() => onOpenChange?.(false)}\n                            >\n                                {localization.CANCEL}\n                            </Button>\n\n                            <Button\n                                className={cn(\n                                    classNames?.button,\n                                    classNames?.destructiveButton\n                                )}\n                                disabled={isSubmitting}\n                                variant=\"destructive\"\n                                type=\"submit\"\n                            >\n                                {isSubmitting && (\n                                    <Loader2 className=\"animate-spin\" />\n                                )}\n                                {isFresh\n                                    ? localization?.DELETE_ACCOUNT\n                                    : localization?.SIGN_OUT}\n                            </Button>\n                        </DialogFooter>\n                    </form>\n                </Form>\n            </DialogContent>\n        </Dialog>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}