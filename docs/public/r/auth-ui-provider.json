{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "auth-ui-provider",
  "type": "registry:lib",
  "title": "Auth Ui Provider",
  "description": "",
  "dependencies": [
    "sonner"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/account-options.json",
    "https://better-auth-ui.com/r/additional-fields.json",
    "https://better-auth-ui.com/r/any-auth-client.json",
    "https://better-auth-ui.com/r/auth-client.json",
    "https://better-auth-ui.com/r/auth-hooks.json",
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-mutators.json",
    "https://better-auth-ui.com/r/avatar-options.json",
    "https://better-auth-ui.com/r/captcha-options.json",
    "https://better-auth-ui.com/r/credentials-options.json",
    "https://better-auth-ui.com/r/delete-user-options.json",
    "https://better-auth-ui.com/r/generic-oauth-options.json",
    "https://better-auth-ui.com/r/gravatar-options.json",
    "https://better-auth-ui.com/r/link.json",
    "https://better-auth-ui.com/r/organization-options.json",
    "https://better-auth-ui.com/r/organization-refetcher.json",
    "https://better-auth-ui.com/r/recaptcha-v3.json",
    "https://better-auth-ui.com/r/render-toast.json",
    "https://better-auth-ui.com/r/sign-up-options.json",
    "https://better-auth-ui.com/r/social-options.json",
    "https://better-auth-ui.com/r/use-auth-data.json",
    "https://better-auth-ui.com/r/view-paths.json"
  ],
  "files": [
    {
      "path": "src/lib/auth-ui-provider.tsx",
      "content": "\"use client\"\n\nimport { createContext, type ReactNode, useMemo } from \"react\"\nimport { toast } from \"sonner\"\n\nimport { RecaptchaV3 } from \"../components/captcha/recaptcha-v3\"\nimport { useAuthData } from \"../hooks/use-auth-data\"\nimport {\n    type AuthLocalization,\n    authLocalization\n} from \"../localization/auth-localization\"\nimport type {\n    AccountOptions,\n    AccountOptionsContext\n} from \"../types/account-options\"\nimport type { AdditionalFields } from \"../types/additional-fields\"\nimport type { AnyAuthClient } from \"../types/any-auth-client\"\nimport type { AuthClient } from \"../types/auth-client\"\nimport type { AuthHooks } from \"../types/auth-hooks\"\nimport type { AuthMutators } from \"../types/auth-mutators\"\nimport type { AvatarOptions } from \"../types/avatar-options\"\nimport type { CaptchaOptions } from \"../types/captcha-options\"\nimport type { CredentialsOptions } from \"../types/credentials-options\"\nimport type { DeleteUserOptions } from \"../types/delete-user-options\"\nimport type { GenericOAuthOptions } from \"../types/generic-oauth-options\"\nimport type { GravatarOptions } from \"../types/gravatar-options\"\nimport type { Link } from \"../types/link\"\nimport type {\n    OrganizationOptions,\n    OrganizationOptionsContext\n} from \"../types/organization-options\"\nimport type { RenderToast } from \"../types/render-toast\"\nimport type { SignUpOptions } from \"../types/sign-up-options\"\nimport type { SocialOptions } from \"../types/social-options\"\nimport { OrganizationRefetcher } from \"./organization-refetcher\"\nimport type { AuthViewPaths } from \"./view-paths\"\nimport {\n    accountViewPaths,\n    authViewPaths,\n    organizationViewPaths\n} from \"./view-paths\"\n\nconst DefaultLink: Link = ({ href, className, children }) => (\n    <a className={className} href={href}>\n        {children}\n    </a>\n)\n\nconst defaultNavigate = (href: string) => {\n    window.location.href = href\n}\n\nconst defaultReplace = (href: string) => {\n    window.location.replace(href)\n}\n\nconst defaultToast: RenderToast = ({ variant = \"default\", message }) => {\n    if (variant === \"default\") {\n        toast(message)\n    } else {\n        toast[variant](message)\n    }\n}\n\nexport type AuthUIContextType = {\n    authClient: AuthClient\n    /**\n     * Additional fields for users\n     */\n    additionalFields?: AdditionalFields\n    /**\n     * API Key plugin configuration\n     */\n    apiKey?:\n        | {\n              /**\n               * Prefix for API Keys\n               */\n              prefix?: string\n              /**\n               * Metadata for API Keys\n               */\n              metadata?: Record<string, unknown>\n          }\n        | boolean\n    /**\n     * Avatar configuration\n     * @default undefined\n     */\n    avatar?: AvatarOptions\n    /**\n     * Base path for the auth views\n     * @default \"/auth\"\n     */\n    basePath: string\n    /**\n     * Front end base URL for auth API callbacks\n     */\n    baseURL?: string\n    /**\n     * Captcha configuration\n     */\n    captcha?: CaptchaOptions\n    credentials?: CredentialsOptions\n    /**\n     * Default redirect URL after authenticating\n     * @default \"/\"\n     */\n    redirectTo: string\n    /**\n     * Enable or disable user change email support\n     * @default true\n     */\n    changeEmail?: boolean\n    /**\n     * User Account deletion configuration\n     * @default undefined\n     */\n    deleteUser?: DeleteUserOptions\n    /**\n     * Show Verify Email card for unverified emails\n     */\n    emailVerification?: boolean\n    /**\n     * Freshness age for Session data\n     * @default 60 * 60 * 24\n     */\n    freshAge: number\n    /**\n     * Generic OAuth provider configuration\n     */\n    genericOAuth?: GenericOAuthOptions\n    /**\n     * Gravatar configuration\n     */\n    gravatar?: boolean | GravatarOptions\n    hooks: AuthHooks\n    localization: typeof authLocalization\n    /**\n     * Enable or disable Magic Link support\n     * @default false\n     */\n    magicLink?: boolean\n    /**\n     * Enable or disable Email OTP support\n     * @default false\n     */\n    emailOTP?: boolean\n    /**\n     * Enable or disable Multi Session support\n     * @default false\n     */\n    multiSession?: boolean\n    mutators: AuthMutators\n    /**\n     * Whether the name field should be required\n     * @default true\n     */\n    nameRequired?: boolean\n    /**\n     * Enable or disable One Tap support\n     * @default false\n     */\n    oneTap?: boolean\n    /**\n     * Perform some User updates optimistically\n     * @default false\n     */\n    optimistic?: boolean\n    /**\n     * Organization configuration\n     */\n    organization?: OrganizationOptionsContext\n    /**\n     * Enable or disable Passkey support\n     * @default false\n     */\n    passkey?: boolean\n    /**\n     * Forces better-auth-tanstack to refresh the Session on the auth callback page\n     * @default false\n     */\n    persistClient?: boolean\n    /**\n     * Account configuration\n     */\n    account?: AccountOptionsContext\n    /**\n     * Sign Up configuration\n     */\n    signUp?: SignUpOptions\n    /**\n     * Social provider configuration\n     */\n    social?: SocialOptions\n    toast: RenderToast\n    /**\n     * Enable or disable two-factor authentication support\n     * @default undefined\n     */\n    twoFactor?: (\"otp\" | \"totp\")[]\n    viewPaths: AuthViewPaths\n    /**\n     * Navigate to a new URL\n     * @default window.location.href\n     */\n    navigate: (href: string) => void\n    /**\n     * Called whenever the Session changes\n     */\n    onSessionChange?: () => void | Promise<void>\n    /**\n     * Replace the current URL\n     * @default navigate\n     */\n    replace: (href: string) => void\n    /**\n     * Custom Link component for navigation\n     * @default <a>\n     */\n    Link: Link\n}\n\nexport type AuthUIProviderProps = {\n    children: ReactNode\n    /**\n     * Better Auth client returned from createAuthClient\n     * @default Required\n     * @remarks `AuthClient`\n     */\n    authClient: AnyAuthClient\n    /**\n     * Enable account view & account configuration\n     * @default { fields: [\"image\", \"name\"] }\n     */\n    account?: boolean | Partial<AccountOptions>\n    /**\n     * Avatar configuration\n     * @default undefined\n     */\n    avatar?: boolean | Partial<AvatarOptions>\n    /**\n     * User Account deletion configuration\n     * @default undefined\n     */\n    deleteUser?: DeleteUserOptions | boolean\n    /**\n     * ADVANCED: Custom hooks for fetching auth data\n     */\n    hooks?: Partial<AuthHooks>\n    /**\n     * Customize the paths for the auth views\n     * @default authViewPaths\n     * @remarks `AuthViewPaths`\n     */\n    viewPaths?: Partial<AuthViewPaths>\n    /**\n     * Render custom Toasts\n     * @default Sonner\n     */\n    toast?: RenderToast\n    /**\n     * Customize the Localization strings\n     * @default authLocalization\n     * @remarks `AuthLocalization`\n     */\n    localization?: AuthLocalization\n    /**\n     * ADVANCED: Custom mutators for updating auth data\n     */\n    mutators?: Partial<AuthMutators>\n    /**\n     * Organization plugin configuration\n     */\n    organization?: OrganizationOptions | boolean\n    /**\n     * Enable or disable Credentials support\n     * @default { forgotPassword: true }\n     */\n    credentials?: boolean | CredentialsOptions\n    /**\n     * Enable or disable Sign Up form\n     * @default { fields: [\"name\"] }\n     */\n    signUp?: SignUpOptions | boolean\n} & Partial<\n    Omit<\n        AuthUIContextType,\n        | \"authClient\"\n        | \"viewPaths\"\n        | \"localization\"\n        | \"mutators\"\n        | \"toast\"\n        | \"hooks\"\n        | \"avatar\"\n        | \"account\"\n        | \"deleteUser\"\n        | \"credentials\"\n        | \"signUp\"\n        | \"organization\"\n    >\n>\n\nexport const AuthUIContext = createContext<AuthUIContextType>(\n    {} as unknown as AuthUIContextType\n)\n\nexport const AuthUIProvider = ({\n    children,\n    authClient: authClientProp,\n    account: accountProp,\n    avatar: avatarProp,\n    deleteUser: deleteUserProp,\n    social: socialProp,\n    genericOAuth: genericOAuthProp,\n    basePath = \"/auth\",\n    baseURL = \"\",\n    captcha,\n    redirectTo = \"/\",\n    credentials: credentialsProp,\n    changeEmail = true,\n    freshAge = 60 * 60 * 24,\n    hooks: hooksProp,\n    mutators: mutatorsProp,\n    localization: localizationProp,\n    nameRequired = true,\n    organization: organizationProp,\n    signUp: signUpProp = true,\n    toast = defaultToast,\n    viewPaths: viewPathsProp,\n    navigate,\n    replace,\n    Link = DefaultLink,\n    ...props\n}: AuthUIProviderProps) => {\n    const authClient = authClientProp as AuthClient\n\n    const avatar = useMemo<AvatarOptions | undefined>(() => {\n        if (!avatarProp) return\n\n        if (avatarProp === true) {\n            return {\n                extension: \"png\",\n                size: 128\n            }\n        }\n\n        return {\n            upload: avatarProp.upload,\n            delete: avatarProp.delete,\n            extension: avatarProp.extension || \"png\",\n            size: avatarProp.size || (avatarProp.upload ? 256 : 128)\n        }\n    }, [avatarProp])\n\n    const account = useMemo<AccountOptionsContext | undefined>(() => {\n        if (accountProp === false) return\n\n        if (accountProp === true || accountProp === undefined) {\n            return {\n                basePath: \"/account\",\n                fields: [\"image\", \"name\"],\n                viewPaths: accountViewPaths\n            }\n        }\n\n        // Remove trailing slash from basePath\n        const basePath = accountProp.basePath?.endsWith(\"/\")\n            ? accountProp.basePath.slice(0, -1)\n            : accountProp.basePath\n\n        return {\n            basePath: basePath ?? \"/account\",\n            fields: accountProp.fields || [\"image\", \"name\"],\n            viewPaths: { ...accountViewPaths, ...accountProp.viewPaths }\n        }\n    }, [accountProp])\n\n    const deleteUser = useMemo<DeleteUserOptions | undefined>(() => {\n        if (!deleteUserProp) return\n\n        if (deleteUserProp === true) {\n            return {}\n        }\n\n        return deleteUserProp\n    }, [deleteUserProp])\n\n    const social = useMemo<SocialOptions | undefined>(() => {\n        if (!socialProp) return\n\n        return socialProp\n    }, [socialProp])\n\n    const genericOAuth = useMemo<GenericOAuthOptions | undefined>(() => {\n        if (!genericOAuthProp) return\n\n        return genericOAuthProp\n    }, [genericOAuthProp])\n\n    const credentials = useMemo<CredentialsOptions | undefined>(() => {\n        if (credentialsProp === false) return\n\n        if (credentialsProp === true) {\n            return {\n                forgotPassword: true\n            }\n        }\n\n        return {\n            ...credentialsProp,\n            forgotPassword: credentialsProp?.forgotPassword ?? true\n        }\n    }, [credentialsProp])\n\n    const signUp = useMemo<SignUpOptions | undefined>(() => {\n        if (signUpProp === false) return\n\n        if (signUpProp === true || signUpProp === undefined) {\n            return {\n                fields: [\"name\"]\n            }\n        }\n\n        return {\n            fields: signUpProp.fields || [\"name\"]\n        }\n    }, [signUpProp])\n\n    const organization = useMemo<OrganizationOptionsContext | undefined>(() => {\n        if (!organizationProp) return\n\n        if (organizationProp === true) {\n            return {\n                basePath: \"/organization\",\n                viewPaths: organizationViewPaths,\n                customRoles: []\n            }\n        }\n\n        let logo: OrganizationOptionsContext[\"logo\"] | undefined\n\n        if (organizationProp.logo === true) {\n            logo = {\n                extension: \"png\",\n                size: 128\n            }\n        } else if (organizationProp.logo) {\n            logo = {\n                upload: organizationProp.logo.upload,\n                delete: organizationProp.logo.delete,\n                extension: organizationProp.logo.extension || \"png\",\n                size:\n                    organizationProp.logo.size || organizationProp.logo.upload\n                        ? 256\n                        : 128\n            }\n        }\n\n        // Remove trailing slash from basePath\n        const basePath = organizationProp.basePath?.endsWith(\"/\")\n            ? organizationProp.basePath.slice(0, -1)\n            : organizationProp.basePath\n\n        return {\n            ...organizationProp,\n            logo,\n            basePath: basePath ?? \"/organization\",\n            customRoles: organizationProp.customRoles || [],\n            viewPaths: {\n                ...organizationViewPaths,\n                ...organizationProp.viewPaths\n            }\n        }\n    }, [organizationProp])\n\n    const defaultMutators = useMemo(() => {\n        return {\n            deleteApiKey: (params) =>\n                authClient.apiKey.delete({\n                    ...params,\n                    fetchOptions: { throw: true }\n                }),\n            deletePasskey: (params) =>\n                authClient.passkey.deletePasskey({\n                    ...params,\n                    fetchOptions: { throw: true }\n                }),\n            revokeDeviceSession: (params) =>\n                authClient.multiSession.revoke({\n                    ...params,\n                    fetchOptions: { throw: true }\n                }),\n            revokeSession: (params) =>\n                authClient.revokeSession({\n                    ...params,\n                    fetchOptions: { throw: true }\n                }),\n            setActiveSession: (params) =>\n                authClient.multiSession.setActive({\n                    ...params,\n                    fetchOptions: { throw: true }\n                }),\n            updateOrganization: (params) =>\n                authClient.organization.update({\n                    ...params,\n                    fetchOptions: { throw: true }\n                }),\n            updateUser: (params) =>\n                authClient.updateUser({\n                    ...params,\n                    fetchOptions: { throw: true }\n                }),\n            unlinkAccount: (params) =>\n                authClient.unlinkAccount({\n                    ...params,\n                    fetchOptions: { throw: true }\n                })\n        } as AuthMutators\n    }, [authClient])\n\n    const defaultHooks = useMemo(() => {\n        return {\n            useSession: authClient.useSession,\n            useListAccounts: () =>\n                useAuthData({\n                    queryFn: authClient.listAccounts,\n                    cacheKey: \"listAccounts\"\n                }),\n            useAccountInfo: (params) =>\n                useAuthData({\n                    queryFn: () => authClient.accountInfo(params),\n                    cacheKey: `accountInfo:${JSON.stringify(params)}`\n                }),\n            useListDeviceSessions: () =>\n                useAuthData({\n                    queryFn: authClient.multiSession.listDeviceSessions,\n                    cacheKey: \"listDeviceSessions\"\n                }),\n            useListSessions: () =>\n                useAuthData({\n                    queryFn: authClient.listSessions,\n                    cacheKey: \"listSessions\"\n                }),\n            useListPasskeys: authClient.useListPasskeys,\n            useListApiKeys: () =>\n                useAuthData({\n                    queryFn: authClient.apiKey.list,\n                    cacheKey: \"listApiKeys\"\n                }),\n            useActiveOrganization: authClient.useActiveOrganization,\n            useListOrganizations: authClient.useListOrganizations,\n            useHasPermission: (params) =>\n                useAuthData({\n                    queryFn: () =>\n                        authClient.$fetch(\"/organization/has-permission\", {\n                            method: \"POST\",\n                            body: params\n                        }),\n                    cacheKey: `hasPermission:${JSON.stringify(params)}`\n                }),\n            useInvitation: (params) =>\n                useAuthData({\n                    queryFn: () =>\n                        authClient.organization.getInvitation(params),\n                    cacheKey: `invitation:${JSON.stringify(params)}`\n                }),\n            useListInvitations: (params) =>\n                useAuthData({\n                    queryFn: () =>\n                        authClient.$fetch(\n                            `/organization/list-invitations?organizationId=${params?.query?.organizationId || \"\"}`\n                        ),\n                    cacheKey: `listInvitations:${JSON.stringify(params)}`\n                }),\n            useListUserInvitations: () =>\n                useAuthData({\n                    queryFn: () =>\n                        authClient.$fetch(\n                            \"/organization/list-user-invitations\"\n                        ),\n                    cacheKey: `listUserInvitations`\n                }),\n            useListMembers: (params) =>\n                useAuthData({\n                    queryFn: () =>\n                        authClient.$fetch(\n                            `/organization/list-members?organizationId=${params?.query?.organizationId || \"\"}`\n                        ),\n                    cacheKey: `listMembers:${JSON.stringify(params)}`\n                })\n        } as AuthHooks\n    }, [authClient])\n\n    const viewPaths = useMemo(() => {\n        return { ...authViewPaths, ...viewPathsProp }\n    }, [viewPathsProp])\n\n    const localization = useMemo(() => {\n        return { ...authLocalization, ...localizationProp }\n    }, [localizationProp])\n\n    const hooks = useMemo(() => {\n        return { ...defaultHooks, ...hooksProp }\n    }, [defaultHooks, hooksProp])\n\n    const mutators = useMemo(() => {\n        return { ...defaultMutators, ...mutatorsProp }\n    }, [defaultMutators, mutatorsProp])\n\n    // Remove trailing slash from baseURL\n    baseURL = baseURL.endsWith(\"/\") ? baseURL.slice(0, -1) : baseURL\n\n    // Remove trailing slash from basePath\n    basePath = basePath.endsWith(\"/\") ? basePath.slice(0, -1) : basePath\n\n    const { data: sessionData } = hooks.useSession()\n\n    return (\n        <AuthUIContext.Provider\n            value={{\n                authClient,\n                avatar,\n                basePath: basePath === \"/\" ? \"\" : basePath,\n                baseURL,\n                captcha,\n                redirectTo,\n                changeEmail,\n                credentials,\n                deleteUser,\n                freshAge,\n                genericOAuth,\n                hooks,\n                mutators,\n                localization,\n                nameRequired,\n                organization,\n                account,\n                signUp,\n                social,\n                toast,\n                navigate: navigate || defaultNavigate,\n                replace: replace || navigate || defaultReplace,\n                viewPaths,\n                Link,\n                ...props\n            }}\n        >\n            {sessionData && organization && <OrganizationRefetcher />}\n\n            {captcha?.provider === \"google-recaptcha-v3\" ? (\n                <RecaptchaV3>{children}</RecaptchaV3>\n            ) : (\n                children\n            )}\n        </AuthUIContext.Provider>\n    )\n}\n",
      "type": "registry:lib"
    }
  ]
}