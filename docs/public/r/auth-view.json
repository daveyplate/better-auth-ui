{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "auth-view",
  "type": "registry:component",
  "title": "Auth View",
  "description": "",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-callback.json",
    "https://better-auth-ui.com/r/auth-form.json",
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "card",
    "https://better-auth-ui.com/r/email-otp-button.json",
    "https://better-auth-ui.com/r/magic-link-button.json",
    "https://better-auth-ui.com/r/one-tap.json",
    "https://better-auth-ui.com/r/passkey-button.json",
    "https://better-auth-ui.com/r/provider-button.json",
    "separator",
    "https://better-auth-ui.com/r/sign-out.json",
    "https://better-auth-ui.com/r/social-providers.json",
    "https://better-auth-ui.com/r/use-hydrated.json",
    "https://better-auth-ui.com/r/utils.json",
    "https://better-auth-ui.com/r/view-paths.json"
  ],
  "files": [
    {
      "path": "src/components/auth/auth-view.tsx",
      "content": "\"use client\"\n\nimport { ArrowLeftIcon } from \"lucide-react\"\nimport { type ReactNode, useContext, useEffect, useState } from \"react\"\nimport { useIsHydrated } from \"../../hooks/use-hydrated\"\nimport { AuthUIContext } from \"../../lib/auth-ui-provider\"\nimport { socialProviders } from \"../../lib/social-providers\"\nimport { cn, getViewByPath } from \"../../lib/utils\"\nimport type { AuthViewPaths } from \"../../lib/view-paths\"\nimport type { AuthLocalization } from \"../../localization/auth-localization\"\nimport { Button } from \"../ui/button\"\nimport {\n    Card,\n    CardContent,\n    CardDescription,\n    CardFooter,\n    CardHeader,\n    CardTitle\n} from \"../ui/card\"\nimport { Separator } from \"../ui/separator\"\nimport { AuthCallback } from \"./auth-callback\"\nimport { AuthForm, type AuthFormClassNames } from \"./auth-form\"\nimport { EmailOTPButton } from \"./email-otp-button\"\nimport { MagicLinkButton } from \"./magic-link-button\"\nimport { OneTap } from \"./one-tap\"\nimport { PasskeyButton } from \"./passkey-button\"\nimport { ProviderButton } from \"./provider-button\"\nimport { SignOut } from \"./sign-out\"\n\nexport type AuthViewClassNames = {\n    base?: string\n    content?: string\n    description?: string\n    footer?: string\n    footerLink?: string\n    continueWith?: string\n    form?: AuthFormClassNames\n    header?: string\n    separator?: string\n    title?: string\n}\n\nexport interface AuthViewProps {\n    className?: string\n    classNames?: AuthViewClassNames\n    callbackURL?: string\n    cardHeader?: ReactNode\n    localization?: AuthLocalization\n    pathname?: string\n    redirectTo?: string\n    socialLayout?: \"auto\" | \"horizontal\" | \"grid\" | \"vertical\"\n    view?: keyof AuthViewPaths\n    otpSeparators?: 0 | 1 | 2\n}\n\nexport function AuthView({\n    className,\n    classNames,\n    callbackURL,\n    cardHeader,\n    localization,\n    pathname,\n    redirectTo,\n    socialLayout: socialLayoutProp = \"auto\",\n    view: viewProp,\n    otpSeparators = 0\n}: AuthViewProps) {\n    const isHydrated = useIsHydrated()\n    const {\n        basePath,\n        credentials,\n        localization: contextLocalization,\n        magicLink,\n        emailOTP,\n        oneTap,\n        passkey,\n        signUp,\n        social,\n        genericOAuth,\n        viewPaths,\n        Link\n    } = useContext(AuthUIContext)\n\n    localization = { ...contextLocalization, ...localization }\n\n    let socialLayout = socialLayoutProp\n    if (socialLayout === \"auto\") {\n        socialLayout = !credentials\n            ? \"vertical\"\n            : social?.providers && social.providers.length > 2\n              ? \"horizontal\"\n              : \"vertical\"\n    }\n\n    const path = pathname?.split(\"/\").pop()\n    const view =\n        viewProp ||\n        (getViewByPath(\n            viewPaths as unknown as Record<string, string>,\n            path\n        ) as typeof viewProp) ||\n        \"SIGN_IN\"\n\n    const [isSubmitting, setIsSubmitting] = useState(false)\n\n    useEffect(() => {\n        const handlePageHide = () => setIsSubmitting(false)\n        window.addEventListener(\"pagehide\", handlePageHide)\n        return () => {\n            setIsSubmitting(false)\n            window.removeEventListener(\"pagehide\", handlePageHide)\n        }\n    }, [])\n\n    if (view === \"CALLBACK\") return <AuthCallback redirectTo={redirectTo} />\n    if (view === \"SIGN_OUT\") return <SignOut />\n\n    const description =\n        !credentials && !magicLink && !emailOTP\n            ? localization.DISABLED_CREDENTIALS_DESCRIPTION\n            : localization[`${view}_DESCRIPTION` as keyof typeof localization]\n\n    return (\n        <Card className={cn(\"w-full max-w-sm\", className, classNames?.base)}>\n            <CardHeader className={classNames?.header}>\n                {cardHeader ? (\n                    cardHeader\n                ) : (\n                    <>\n                        <CardTitle\n                            className={cn(\n                                \"text-lg md:text-xl\",\n                                classNames?.title\n                            )}\n                        >\n                            {localization[view as keyof typeof localization]}\n                        </CardTitle>\n                        {description && (\n                            <CardDescription\n                                className={cn(\n                                    \"text-xs md:text-sm\",\n                                    classNames?.description\n                                )}\n                            >\n                                {description}\n                            </CardDescription>\n                        )}\n                    </>\n                )}\n            </CardHeader>\n\n            <CardContent className={cn(\"grid gap-6\", classNames?.content)}>\n                {oneTap &&\n                    [\"SIGN_IN\", \"SIGN_UP\", \"MAGIC_LINK\", \"EMAIL_OTP\"].includes(\n                        view as string\n                    ) && (\n                        <OneTap\n                            localization={localization}\n                            redirectTo={redirectTo}\n                        />\n                    )}\n\n                {(credentials || magicLink || emailOTP) && (\n                    <div className=\"grid gap-4\">\n                        <AuthForm\n                            classNames={classNames?.form}\n                            callbackURL={callbackURL}\n                            isSubmitting={isSubmitting}\n                            localization={localization}\n                            otpSeparators={otpSeparators}\n                            pathname={pathname}\n                            redirectTo={redirectTo}\n                            setIsSubmitting={setIsSubmitting}\n                        />\n\n                        {magicLink &&\n                            ((credentials &&\n                                [\n                                    \"FORGOT_PASSWORD\",\n                                    \"SIGN_UP\",\n                                    \"SIGN_IN\",\n                                    \"MAGIC_LINK\",\n                                    \"EMAIL_OTP\"\n                                ].includes(view as string)) ||\n                                (emailOTP && view === \"EMAIL_OTP\")) && (\n                                <MagicLinkButton\n                                    classNames={classNames}\n                                    localization={localization}\n                                    view={view}\n                                    isSubmitting={isSubmitting}\n                                />\n                            )}\n\n                        {emailOTP &&\n                            ((credentials &&\n                                [\n                                    \"FORGOT_PASSWORD\",\n                                    \"SIGN_UP\",\n                                    \"SIGN_IN\",\n                                    \"MAGIC_LINK\",\n                                    \"EMAIL_OTP\"\n                                ].includes(view as string)) ||\n                                (magicLink &&\n                                    [\"SIGN_IN\", \"MAGIC_LINK\"].includes(\n                                        view as string\n                                    ))) && (\n                                <EmailOTPButton\n                                    classNames={classNames}\n                                    localization={localization}\n                                    view={view}\n                                    isSubmitting={isSubmitting}\n                                />\n                            )}\n                    </div>\n                )}\n\n                {view !== \"RESET_PASSWORD\" &&\n                    (social?.providers?.length ||\n                        genericOAuth?.providers?.length ||\n                        (view === \"SIGN_IN\" && passkey)) && (\n                        <>\n                            {(credentials || magicLink || emailOTP) && (\n                                <div\n                                    className={cn(\n                                        \"flex items-center gap-2\",\n                                        classNames?.continueWith\n                                    )}\n                                >\n                                    <Separator\n                                        className={cn(\n                                            \"!w-auto grow\",\n                                            classNames?.separator\n                                        )}\n                                    />\n                                    <span className=\"flex-shrink-0 text-muted-foreground text-sm\">\n                                        {localization.OR_CONTINUE_WITH}\n                                    </span>\n                                    <Separator\n                                        className={cn(\n                                            \"!w-auto grow\",\n                                            classNames?.separator\n                                        )}\n                                    />\n                                </div>\n                            )}\n\n                            <div className=\"grid gap-4\">\n                                {(social?.providers?.length ||\n                                    genericOAuth?.providers?.length) && (\n                                    <div\n                                        className={cn(\n                                            \"flex w-full items-center justify-between gap-4\",\n                                            socialLayout === \"horizontal\" &&\n                                                \"flex-wrap\",\n                                            socialLayout === \"vertical\" &&\n                                                \"flex-col\",\n                                            socialLayout === \"grid\" &&\n                                                \"grid grid-cols-2\"\n                                        )}\n                                    >\n                                        {social?.providers?.map((provider) => {\n                                            const socialProvider =\n                                                socialProviders.find(\n                                                    (socialProvider) =>\n                                                        socialProvider.provider ===\n                                                        provider\n                                                )\n                                            if (!socialProvider) return null\n                                            return (\n                                                <ProviderButton\n                                                    key={provider}\n                                                    classNames={classNames}\n                                                    callbackURL={callbackURL}\n                                                    isSubmitting={isSubmitting}\n                                                    localization={localization}\n                                                    provider={socialProvider}\n                                                    redirectTo={redirectTo}\n                                                    setIsSubmitting={\n                                                        setIsSubmitting\n                                                    }\n                                                    socialLayout={socialLayout}\n                                                />\n                                            )\n                                        })}\n                                        {genericOAuth?.providers?.map(\n                                            (provider) => (\n                                                <ProviderButton\n                                                    key={provider.provider}\n                                                    classNames={classNames}\n                                                    callbackURL={callbackURL}\n                                                    isSubmitting={isSubmitting}\n                                                    localization={localization}\n                                                    provider={provider}\n                                                    redirectTo={redirectTo}\n                                                    setIsSubmitting={\n                                                        setIsSubmitting\n                                                    }\n                                                    socialLayout={socialLayout}\n                                                    other\n                                                />\n                                            )\n                                        )}\n                                    </div>\n                                )}\n\n                                {passkey &&\n                                    [\n                                        \"SIGN_IN\",\n                                        \"MAGIC_LINK\",\n                                        \"EMAIL_OTP\",\n                                        \"RECOVER_ACCOUNT\",\n                                        \"TWO_FACTOR\",\n                                        \"FORGOT_PASSWORD\"\n                                    ].includes(view as string) && (\n                                        <PasskeyButton\n                                            classNames={classNames}\n                                            isSubmitting={isSubmitting}\n                                            localization={localization}\n                                            redirectTo={redirectTo}\n                                            setIsSubmitting={setIsSubmitting}\n                                        />\n                                    )}\n                            </div>\n                        </>\n                    )}\n            </CardContent>\n\n            {credentials && signUp && (\n                <CardFooter\n                    className={cn(\n                        \"justify-center gap-1.5 text-muted-foreground text-sm\",\n                        classNames?.footer\n                    )}\n                >\n                    {view === \"SIGN_IN\" ||\n                    view === \"MAGIC_LINK\" ||\n                    view === \"EMAIL_OTP\" ? (\n                        localization.DONT_HAVE_AN_ACCOUNT\n                    ) : view === \"SIGN_UP\" ? (\n                        localization.ALREADY_HAVE_AN_ACCOUNT\n                    ) : (\n                        <ArrowLeftIcon className=\"size-3\" />\n                    )}\n\n                    {view === \"SIGN_IN\" ||\n                    view === \"MAGIC_LINK\" ||\n                    view === \"EMAIL_OTP\" ||\n                    view === \"SIGN_UP\" ? (\n                        <Link\n                            className={cn(\n                                \"text-foreground underline\",\n                                classNames?.footerLink\n                            )}\n                            href={`${basePath}/${viewPaths[(view === \"SIGN_IN\" || view === \"MAGIC_LINK\" || view === \"EMAIL_OTP\") ? \"SIGN_UP\" : \"SIGN_IN\"]}${\n                                isHydrated ? window.location.search : \"\"\n                            }`}\n                        >\n                            <Button\n                                variant=\"link\"\n                                size=\"sm\"\n                                className={cn(\n                                    \"px-0 text-foreground underline\",\n                                    classNames?.footerLink\n                                )}\n                            >\n                                {view === \"SIGN_IN\" ||\n                                view === \"MAGIC_LINK\" ||\n                                view === \"EMAIL_OTP\"\n                                    ? localization.SIGN_UP\n                                    : localization.SIGN_IN}\n                            </Button>\n                        </Link>\n                    ) : (\n                        <Button\n                            variant=\"link\"\n                            size=\"sm\"\n                            className={cn(\n                                \"px-0 text-foreground underline\",\n                                classNames?.footerLink\n                            )}\n                            onClick={() => window.history.back()}\n                        >\n                            {localization.GO_BACK}\n                        </Button>\n                    )}\n                </CardFooter>\n            )}\n        </Card>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}