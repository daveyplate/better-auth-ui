{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "provider-cell",
  "type": "registry:component",
  "title": "Provider Cell",
  "description": "",
  "dependencies": [
    "better-auth",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "card",
    "https://better-auth-ui.com/r/refetch.json",
    "https://better-auth-ui.com/r/settings-card.json",
    "skeleton",
    "https://better-auth-ui.com/r/social-providers.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/settings/providers/provider-cell.tsx",
      "content": "\"use client\"\n\nimport type { SocialProvider } from \"better-auth/social-providers\"\nimport { Loader2 } from \"lucide-react\"\nimport { useContext, useState } from \"react\"\n\nimport { AuthUIContext } from \"../../../lib/auth-ui-provider\"\nimport type { Provider } from \"../../../lib/social-providers\"\nimport { cn, getLocalizedError } from \"../../../lib/utils\"\nimport type { AuthLocalization } from \"../../../localization/auth-localization\"\nimport type { Refetch } from \"../../../types/refetch\"\nimport { Button } from \"../../ui/button\"\nimport { Card } from \"../../ui/card\"\nimport { Skeleton } from \"../../ui/skeleton\"\nimport type { SettingsCardClassNames } from \"../shared/settings-card\"\n\nexport interface ProviderCellProps {\n    className?: string\n    classNames?: SettingsCardClassNames\n    account?: {\n        accountId: string\n        provider: string\n    } | null\n    isPending?: boolean\n    localization?: Partial<AuthLocalization>\n    other?: boolean\n    provider: Provider\n    refetch?: Refetch\n}\n\nexport function ProviderCell({\n    className,\n    classNames,\n    account,\n    localization,\n    other,\n    provider,\n    refetch\n}: ProviderCellProps) {\n    const {\n        authClient,\n        basePath,\n        baseURL,\n        localization: contextLocalization,\n        mutators: { unlinkAccount },\n        viewPaths,\n        toast\n    } = useContext(AuthUIContext)\n\n    localization = { ...contextLocalization, ...localization }\n\n    const [isLoading, setIsLoading] = useState(false)\n\n    const handleLink = async () => {\n        setIsLoading(true)\n        const callbackURL = `${baseURL}${basePath}/${viewPaths.CALLBACK}?redirectTo=${window.location.pathname}`\n\n        try {\n            if (other) {\n                await authClient.oauth2.link({\n                    providerId: provider.provider as SocialProvider,\n                    callbackURL,\n                    fetchOptions: { throw: true }\n                })\n            } else {\n                await authClient.linkSocial({\n                    provider: provider.provider as SocialProvider,\n                    callbackURL,\n                    fetchOptions: { throw: true }\n                })\n            }\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n\n            setIsLoading(false)\n        }\n    }\n\n    const handleUnlink = async () => {\n        setIsLoading(true)\n\n        try {\n            await unlinkAccount({\n                accountId: account?.accountId,\n                providerId: provider.provider\n            })\n\n            await refetch?.()\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n\n        setIsLoading(false)\n    }\n\n    return (\n        <Card\n            className={cn(\n                \"flex-row items-center gap-3 px-4 py-3\",\n                className,\n                classNames?.cell\n            )}\n        >\n            {provider.icon && (\n                <provider.icon className={cn(\"size-4\", classNames?.icon)} />\n            )}\n\n            <div className=\"flex-col\">\n                <div className=\"text-sm\">{provider.name}</div>\n\n                {account && <AccountInfo account={account} />}\n            </div>\n\n            <Button\n                className={cn(\"relative ms-auto\", classNames?.button)}\n                disabled={isLoading}\n                size=\"sm\"\n                type=\"button\"\n                variant={account ? \"outline\" : \"default\"}\n                onClick={account ? handleUnlink : handleLink}\n            >\n                {isLoading && <Loader2 className=\"animate-spin\" />}\n                {account ? localization.UNLINK : localization.LINK}\n            </Button>\n        </Card>\n    )\n}\n\nfunction AccountInfo({ account }: { account: { accountId: string } }) {\n    const {\n        hooks: { useAccountInfo }\n    } = useContext(AuthUIContext)\n\n    const { data: accountInfo, isPending } = useAccountInfo({\n        accountId: account.accountId\n    })\n\n    if (isPending) {\n        return <Skeleton className=\"my-0.5 h-3 w-28\" />\n    }\n\n    if (!accountInfo) return null\n\n    return (\n        <div className=\"text-muted-foreground text-xs\">\n            {accountInfo?.user.email}\n        </div>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}