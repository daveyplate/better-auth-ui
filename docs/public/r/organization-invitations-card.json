{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "organization-invitations-card",
  "type": "registry:component",
  "title": "Organization Invitations Card",
  "description": "",
  "dependencies": [
    "better-auth"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "card",
    "https://better-auth-ui.com/r/invitation-cell.json",
    "https://better-auth-ui.com/r/settings-card.json",
    "https://better-auth-ui.com/r/use-current-organization.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/organization/organization-invitations-card.tsx",
      "content": "\"use client\"\n\nimport type { Organization } from \"better-auth/plugins/organization\"\nimport { useContext, useMemo } from \"react\"\nimport { useCurrentOrganization } from \"../../hooks/use-current-organization\"\nimport { AuthUIContext } from \"../../lib/auth-ui-provider\"\nimport { cn } from \"../../lib/utils\"\nimport type { SettingsCardProps } from \"../settings/shared/settings-card\"\nimport { SettingsCard } from \"../settings/shared/settings-card\"\nimport { CardContent } from \"../ui/card\"\nimport { InvitationCell } from \"./invitation-cell\"\n\nexport function OrganizationInvitationsCard({\n    className,\n    classNames,\n    localization: localizationProp,\n    slug: slugProp,\n    ...props\n}: SettingsCardProps & { slug?: string }) {\n    const {\n        localization: contextLocalization,\n        organization: organizationOptions\n    } = useContext(AuthUIContext)\n\n    const localization = useMemo(\n        () => ({ ...contextLocalization, ...localizationProp }),\n        [contextLocalization, localizationProp]\n    )\n\n    const slug = slugProp || organizationOptions?.slug\n\n    const { data: organization } = useCurrentOrganization({ slug })\n\n    if (!organization) return null\n\n    return (\n        <OrganizationInvitationsContent\n            className={className}\n            classNames={classNames}\n            localization={localization}\n            organization={organization}\n            {...props}\n        />\n    )\n}\n\nfunction OrganizationInvitationsContent({\n    className,\n    classNames,\n    localization: localizationProp,\n    organization,\n    ...props\n}: SettingsCardProps & { organization: Organization }) {\n    const {\n        hooks: { useListInvitations },\n        localization: contextLocalization\n    } = useContext(AuthUIContext)\n\n    const localization = useMemo(\n        () => ({ ...contextLocalization, ...localizationProp }),\n        [contextLocalization, localizationProp]\n    )\n\n    const { data: invitations } = useListInvitations({\n        query: { organizationId: organization.id }\n    })\n\n    const pendingInvitations = invitations?.filter(\n        (invitation) => invitation.status === \"pending\"\n    )\n    if (!pendingInvitations?.length) return null\n\n    return (\n        <SettingsCard\n            className={className}\n            classNames={classNames}\n            title={localization.PENDING_INVITATIONS}\n            description={localization.PENDING_INVITATIONS_DESCRIPTION}\n            {...props}\n        >\n            <CardContent className={cn(\"grid gap-4\", classNames?.content)}>\n                {pendingInvitations.map((invitation) => (\n                    <InvitationCell\n                        key={invitation.id}\n                        classNames={classNames}\n                        invitation={invitation}\n                        localization={localization}\n                        organization={organization}\n                    />\n                ))}\n            </CardContent>\n        </SettingsCard>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}