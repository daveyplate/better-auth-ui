{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "auth-form",
  "type": "registry:component",
  "title": "Auth Form",
  "description": "",
  "dependencies": [],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-callback.json",
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "https://better-auth-ui.com/r/email-otp-form.json",
    "https://better-auth-ui.com/r/forgot-password-form.json",
    "https://better-auth-ui.com/r/magic-link-form.json",
    "https://better-auth-ui.com/r/recover-account-form.json",
    "https://better-auth-ui.com/r/reset-password-form.json",
    "https://better-auth-ui.com/r/sign-in-form.json",
    "https://better-auth-ui.com/r/sign-out.json",
    "https://better-auth-ui.com/r/sign-up-form.json",
    "https://better-auth-ui.com/r/two-factor-form.json",
    "https://better-auth-ui.com/r/utils.json",
    "https://better-auth-ui.com/r/view-paths.json"
  ],
  "files": [
    {
      "path": "src/components/auth/auth-form.tsx",
      "content": "\"use client\"\n\nimport { useContext, useEffect } from \"react\"\n\nimport { AuthUIContext } from \"../../lib/auth-ui-provider\"\nimport { getViewByPath } from \"../../lib/utils\"\nimport type { AuthViewPath } from \"../../lib/view-paths\"\nimport type { AuthLocalization } from \"../../localization/auth-localization\"\nimport { AuthCallback } from \"./auth-callback\"\nimport { EmailOTPForm } from \"./forms/email-otp-form\"\nimport { ForgotPasswordForm } from \"./forms/forgot-password-form\"\nimport { MagicLinkForm } from \"./forms/magic-link-form\"\nimport { RecoverAccountForm } from \"./forms/recover-account-form\"\nimport { ResetPasswordForm } from \"./forms/reset-password-form\"\nimport { SignInForm } from \"./forms/sign-in-form\"\nimport { SignUpForm } from \"./forms/sign-up-form\"\nimport { TwoFactorForm } from \"./forms/two-factor-form\"\nimport { SignOut } from \"./sign-out\"\n\nexport type AuthFormClassNames = {\n    base?: string\n    button?: string\n    checkbox?: string\n    description?: string\n    error?: string\n    forgotPasswordLink?: string\n    icon?: string\n    input?: string\n    label?: string\n    otpInput?: string\n    otpInputContainer?: string\n    outlineButton?: string\n    primaryButton?: string\n    providerButton?: string\n    qrCode?: string\n    secondaryButton?: string\n}\n\nexport interface AuthFormProps {\n    className?: string\n    classNames?: AuthFormClassNames\n    callbackURL?: string\n    isSubmitting?: boolean\n    localization?: Partial<AuthLocalization>\n    pathname?: string\n    redirectTo?: string\n    view?: AuthViewPath\n    otpSeparators?: 0 | 1 | 2\n    setIsSubmitting?: (isSubmitting: boolean) => void\n}\n\nexport function AuthForm({\n    className,\n    classNames,\n    callbackURL,\n    isSubmitting,\n    localization,\n    pathname,\n    redirectTo,\n    view,\n    otpSeparators = 0,\n    setIsSubmitting\n}: AuthFormProps) {\n    const {\n        basePath,\n        credentials,\n        localization: contextLocalization,\n        magicLink,\n        emailOTP,\n        signUp,\n        twoFactor: twoFactorEnabled,\n        viewPaths,\n        replace\n    } = useContext(AuthUIContext)\n\n    const signUpEnabled = !!signUp\n\n    localization = { ...contextLocalization, ...localization }\n\n    useEffect(() => {\n        if (pathname && !getViewByPath(viewPaths, pathname)) {\n            console.error(`Invalid auth view: ${pathname}`)\n            replace(`${basePath}/${viewPaths.SIGN_IN}${window.location.search}`)\n        }\n    }, [pathname, viewPaths, basePath, replace])\n\n    view =\n        view ||\n        (getViewByPath(viewPaths, pathname) as AuthViewPath) ||\n        \"SIGN_IN\"\n\n    // Redirect to appropriate view based on enabled features\n    useEffect(() => {\n        let isInvalidView = false\n\n        if (\n            view === \"MAGIC_LINK\" &&\n            (!magicLink || (!credentials && !emailOTP))\n        ) {\n            isInvalidView = true\n        }\n\n        if (\n            view === \"EMAIL_OTP\" &&\n            (!emailOTP || (!credentials && !magicLink))\n        ) {\n            isInvalidView = true\n        }\n\n        if (view === \"SIGN_UP\" && !signUpEnabled) {\n            isInvalidView = true\n        }\n\n        if (\n            !credentials &&\n            [\n                \"SIGN_UP\",\n                \"FORGOT_PASSWORD\",\n                \"RESET_PASSWORD\",\n                \"TWO_FACTOR\",\n                \"RECOVER_ACCOUNT\"\n            ].includes(view)\n        ) {\n            isInvalidView = true\n        }\n\n        if (\n            [\"TWO_FACTOR\", \"RECOVER_ACCOUNT\"].includes(view) &&\n            !twoFactorEnabled\n        ) {\n            isInvalidView = true\n        }\n\n        if (isInvalidView) {\n            replace(`${basePath}/${viewPaths.SIGN_IN}${window.location.search}`)\n        }\n    }, [\n        basePath,\n        view,\n        viewPaths,\n        credentials,\n        replace,\n        emailOTP,\n        signUpEnabled,\n        magicLink,\n        twoFactorEnabled\n    ])\n\n    if (view === \"SIGN_OUT\") return <SignOut />\n    if (view === \"CALLBACK\") return <AuthCallback redirectTo={redirectTo} />\n\n    if (view === \"SIGN_IN\") {\n        return credentials ? (\n            <SignInForm\n                className={className}\n                classNames={classNames}\n                localization={localization}\n                redirectTo={redirectTo}\n                isSubmitting={isSubmitting}\n                setIsSubmitting={setIsSubmitting}\n            />\n        ) : magicLink ? (\n            <MagicLinkForm\n                className={className}\n                classNames={classNames}\n                callbackURL={callbackURL}\n                localization={localization}\n                redirectTo={redirectTo}\n                isSubmitting={isSubmitting}\n                setIsSubmitting={setIsSubmitting}\n            />\n        ) : emailOTP ? (\n            <EmailOTPForm\n                className={className}\n                classNames={classNames}\n                callbackURL={callbackURL}\n                localization={localization}\n                redirectTo={redirectTo}\n                isSubmitting={isSubmitting}\n                setIsSubmitting={setIsSubmitting}\n            />\n        ) : null\n    }\n\n    if (view === \"TWO_FACTOR\") {\n        return (\n            <TwoFactorForm\n                className={className}\n                classNames={classNames}\n                localization={localization}\n                otpSeparators={otpSeparators}\n                redirectTo={redirectTo}\n                isSubmitting={isSubmitting}\n                setIsSubmitting={setIsSubmitting}\n            />\n        )\n    }\n\n    if (view === \"RECOVER_ACCOUNT\") {\n        return (\n            <RecoverAccountForm\n                className={className}\n                classNames={classNames}\n                localization={localization}\n                redirectTo={redirectTo}\n                isSubmitting={isSubmitting}\n                setIsSubmitting={setIsSubmitting}\n            />\n        )\n    }\n\n    if (view === \"MAGIC_LINK\") {\n        return (\n            <MagicLinkForm\n                className={className}\n                classNames={classNames}\n                callbackURL={callbackURL}\n                localization={localization}\n                redirectTo={redirectTo}\n                isSubmitting={isSubmitting}\n                setIsSubmitting={setIsSubmitting}\n            />\n        )\n    }\n\n    if (view === \"EMAIL_OTP\") {\n        return (\n            <EmailOTPForm\n                className={className}\n                classNames={classNames}\n                callbackURL={callbackURL}\n                localization={localization}\n                redirectTo={redirectTo}\n                isSubmitting={isSubmitting}\n                setIsSubmitting={setIsSubmitting}\n            />\n        )\n    }\n\n    if (view === \"FORGOT_PASSWORD\") {\n        return (\n            <ForgotPasswordForm\n                className={className}\n                classNames={classNames}\n                localization={localization}\n                isSubmitting={isSubmitting}\n                setIsSubmitting={setIsSubmitting}\n            />\n        )\n    }\n\n    if (view === \"RESET_PASSWORD\") {\n        return (\n            <ResetPasswordForm\n                className={className}\n                classNames={classNames}\n                localization={localization}\n            />\n        )\n    }\n\n    if (view === \"SIGN_UP\") {\n        return (\n            signUpEnabled && (\n                <SignUpForm\n                    className={className}\n                    classNames={classNames}\n                    callbackURL={callbackURL}\n                    localization={localization}\n                    redirectTo={redirectTo}\n                    isSubmitting={isSubmitting}\n                    setIsSubmitting={setIsSubmitting}\n                />\n            )\n        )\n    }\n}\n",
      "type": "registry:component"
    }
  ]
}