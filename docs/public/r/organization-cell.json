{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "organization-cell",
  "type": "registry:component",
  "title": "Organization Cell",
  "description": "",
  "dependencies": [
    "better-auth",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "card",
    "dropdown-menu",
    "https://better-auth-ui.com/r/leave-organization-dialog.json",
    "https://better-auth-ui.com/r/organization-cell-view.json",
    "https://better-auth-ui.com/r/settings-card.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/organization/organization-cell.tsx",
      "content": "\"use client\"\n\nimport type { Organization } from \"better-auth/plugins/organization\"\nimport { EllipsisIcon, Loader2, LogOutIcon, SettingsIcon } from \"lucide-react\"\nimport { useCallback, useContext, useMemo, useState } from \"react\"\n\nimport { AuthUIContext } from \"../../lib/auth-ui-provider\"\nimport { cn, getLocalizedError } from \"../../lib/utils\"\nimport type { AuthLocalization } from \"../../localization/auth-localization\"\nimport type { SettingsCardClassNames } from \"../settings/shared/settings-card\"\nimport { Button } from \"../ui/button\"\nimport { Card } from \"../ui/card\"\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger\n} from \"../ui/dropdown-menu\"\nimport { LeaveOrganizationDialog } from \"./leave-organization-dialog\"\nimport { OrganizationCellView } from \"./organization-cell-view\"\n\nexport interface OrganizationCellProps {\n    className?: string\n    classNames?: SettingsCardClassNames\n    organization: Organization\n    localization?: AuthLocalization\n}\n\nexport function OrganizationCell({\n    className,\n    classNames,\n    organization,\n    localization: localizationProp\n}: OrganizationCellProps) {\n    const {\n        authClient,\n        localization: contextLocalization,\n        organization: organizationOptions,\n        navigate,\n        toast\n    } = useContext(AuthUIContext)\n\n    const localization = useMemo(\n        () => ({ ...contextLocalization, ...localizationProp }),\n        [contextLocalization, localizationProp]\n    )\n\n    const { pathMode } = organizationOptions || {}\n\n    const [isLeaveDialogOpen, setIsLeaveDialogOpen] = useState(false)\n    const [isManagingOrganization, setIsManagingOrganization] = useState(false)\n\n    const handleManageOrganization = useCallback(async () => {\n        setIsManagingOrganization(true)\n\n        if (pathMode === \"slug\") {\n            navigate(\n                `${organizationOptions?.basePath}/${organization.slug}/${organizationOptions?.viewPaths.SETTINGS}`\n            )\n\n            return\n        }\n\n        try {\n            await authClient.organization.setActive({\n                organizationId: organization.id,\n                fetchOptions: {\n                    throw: true\n                }\n            })\n\n            navigate(\n                `${organizationOptions?.basePath}/${organizationOptions?.viewPaths?.SETTINGS}`\n            )\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n\n            setIsManagingOrganization(false)\n        }\n    }, [\n        authClient,\n        organization.id,\n        organizationOptions?.basePath,\n        organizationOptions?.viewPaths?.SETTINGS,\n        organization.slug,\n        pathMode,\n        navigate,\n        toast,\n        localization\n    ])\n\n    return (\n        <>\n            <Card className={cn(\"flex-row p-4\", className, classNames?.cell)}>\n                <OrganizationCellView\n                    organization={organization}\n                    localization={localization}\n                />\n\n                <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                        <Button\n                            className={cn(\n                                \"relative ms-auto\",\n                                classNames?.button,\n                                classNames?.outlineButton\n                            )}\n                            disabled={isManagingOrganization}\n                            size=\"icon\"\n                            type=\"button\"\n                            variant=\"outline\"\n                        >\n                            {isManagingOrganization ? (\n                                <Loader2 className=\"animate-spin\" />\n                            ) : (\n                                <EllipsisIcon className={classNames?.icon} />\n                            )}\n                        </Button>\n                    </DropdownMenuTrigger>\n\n                    <DropdownMenuContent>\n                        <DropdownMenuItem\n                            onClick={handleManageOrganization}\n                            disabled={isManagingOrganization}\n                        >\n                            <SettingsIcon className={classNames?.icon} />\n\n                            {localization.MANAGE_ORGANIZATION}\n                        </DropdownMenuItem>\n\n                        <DropdownMenuItem\n                            onClick={() => setIsLeaveDialogOpen(true)}\n                            variant=\"destructive\"\n                        >\n                            <LogOutIcon className={classNames?.icon} />\n\n                            {localization.LEAVE_ORGANIZATION}\n                        </DropdownMenuItem>\n                    </DropdownMenuContent>\n                </DropdownMenu>\n            </Card>\n\n            <LeaveOrganizationDialog\n                open={isLeaveDialogOpen}\n                onOpenChange={setIsLeaveDialogOpen}\n                organization={organization}\n                localization={localization}\n            />\n        </>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}