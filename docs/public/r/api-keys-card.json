{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "api-keys-card",
  "type": "registry:component",
  "title": "Api Keys Card",
  "description": "",
  "dependencies": [],
  "registryDependencies": [
    "https://better-auth-ui.com/r/api-key-cell.json",
    "https://better-auth-ui.com/r/api-key-display-dialog.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "card",
    "https://better-auth-ui.com/r/create-api-key-dialog.json",
    "https://better-auth-ui.com/r/settings-card.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/settings/api-key/api-keys-card.tsx",
      "content": "\"use client\"\n\nimport { useContext, useMemo, useState } from \"react\"\nimport { AuthUIContext } from \"../../../lib/auth-ui-provider\"\nimport { cn } from \"../../../lib/utils\"\nimport { CardContent } from \"../../ui/card\"\nimport type { SettingsCardProps } from \"../shared/settings-card\"\nimport { SettingsCard } from \"../shared/settings-card\"\nimport { ApiKeyCell } from \"./api-key-cell\"\nimport { ApiKeyDisplayDialog } from \"./api-key-display-dialog\"\nimport { CreateApiKeyDialog } from \"./create-api-key-dialog\"\n\nexport interface ApiKeysCardProps extends SettingsCardProps {\n    organizationId?: string\n}\n\nexport function ApiKeysCard({\n    className,\n    classNames,\n    localization,\n    organizationId,\n    ...props\n}: ApiKeysCardProps) {\n    const {\n        hooks: { useListApiKeys },\n        localization: contextLocalization\n    } = useContext(AuthUIContext)\n\n    localization = { ...contextLocalization, ...localization }\n\n    const { data: apiKeys, isPending, refetch } = useListApiKeys()\n\n    // Filter API keys by organizationId\n    const filteredApiKeys = useMemo(() => {\n        return apiKeys?.filter(\n            (apiKey) => organizationId === apiKey.metadata?.organizationId\n        )\n    }, [apiKeys, organizationId])\n\n    const [createDialogOpen, setCreateDialogOpen] = useState(false)\n    const [displayDialogOpen, setDisplayDialogOpen] = useState(false)\n    const [createdApiKey, setCreatedApiKey] = useState(\"\")\n\n    const handleCreateApiKey = (apiKey: string) => {\n        setCreatedApiKey(apiKey)\n        setDisplayDialogOpen(true)\n    }\n\n    return (\n        <>\n            <SettingsCard\n                className={className}\n                classNames={classNames}\n                actionLabel={localization.CREATE_API_KEY}\n                description={localization.API_KEYS_DESCRIPTION}\n                instructions={localization.API_KEYS_INSTRUCTIONS}\n                isPending={isPending}\n                title={localization.API_KEYS}\n                action={() => setCreateDialogOpen(true)}\n                {...props}\n            >\n                {filteredApiKeys && filteredApiKeys.length > 0 && (\n                    <CardContent\n                        className={cn(\"grid gap-4\", classNames?.content)}\n                    >\n                        {filteredApiKeys?.map((apiKey) => (\n                            <ApiKeyCell\n                                key={apiKey.id}\n                                classNames={classNames}\n                                apiKey={apiKey}\n                                localization={localization}\n                                refetch={refetch}\n                            />\n                        ))}\n                    </CardContent>\n                )}\n            </SettingsCard>\n\n            <CreateApiKeyDialog\n                classNames={classNames}\n                localization={localization}\n                open={createDialogOpen}\n                onOpenChange={setCreateDialogOpen}\n                onSuccess={handleCreateApiKey}\n                refetch={refetch}\n                organizationId={organizationId}\n            />\n\n            <ApiKeyDisplayDialog\n                classNames={classNames}\n                apiKey={createdApiKey}\n                localization={localization}\n                open={displayDialogOpen}\n                onOpenChange={setDisplayDialogOpen}\n            />\n        </>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}