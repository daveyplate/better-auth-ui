{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "organization-slug-card",
  "type": "registry:component",
  "title": "Organization Slug Card",
  "description": "",
  "dependencies": [
    "@hookform/resolvers",
    "better-auth",
    "react-hook-form",
    "zod"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "card",
    "form",
    "input",
    "https://better-auth-ui.com/r/settings-card.json",
    "skeleton",
    "https://better-auth-ui.com/r/use-current-organization.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/organization/organization-slug-card.tsx",
      "content": "\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport type { Organization } from \"better-auth/plugins/organization\"\nimport { useContext, useMemo } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n\nimport { useCurrentOrganization } from \"../../hooks/use-current-organization\"\nimport { AuthUIContext } from \"../../lib/auth-ui-provider\"\nimport { cn, getLocalizedError } from \"../../lib/utils\"\nimport {\n    SettingsCard,\n    type SettingsCardProps\n} from \"../settings/shared/settings-card\"\nimport { CardContent } from \"../ui/card\"\nimport { Form, FormControl, FormField, FormItem, FormMessage } from \"../ui/form\"\nimport { Input } from \"../ui/input\"\nimport { Skeleton } from \"../ui/skeleton\"\n\nexport interface OrganizationSlugCardProps extends SettingsCardProps {\n    slug?: string\n}\n\nexport function OrganizationSlugCard({\n    className,\n    classNames,\n    localization: localizationProp,\n    slug: slugProp,\n    ...props\n}: OrganizationSlugCardProps) {\n    const {\n        localization: contextLocalization,\n        organization: organizationOptions\n    } = useContext(AuthUIContext)\n\n    const localization = useMemo(\n        () => ({ ...contextLocalization, ...localizationProp }),\n        [contextLocalization, localizationProp]\n    )\n\n    const slug = slugProp || organizationOptions?.slug\n\n    const { data: organization } = useCurrentOrganization({ slug })\n\n    if (!organization) {\n        return (\n            <SettingsCard\n                className={className}\n                classNames={classNames}\n                description={localization.ORGANIZATION_SLUG_DESCRIPTION}\n                instructions={localization.ORGANIZATION_SLUG_INSTRUCTIONS}\n                isPending\n                title={localization.ORGANIZATION_SLUG}\n                actionLabel={localization.SAVE}\n                {...props}\n            >\n                <CardContent className={classNames?.content}>\n                    <Skeleton\n                        className={cn(\"h-9 w-full\", classNames?.skeleton)}\n                    />\n                </CardContent>\n            </SettingsCard>\n        )\n    }\n\n    return (\n        <OrganizationSlugForm\n            className={className}\n            classNames={classNames}\n            localization={localization}\n            organization={organization}\n            {...props}\n        />\n    )\n}\n\nfunction OrganizationSlugForm({\n    className,\n    classNames,\n    localization: localizationProp,\n    organization,\n    ...props\n}: OrganizationSlugCardProps & { organization: Organization }) {\n    const {\n        localization: contextLocalization,\n        hooks: { useHasPermission },\n        mutators: { updateOrganization },\n        optimistic,\n        toast,\n        organization: organizationOptions,\n        replace\n    } = useContext(AuthUIContext)\n\n    const localization = useMemo(\n        () => ({ ...contextLocalization, ...localizationProp }),\n        [contextLocalization, localizationProp]\n    )\n\n    const { refetch: refetchOrganization } = useCurrentOrganization({\n        slug: organization.slug\n    })\n\n    const { data: hasPermission, isPending } = useHasPermission({\n        organizationId: organization.id,\n        permissions: {\n            organization: [\"update\"]\n        }\n    })\n\n    const formSchema = z.object({\n        slug: z\n            .string()\n            .min(1, {\n                message: `${localization.ORGANIZATION_SLUG} ${localization.IS_REQUIRED}`\n            })\n            .regex(/^[a-z0-9-]+$/, {\n                message: `${localization.ORGANIZATION_SLUG} ${localization.IS_INVALID}`\n            })\n    })\n\n    const form = useForm({\n        resolver: zodResolver(formSchema),\n        values: { slug: organization.slug || \"\" }\n    })\n\n    const { isSubmitting } = form.formState\n\n    const updateOrganizationSlug = async ({\n        slug\n    }: z.infer<typeof formSchema>) => {\n        if (organization.slug === slug) {\n            toast({\n                variant: \"error\",\n                message: `${localization.ORGANIZATION_SLUG} ${localization.IS_THE_SAME}`\n            })\n\n            return\n        }\n\n        try {\n            await updateOrganization({\n                organizationId: organization.id,\n                data: { slug }\n            })\n\n            await refetchOrganization?.()\n\n            toast({\n                variant: \"success\",\n                message: `${localization.ORGANIZATION_SLUG} ${localization.UPDATED_SUCCESSFULLY}`\n            })\n\n            // If using slug-based paths, redirect to the new slug's settings route\n            if (organizationOptions?.pathMode === \"slug\") {\n                const basePath = organizationOptions.basePath\n                const settingsPath = organizationOptions.viewPaths.SETTINGS\n                replace(`${basePath}/${slug}/${settingsPath}`)\n            }\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n    }\n\n    return (\n        <Form {...form}>\n            <form onSubmit={form.handleSubmit(updateOrganizationSlug)}>\n                <SettingsCard\n                    className={className}\n                    classNames={classNames}\n                    description={localization.ORGANIZATION_SLUG_DESCRIPTION}\n                    instructions={localization.ORGANIZATION_SLUG_INSTRUCTIONS}\n                    isPending={isPending}\n                    title={localization.ORGANIZATION_SLUG}\n                    actionLabel={localization.SAVE}\n                    optimistic={optimistic}\n                    disabled={!hasPermission?.success}\n                    {...props}\n                >\n                    <CardContent className={classNames?.content}>\n                        {isPending ? (\n                            <Skeleton\n                                className={cn(\n                                    \"h-9 w-full\",\n                                    classNames?.skeleton\n                                )}\n                            />\n                        ) : (\n                            <FormField\n                                control={form.control}\n                                name=\"slug\"\n                                render={({ field }) => (\n                                    <FormItem>\n                                        <FormControl>\n                                            <Input\n                                                className={classNames?.input}\n                                                placeholder={\n                                                    localization.ORGANIZATION_SLUG_PLACEHOLDER\n                                                }\n                                                disabled={\n                                                    isSubmitting ||\n                                                    !hasPermission?.success\n                                                }\n                                                {...field}\n                                            />\n                                        </FormControl>\n\n                                        <FormMessage\n                                            className={classNames?.error}\n                                        />\n                                    </FormItem>\n                                )}\n                            />\n                        )}\n                    </CardContent>\n                </SettingsCard>\n            </form>\n        </Form>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}