{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "update-member-role-dialog",
  "type": "registry:component",
  "title": "Update Member Role Dialog",
  "description": "",
  "dependencies": [
    "better-auth",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "dialog",
    "https://better-auth-ui.com/r/member-cell.json",
    "select",
    "https://better-auth-ui.com/r/settings-card.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/organization/update-member-role-dialog.tsx",
      "content": "\"use client\"\n\nimport type { User } from \"better-auth\"\nimport type { Member } from \"better-auth/plugins/organization\"\nimport { Loader2 } from \"lucide-react\"\nimport { type ComponentProps, useContext, useMemo, useState } from \"react\"\nimport { AuthUIContext } from \"../../lib/auth-ui-provider\"\nimport { cn, getLocalizedError } from \"../../lib/utils\"\nimport type { AuthLocalization } from \"../../localization/auth-localization\"\nimport type { SettingsCardClassNames } from \"../settings/shared/settings-card\"\nimport { Button } from \"../ui/button\"\nimport {\n    Dialog,\n    DialogContent,\n    DialogDescription,\n    DialogFooter,\n    DialogHeader,\n    DialogTitle\n} from \"../ui/dialog\"\nimport {\n    Select,\n    SelectContent,\n    SelectItem,\n    SelectTrigger,\n    SelectValue\n} from \"../ui/select\"\nimport { MemberCell } from \"./member-cell\"\n\nexport interface UpdateMemberRoleDialogProps\n    extends ComponentProps<typeof Dialog> {\n    classNames?: SettingsCardClassNames\n    localization?: AuthLocalization\n    member: Member & { user?: Partial<User> | null }\n}\n\nexport function UpdateMemberRoleDialog({\n    member,\n    classNames,\n    localization: localizationProp,\n    onOpenChange,\n    ...props\n}: UpdateMemberRoleDialogProps) {\n    const {\n        authClient,\n        hooks: { useSession, useListMembers },\n        localization: contextLocalization,\n        organization,\n        toast\n    } = useContext(AuthUIContext)\n\n    const localization = useMemo(\n        () => ({ ...contextLocalization, ...localizationProp }),\n        [contextLocalization, localizationProp]\n    )\n\n    const { data, refetch } = useListMembers({\n        query: { organizationId: member.organizationId }\n    })\n\n    const members = data?.members\n\n    const { data: sessionData } = useSession()\n\n    const [isUpdating, setIsUpdating] = useState(false)\n    const [selectedRole, setSelectedRole] = useState(member.role)\n\n    const builtInRoles = [\n        { role: \"owner\", label: localization.OWNER },\n        { role: \"admin\", label: localization.ADMIN },\n        { role: \"member\", label: localization.MEMBER }\n    ]\n\n    const roles = [...builtInRoles, ...(organization?.customRoles || [])]\n\n    const currentUserRole = members?.find(\n        (m) => m.user?.id === sessionData?.user.id\n    )?.role\n\n    const availableRoles = roles.filter((role) => {\n        if (role.role === \"owner\") {\n            return currentUserRole === \"owner\"\n        }\n\n        if (role.role === \"admin\") {\n            return currentUserRole === \"owner\" || currentUserRole === \"admin\"\n        }\n\n        return true\n    })\n\n    const updateMemberRole = async () => {\n        if (selectedRole === member.role) {\n            toast({\n                variant: \"error\",\n                message: `${localization.ROLE} ${localization.IS_THE_SAME}`\n            })\n\n            return\n        }\n\n        setIsUpdating(true)\n\n        try {\n            await authClient.organization.updateMemberRole({\n                memberId: member.id,\n                // @ts-ignore - role is a string but the type expects specific values\n                role: selectedRole,\n                organizationId: member.organizationId,\n                fetchOptions: {\n                    throw: true\n                }\n            })\n\n            toast({\n                variant: \"success\",\n                message: localization.MEMBER_ROLE_UPDATED\n            })\n\n            await refetch?.()\n\n            onOpenChange?.(false)\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n\n        setIsUpdating(false)\n    }\n\n    return (\n        <Dialog onOpenChange={onOpenChange} {...props}>\n            <DialogContent\n                className={classNames?.dialog?.content}\n                onOpenAutoFocus={(e) => e.preventDefault()}\n            >\n                <DialogHeader className={classNames?.dialog?.header}>\n                    <DialogTitle\n                        className={cn(\"text-lg md:text-xl\", classNames?.title)}\n                    >\n                        {localization.UPDATE_ROLE}\n                    </DialogTitle>\n\n                    <DialogDescription\n                        className={cn(\n                            \"text-xs md:text-sm\",\n                            classNames?.description\n                        )}\n                    >\n                        {localization.UPDATE_ROLE_DESCRIPTION}\n                    </DialogDescription>\n                </DialogHeader>\n\n                <div className=\"grid gap-6 py-4\">\n                    <MemberCell\n                        className={classNames?.cell}\n                        member={member}\n                        localization={localization}\n                        hideActions\n                    />\n\n                    <Select\n                        value={selectedRole}\n                        onValueChange={setSelectedRole}\n                    >\n                        <SelectTrigger className=\"w-full\">\n                            <SelectValue\n                                placeholder={localization.SELECT_ROLE}\n                            />\n                        </SelectTrigger>\n\n                        <SelectContent>\n                            {availableRoles.map((role) => (\n                                <SelectItem key={role.role} value={role.role}>\n                                    {role.label}\n                                </SelectItem>\n                            ))}\n                        </SelectContent>\n                    </Select>\n                </div>\n\n                <DialogFooter className={classNames?.dialog?.footer}>\n                    <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => onOpenChange?.(false)}\n                        className={cn(\n                            classNames?.button,\n                            classNames?.outlineButton\n                        )}\n                        disabled={isUpdating}\n                    >\n                        {localization.CANCEL}\n                    </Button>\n\n                    <Button\n                        type=\"button\"\n                        onClick={updateMemberRole}\n                        className={cn(\n                            classNames?.button,\n                            classNames?.primaryButton\n                        )}\n                        disabled={isUpdating}\n                    >\n                        {isUpdating && <Loader2 className=\"animate-spin\" />}\n\n                        {localization.UPDATE_ROLE}\n                    </Button>\n                </DialogFooter>\n            </DialogContent>\n        </Dialog>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}