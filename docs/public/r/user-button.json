{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "user-button",
  "type": "registry:component",
  "title": "User Button",
  "description": "",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/any-auth-client.json",
    "https://better-auth-ui.com/r/auth-client.json",
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "dropdown-menu",
    "https://better-auth-ui.com/r/use-hydrated.json",
    "https://better-auth-ui.com/r/user-avatar.json",
    "https://better-auth-ui.com/r/user-view.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/user-button.tsx",
      "content": "\"use client\"\nimport {\n    ChevronsUpDown,\n    LogInIcon,\n    LogOutIcon,\n    PlusCircleIcon,\n    SettingsIcon,\n    UserRoundPlus\n} from \"lucide-react\"\nimport {\n    type ComponentProps,\n    Fragment,\n    type ReactNode,\n    useCallback,\n    useContext,\n    useEffect,\n    useMemo,\n    useRef,\n    useState\n} from \"react\"\n\nimport { useIsHydrated } from \"../hooks/use-hydrated\"\nimport { AuthUIContext } from \"../lib/auth-ui-provider\"\nimport { cn, getLocalizedError } from \"../lib/utils\"\nimport type { AuthLocalization } from \"../localization/auth-localization\"\nimport type { AnyAuthClient } from \"../types/any-auth-client\"\nimport type { User } from \"../types/auth-client\"\nimport { Button } from \"./ui/button\"\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuSeparator,\n    DropdownMenuTrigger\n} from \"./ui/dropdown-menu\"\nimport { UserAvatar, type UserAvatarClassNames } from \"./user-avatar\"\nimport { UserView, type UserViewClassNames } from \"./user-view\"\n\nexport interface UserButtonClassNames {\n    base?: string\n    skeleton?: string\n    trigger?: {\n        base?: string\n        avatar?: UserAvatarClassNames\n        user?: UserViewClassNames\n        skeleton?: string\n    }\n    content?: {\n        base?: string\n        user?: UserViewClassNames\n        avatar?: UserAvatarClassNames\n        menuItem?: string\n        separator?: string\n    }\n}\n\nexport interface UserButtonProps {\n    className?: string\n    classNames?: UserButtonClassNames\n    align?: \"center\" | \"start\" | \"end\"\n    additionalLinks?: {\n        href: string\n        icon?: ReactNode\n        label: ReactNode\n        signedIn?: boolean\n        separator?: boolean\n    }[]\n    trigger?: ReactNode\n    disableDefaultLinks?: boolean\n    /**\n     * @default authLocalization\n     * @remarks `AuthLocalization`\n     */\n    localization?: AuthLocalization\n}\n\n/**\n * Displays an interactive user button with dropdown menu functionality\n *\n * Renders a user interface element that can be displayed as either an icon or full button:\n * - Shows a user avatar or placeholder when in icon mode\n * - Displays user name and email with dropdown indicator in full mode\n * - Provides dropdown menu with authentication options (sign in/out, settings, etc.)\n * - Supports multi-session functionality for switching between accounts\n * - Can be customized with additional links and styling options\n */\nexport function UserButton({\n    className,\n    classNames,\n    align,\n    trigger,\n    additionalLinks,\n    disableDefaultLinks,\n    localization: propLocalization,\n    size,\n    ...props\n}: UserButtonProps & ComponentProps<typeof Button>) {\n    const {\n        basePath,\n        hooks: { useSession, useListDeviceSessions },\n        mutators: { setActiveSession },\n        localization: contextLocalization,\n        multiSession,\n        account: accountOptions,\n        signUp,\n        toast,\n        viewPaths,\n        onSessionChange,\n        Link\n    } = useContext(AuthUIContext)\n\n    const localization = useMemo(\n        () => ({ ...contextLocalization, ...propLocalization }),\n        [contextLocalization, propLocalization]\n    )\n\n    let deviceSessions:\n        | AnyAuthClient[\"$Infer\"][\"Session\"][]\n        | undefined\n        | null = null\n    let deviceSessionsPending = false\n\n    if (multiSession) {\n        const { data, isPending } = useListDeviceSessions()\n        deviceSessions = data\n        deviceSessionsPending = isPending\n    }\n\n    const { data: sessionData, isPending: sessionPending } = useSession()\n    const user = sessionData?.user\n    const [activeSessionPending, setActiveSessionPending] = useState(false)\n\n    const isHydrated = useIsHydrated()\n    const isPending = sessionPending || activeSessionPending || !isHydrated\n\n    const switchAccount = useCallback(\n        async (sessionToken: string) => {\n            setActiveSessionPending(true)\n\n            try {\n                await setActiveSession({ sessionToken })\n\n                onSessionChange?.()\n            } catch (error) {\n                toast({\n                    variant: \"error\",\n                    message: getLocalizedError({ error, localization })\n                })\n                setActiveSessionPending(false)\n            }\n        },\n        [setActiveSession, onSessionChange, toast, localization]\n    )\n\n    // biome-ignore lint/correctness/useExhaustiveDependencies: ignore\n    useEffect(() => {\n        if (!multiSession) return\n\n        setActiveSessionPending(false)\n    }, [sessionData, multiSession])\n\n    const warningLogged = useRef(false)\n\n    useEffect(() => {\n        if (size || warningLogged.current) return\n\n        console.warn(\n            \"[Better Auth UI] The `size` prop of `UserButton` no longer defaults to `icon`. Please pass `size='icon'` to the `UserButton` component to get the same behaviour as before. This warning will be removed in a future release. It can be suppressed in the meantime by defining the `size` prop.\"\n        )\n\n        warningLogged.current = true\n    }, [size])\n\n    return (\n        <DropdownMenu>\n            <DropdownMenuTrigger\n                asChild\n                className={cn(\n                    size === \"icon\" && \"rounded-full\",\n                    classNames?.trigger?.base\n                )}\n            >\n                {trigger ||\n                    (size === \"icon\" ? (\n                        <Button\n                            size=\"icon\"\n                            className=\"size-fit rounded-full\"\n                            variant=\"ghost\"\n                        >\n                            <UserAvatar\n                                key={user?.image}\n                                isPending={isPending}\n                                className={cn(className, classNames?.base)}\n                                classNames={classNames?.trigger?.avatar}\n                                user={user}\n                                aria-label={localization.ACCOUNT}\n                                localization={localization}\n                            />\n                        </Button>\n                    ) : (\n                        <Button\n                            className={cn(\n                                \"!p-2 h-fit\",\n                                className,\n                                classNames?.trigger?.base\n                            )}\n                            size={size}\n                            {...props}\n                        >\n                            <UserView\n                                size={size}\n                                user={\n                                    !(user as User)?.isAnonymous ? user : null\n                                }\n                                isPending={isPending}\n                                classNames={classNames?.trigger?.user}\n                                localization={localization}\n                            />\n\n                            <ChevronsUpDown className=\"ml-auto\" />\n                        </Button>\n                    ))}\n            </DropdownMenuTrigger>\n\n            <DropdownMenuContent\n                className={cn(\n                    \"w-[--radix-dropdown-menu-trigger-width] min-w-56 max-w-64\",\n                    classNames?.content?.base\n                )}\n                align={align}\n                onCloseAutoFocus={(e) => e.preventDefault()}\n            >\n                <div className={cn(\"p-2\", classNames?.content?.menuItem)}>\n                    {(user && !(user as User).isAnonymous) || isPending ? (\n                        <UserView\n                            user={user}\n                            isPending={isPending}\n                            classNames={classNames?.content?.user}\n                            localization={localization}\n                        />\n                    ) : (\n                        <div className=\"-my-1 text-muted-foreground text-xs\">\n                            {localization.ACCOUNT}\n                        </div>\n                    )}\n                </div>\n\n                <DropdownMenuSeparator\n                    className={classNames?.content?.separator}\n                />\n\n                {additionalLinks?.map(\n                    ({ href, icon, label, signedIn, separator }, index) =>\n                        (signedIn === undefined ||\n                            (signedIn && !!sessionData) ||\n                            (!signedIn && !sessionData)) && (\n                            <Fragment key={index}>\n                                <Link href={href}>\n                                    <DropdownMenuItem\n                                        className={\n                                            classNames?.content?.menuItem\n                                        }\n                                    >\n                                        {icon}\n                                        {label}\n                                    </DropdownMenuItem>\n                                </Link>\n                                {separator && (\n                                    <DropdownMenuSeparator\n                                        className={\n                                            classNames?.content?.separator\n                                        }\n                                    />\n                                )}\n                            </Fragment>\n                        )\n                )}\n\n                {!user || (user as User).isAnonymous ? (\n                    <>\n                        <Link href={`${basePath}/${viewPaths.SIGN_IN}`}>\n                            <DropdownMenuItem\n                                className={classNames?.content?.menuItem}\n                            >\n                                <LogInIcon />\n\n                                {localization.SIGN_IN}\n                            </DropdownMenuItem>\n                        </Link>\n\n                        {signUp && (\n                            <Link href={`${basePath}/${viewPaths.SIGN_UP}`}>\n                                <DropdownMenuItem\n                                    className={classNames?.content?.menuItem}\n                                >\n                                    <UserRoundPlus />\n\n                                    {localization.SIGN_UP}\n                                </DropdownMenuItem>\n                            </Link>\n                        )}\n                    </>\n                ) : (\n                    <>\n                        {!disableDefaultLinks && accountOptions && (\n                            <Link\n                                href={`${accountOptions.basePath}/${accountOptions.viewPaths?.SETTINGS}`}\n                            >\n                                <DropdownMenuItem\n                                    className={classNames?.content?.menuItem}\n                                >\n                                    <SettingsIcon />\n\n                                    {localization.SETTINGS}\n                                </DropdownMenuItem>\n                            </Link>\n                        )}\n\n                        <Link href={`${basePath}/${viewPaths.SIGN_OUT}`}>\n                            <DropdownMenuItem\n                                className={classNames?.content?.menuItem}\n                            >\n                                <LogOutIcon />\n\n                                {localization.SIGN_OUT}\n                            </DropdownMenuItem>\n                        </Link>\n                    </>\n                )}\n\n                {user && multiSession && (\n                    <>\n                        <DropdownMenuSeparator\n                            className={classNames?.content?.separator}\n                        />\n\n                        {!deviceSessions && deviceSessionsPending && (\n                            <>\n                                <DropdownMenuItem\n                                    disabled\n                                    className={classNames?.content?.menuItem}\n                                >\n                                    <UserView\n                                        isPending={true}\n                                        classNames={classNames?.content?.user}\n                                    />\n                                </DropdownMenuItem>\n\n                                <DropdownMenuSeparator\n                                    className={classNames?.content?.separator}\n                                />\n                            </>\n                        )}\n\n                        {deviceSessions\n                            ?.filter(\n                                (sessionData) =>\n                                    sessionData.user.id !== user?.id\n                            )\n                            .map(({ session, user }) => (\n                                <Fragment key={session.id}>\n                                    <DropdownMenuItem\n                                        className={\n                                            classNames?.content?.menuItem\n                                        }\n                                        onClick={() =>\n                                            switchAccount(session.token)\n                                        }\n                                    >\n                                        <UserView\n                                            user={user}\n                                            classNames={\n                                                classNames?.content?.user\n                                            }\n                                        />\n                                    </DropdownMenuItem>\n\n                                    <DropdownMenuSeparator\n                                        className={\n                                            classNames?.content?.separator\n                                        }\n                                    />\n                                </Fragment>\n                            ))}\n\n                        <Link href={`${basePath}/${viewPaths.SIGN_IN}`}>\n                            <DropdownMenuItem\n                                className={classNames?.content?.menuItem}\n                            >\n                                <PlusCircleIcon />\n\n                                {localization.ADD_ACCOUNT}\n                            </DropdownMenuItem>\n                        </Link>\n                    </>\n                )}\n            </DropdownMenuContent>\n        </DropdownMenu>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}