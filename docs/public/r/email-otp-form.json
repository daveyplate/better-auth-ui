{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "email-otp-form",
  "type": "registry:component",
  "title": "Email Otp Form",
  "description": "",
  "dependencies": [
    "@hookform/resolvers",
    "lucide-react",
    "react-hook-form",
    "zod"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-form.json",
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "form",
    "input",
    "input-otp",
    "https://better-auth-ui.com/r/otp-input-group.json",
    "https://better-auth-ui.com/r/use-hydrated.json",
    "https://better-auth-ui.com/r/use-success-transition.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/auth/forms/email-otp-form.tsx",
      "content": "\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { Loader2 } from \"lucide-react\"\nimport { useContext, useEffect, useState } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n\nimport { useIsHydrated } from \"../../../hooks/use-hydrated\"\nimport { useOnSuccessTransition } from \"../../../hooks/use-success-transition\"\nimport { AuthUIContext } from \"../../../lib/auth-ui-provider\"\nimport { cn, getLocalizedError } from \"../../../lib/utils\"\nimport type { AuthLocalization } from \"../../../localization/auth-localization\"\nimport { Button } from \"../../ui/button\"\nimport {\n    Form,\n    FormControl,\n    FormField,\n    FormItem,\n    FormLabel,\n    FormMessage\n} from \"../../ui/form\"\nimport { Input } from \"../../ui/input\"\nimport { InputOTP } from \"../../ui/input-otp\"\nimport type { AuthFormClassNames } from \"../auth-form\"\nimport { OTPInputGroup } from \"../otp-input-group\"\n\nexport interface EmailOTPFormProps {\n    className?: string\n    classNames?: AuthFormClassNames\n    callbackURL?: string\n    isSubmitting?: boolean\n    localization: Partial<AuthLocalization>\n    otpSeparators?: 0 | 1 | 2\n    redirectTo?: string\n    setIsSubmitting?: (value: boolean) => void\n}\n\nexport function EmailOTPForm(props: EmailOTPFormProps) {\n    const [email, setEmail] = useState<string | undefined>()\n\n    if (!email) {\n        return <EmailForm {...props} setEmail={setEmail} />\n    }\n\n    return <OTPForm {...props} email={email} />\n}\n\nfunction EmailForm({\n    className,\n    classNames,\n    isSubmitting,\n    localization,\n    setIsSubmitting,\n    setEmail\n}: EmailOTPFormProps & {\n    setEmail: (email: string) => void\n}) {\n    const isHydrated = useIsHydrated()\n\n    const {\n        authClient,\n        localization: contextLocalization,\n        toast\n    } = useContext(AuthUIContext)\n\n    localization = { ...contextLocalization, ...localization }\n\n    const formSchema = z.object({\n        email: z\n            .string()\n            .min(1, {\n                message: `${localization.EMAIL} ${localization.IS_REQUIRED}`\n            })\n            .email({\n                message: `${localization.EMAIL} ${localization.IS_INVALID}`\n            })\n    })\n\n    const form = useForm({\n        resolver: zodResolver(formSchema),\n        defaultValues: {\n            email: \"\"\n        }\n    })\n\n    isSubmitting = isSubmitting || form.formState.isSubmitting\n\n    useEffect(() => {\n        setIsSubmitting?.(form.formState.isSubmitting)\n    }, [form.formState.isSubmitting, setIsSubmitting])\n\n    async function sendEmailOTP({ email }: z.infer<typeof formSchema>) {\n        try {\n            await authClient.emailOtp.sendVerificationOtp({\n                email,\n                type: \"sign-in\",\n                fetchOptions: { throw: true }\n            })\n\n            toast({\n                variant: \"success\",\n                message: localization.EMAIL_OTP_VERIFICATION_SENT\n            })\n\n            setEmail(email)\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n    }\n\n    return (\n        <Form {...form}>\n            <form\n                onSubmit={form.handleSubmit(sendEmailOTP)}\n                noValidate={isHydrated}\n                className={cn(\"grid w-full gap-6\", className, classNames?.base)}\n            >\n                <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                        <FormItem>\n                            <FormLabel className={classNames?.label}>\n                                {localization.EMAIL}\n                            </FormLabel>\n\n                            <FormControl>\n                                <Input\n                                    className={classNames?.input}\n                                    type=\"email\"\n                                    placeholder={localization.EMAIL_PLACEHOLDER}\n                                    disabled={isSubmitting}\n                                    {...field}\n                                />\n                            </FormControl>\n\n                            <FormMessage className={classNames?.error} />\n                        </FormItem>\n                    )}\n                />\n\n                <Button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    className={cn(\n                        \"w-full\",\n                        classNames?.button,\n                        classNames?.primaryButton\n                    )}\n                >\n                    {isSubmitting ? (\n                        <Loader2 className=\"animate-spin\" />\n                    ) : (\n                        localization.EMAIL_OTP_SEND_ACTION\n                    )}\n                </Button>\n            </form>\n        </Form>\n    )\n}\n\nexport function OTPForm({\n    className,\n    classNames,\n    isSubmitting,\n    localization,\n    otpSeparators = 0,\n    redirectTo,\n    setIsSubmitting,\n    email\n}: EmailOTPFormProps & {\n    email: string\n}) {\n    const {\n        authClient,\n        localization: contextLocalization,\n        toast\n    } = useContext(AuthUIContext)\n\n    localization = { ...contextLocalization, ...localization }\n\n    const { onSuccess, isPending: transitionPending } = useOnSuccessTransition({\n        redirectTo\n    })\n\n    const formSchema = z.object({\n        code: z\n            .string()\n            .min(1, {\n                message: `${localization.EMAIL_OTP} ${localization.IS_REQUIRED}`\n            })\n            .min(6, {\n                message: `${localization.EMAIL_OTP} ${localization.IS_INVALID}`\n            })\n    })\n\n    const form = useForm({\n        resolver: zodResolver(formSchema),\n        defaultValues: {\n            code: \"\"\n        }\n    })\n\n    isSubmitting =\n        isSubmitting || form.formState.isSubmitting || transitionPending\n\n    useEffect(() => {\n        setIsSubmitting?.(form.formState.isSubmitting || transitionPending)\n    }, [form.formState.isSubmitting, transitionPending, setIsSubmitting])\n\n    async function verifyCode({ code }: z.infer<typeof formSchema>) {\n        try {\n            await authClient.signIn.emailOtp({\n                email,\n                otp: code,\n                fetchOptions: { throw: true }\n            })\n\n            await onSuccess()\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n\n            form.reset()\n        }\n    }\n\n    return (\n        <Form {...form}>\n            <form\n                onSubmit={form.handleSubmit(verifyCode)}\n                className={cn(\"grid w-full gap-6\", className, classNames?.base)}\n            >\n                <FormField\n                    control={form.control}\n                    name=\"code\"\n                    render={({ field }) => (\n                        <FormItem>\n                            <FormLabel className={classNames?.label}>\n                                {localization.EMAIL_OTP}\n                            </FormLabel>\n\n                            <FormControl>\n                                <InputOTP\n                                    {...field}\n                                    maxLength={6}\n                                    onChange={(value) => {\n                                        field.onChange(value)\n\n                                        if (value.length === 6) {\n                                            form.handleSubmit(verifyCode)()\n                                        }\n                                    }}\n                                    containerClassName={\n                                        classNames?.otpInputContainer\n                                    }\n                                    className={classNames?.otpInput}\n                                    disabled={isSubmitting}\n                                >\n                                    <OTPInputGroup\n                                        otpSeparators={otpSeparators}\n                                    />\n                                </InputOTP>\n                            </FormControl>\n\n                            <FormMessage className={classNames?.error} />\n                        </FormItem>\n                    )}\n                />\n\n                <div className=\"grid gap-4\">\n                    <Button\n                        type=\"submit\"\n                        disabled={isSubmitting}\n                        className={cn(\n                            classNames?.button,\n                            classNames?.primaryButton\n                        )}\n                    >\n                        {isSubmitting && <Loader2 className=\"animate-spin\" />}\n                        {localization.EMAIL_OTP_VERIFY_ACTION}\n                    </Button>\n                </div>\n            </form>\n        </Form>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}