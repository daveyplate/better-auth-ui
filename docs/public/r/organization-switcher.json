{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "organization-switcher",
  "type": "registry:component",
  "title": "Organization Switcher",
  "description": "",
  "dependencies": [
    "better-auth",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-client.json",
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "https://better-auth-ui.com/r/create-organization-dialog.json",
    "dropdown-menu",
    "https://better-auth-ui.com/r/organization-cell-view.json",
    "https://better-auth-ui.com/r/organization-logo.json",
    "https://better-auth-ui.com/r/personal-account-view.json",
    "https://better-auth-ui.com/r/use-current-organization.json",
    "https://better-auth-ui.com/r/user-avatar.json",
    "https://better-auth-ui.com/r/user-view.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/organization/organization-switcher.tsx",
      "content": "\"use client\"\n\nimport type { Organization } from \"better-auth/plugins/organization\"\nimport {\n    ChevronsUpDown,\n    LogInIcon,\n    PlusCircleIcon,\n    SettingsIcon\n} from \"lucide-react\"\nimport {\n    type ComponentProps,\n    type ReactNode,\n    useCallback,\n    useContext,\n    useEffect,\n    useMemo,\n    useState\n} from \"react\"\n\nimport { useCurrentOrganization } from \"../../hooks/use-current-organization\"\nimport { AuthUIContext } from \"../../lib/auth-ui-provider\"\nimport { cn, getLocalizedError } from \"../../lib/utils\"\nimport type { AuthLocalization } from \"../../localization/auth-localization\"\nimport type { User } from \"../../types/auth-client\"\nimport { Button } from \"../ui/button\"\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuSeparator,\n    DropdownMenuTrigger\n} from \"../ui/dropdown-menu\"\nimport { UserAvatar, type UserAvatarClassNames } from \"../user-avatar\"\nimport type { UserViewClassNames } from \"../user-view\"\nimport { CreateOrganizationDialog } from \"./create-organization-dialog\"\nimport {\n    OrganizationCellView,\n    type OrganizationViewClassNames\n} from \"./organization-cell-view\"\nimport { OrganizationLogo } from \"./organization-logo\"\nimport { PersonalAccountView } from \"./personal-account-view\"\n\nexport interface OrganizationSwitcherClassNames {\n    base?: string\n    skeleton?: string\n    trigger?: {\n        base?: string\n        avatar?: UserAvatarClassNames\n        user?: UserViewClassNames\n        organization?: OrganizationViewClassNames\n        skeleton?: string\n    }\n    content?: {\n        base?: string\n        user?: UserViewClassNames\n        organization?: OrganizationViewClassNames\n        avatar?: UserAvatarClassNames\n        menuItem?: string\n        separator?: string\n    }\n}\n\nexport interface OrganizationSwitcherProps\n    extends Omit<ComponentProps<typeof Button>, \"trigger\"> {\n    classNames?: OrganizationSwitcherClassNames\n    align?: \"center\" | \"start\" | \"end\"\n    trigger?: ReactNode\n    localization?: AuthLocalization\n    slug?: string\n    onSetActive?: (organization: Organization | null) => void\n    /**\n     * Hide the personal organization option from the switcher.\n     * When true, users can only switch between organizations and cannot access their personal account.\n     * If no organization is active, the first available organization will be automatically selected.\n     * @default false\n     */\n    hidePersonal?: boolean\n}\n\n/**\n * Displays an interactive user button with dropdown menu functionality\n *\n * Renders a user interface element that can be displayed as either an icon or full button:\n * - Shows a user avatar or placeholder when in icon mode\n * - Displays user name and email with dropdown indicator in full mode\n * - Provides dropdown menu with authentication options (sign in/out, settings, etc.)\n * - Supports multi-session functionality for switching between accounts\n * - Can be customized with additional links and styling options\n */\nexport function OrganizationSwitcher({\n    className,\n    classNames,\n    align,\n    trigger,\n    localization: localizationProp,\n    slug: slugProp,\n    size,\n    onSetActive,\n    hidePersonal,\n    ...props\n}: OrganizationSwitcherProps) {\n    const {\n        authClient,\n        basePath,\n        hooks: { useSession, useListOrganizations },\n        localization: contextLocalization,\n        account: accountOptions,\n        organization: organizationOptions,\n        redirectTo,\n        navigate,\n        toast,\n        viewPaths,\n        Link\n    } = useContext(AuthUIContext)\n\n    const {\n        pathMode,\n        slug: contextSlug,\n        personalPath\n    } = organizationOptions || {}\n\n    const slug = slugProp || contextSlug\n\n    const localization = useMemo(\n        () => ({ ...contextLocalization, ...localizationProp }),\n        [contextLocalization, localizationProp]\n    )\n\n    const [activeOrganizationPending, setActiveOrganizationPending] =\n        useState(false)\n    const [isCreateOrgDialogOpen, setIsCreateOrgDialogOpen] = useState(false)\n    const [dropdownOpen, setDropdownOpen] = useState(false)\n\n    const { data: sessionData, isPending: sessionPending } = useSession()\n    const user = sessionData?.user\n\n    const { data: organizations, isPending: organizationsPending } =\n        useListOrganizations()\n\n    const {\n        data: activeOrganization,\n        isPending: organizationPending,\n        isRefetching: organizationRefetching\n    } = useCurrentOrganization({ slug })\n\n    const isPending =\n        organizationsPending ||\n        sessionPending ||\n        activeOrganizationPending ||\n        organizationPending\n\n    // biome-ignore lint/correctness/useExhaustiveDependencies: ignore\n    useEffect(() => {\n        if (organizationRefetching) return\n\n        setActiveOrganizationPending(false)\n    }, [activeOrganization, organizationRefetching])\n\n    const switchOrganization = useCallback(\n        async (organization: Organization | null) => {\n            // Prevent switching to personal account when hidePersonal is true\n            if (hidePersonal && organization === null) {\n                return\n            }\n\n            if (pathMode === \"slug\") {\n                if (organization) {\n                    navigate(\n                        `${organizationOptions?.basePath}/${organization.slug}`\n                    )\n                } else {\n                    navigate(personalPath ?? redirectTo)\n                }\n\n                return\n            }\n\n            setActiveOrganizationPending(true)\n\n            try {\n                onSetActive?.(organization)\n\n                await authClient.organization.setActive({\n                    organizationId: organization?.id || null,\n                    fetchOptions: {\n                        throw: true\n                    }\n                })\n            } catch (error) {\n                toast({\n                    variant: \"error\",\n                    message: getLocalizedError({ error, localization })\n                })\n\n                setActiveOrganizationPending(false)\n            }\n        },\n        [\n            authClient,\n            toast,\n            localization,\n            onSetActive,\n            hidePersonal,\n            pathMode,\n            personalPath,\n            organizationOptions?.basePath,\n            redirectTo,\n            navigate\n        ]\n    )\n\n    // Auto-select first organization when hidePersonal is true\n    useEffect(() => {\n        if (\n            hidePersonal &&\n            !activeOrganization &&\n            !activeOrganizationPending &&\n            organizations &&\n            organizations.length > 0 &&\n            !sessionPending &&\n            !organizationPending &&\n            !slug\n        ) {\n            switchOrganization(organizations[0])\n        }\n    }, [\n        hidePersonal,\n        activeOrganization,\n        activeOrganizationPending,\n        organizations,\n        sessionPending,\n        organizationPending,\n        switchOrganization,\n        slug\n    ])\n\n    return (\n        <>\n            <DropdownMenu open={dropdownOpen} onOpenChange={setDropdownOpen}>\n                <DropdownMenuTrigger asChild>\n                    {trigger ||\n                        (size === \"icon\" ? (\n                            <Button\n                                size=\"icon\"\n                                className={cn(\n                                    \"size-fit rounded-full\",\n                                    className,\n                                    classNames?.trigger?.base\n                                )}\n                                variant=\"ghost\"\n                                type=\"button\"\n                                {...props}\n                            >\n                                {isPending ||\n                                activeOrganization ||\n                                !sessionData ||\n                                (user as User)?.isAnonymous ||\n                                hidePersonal ? (\n                                    <OrganizationLogo\n                                        key={activeOrganization?.logo}\n                                        className={cn(\n                                            className,\n                                            classNames?.base\n                                        )}\n                                        classNames={classNames?.trigger?.avatar}\n                                        isPending={isPending}\n                                        organization={activeOrganization}\n                                        aria-label={localization.ORGANIZATION}\n                                        localization={localization}\n                                    />\n                                ) : (\n                                    <UserAvatar\n                                        key={user?.image}\n                                        className={cn(\n                                            className,\n                                            classNames?.base\n                                        )}\n                                        classNames={classNames?.trigger?.avatar}\n                                        user={user}\n                                        aria-label={localization.ACCOUNT}\n                                        localization={localization}\n                                    />\n                                )}\n                            </Button>\n                        ) : (\n                            <Button\n                                className={cn(\n                                    \"!p-2 h-fit\",\n                                    className,\n                                    classNames?.trigger?.base\n                                )}\n                                size={size}\n                                {...props}\n                            >\n                                {isPending ||\n                                activeOrganization ||\n                                !sessionData ||\n                                (user as User)?.isAnonymous ||\n                                hidePersonal ? (\n                                    <OrganizationCellView\n                                        classNames={\n                                            classNames?.trigger?.organization\n                                        }\n                                        isPending={isPending}\n                                        localization={localization}\n                                        organization={activeOrganization}\n                                        size={size}\n                                    />\n                                ) : (\n                                    <PersonalAccountView\n                                        classNames={classNames?.trigger?.user}\n                                        localization={localization}\n                                        size={size}\n                                        user={user}\n                                    />\n                                )}\n\n                                <ChevronsUpDown className=\"ml-auto\" />\n                            </Button>\n                        ))}\n                </DropdownMenuTrigger>\n\n                <DropdownMenuContent\n                    className={cn(\n                        \"w-[--radix-dropdown-menu-trigger-width] min-w-56 max-w-64\",\n                        classNames?.content?.base\n                    )}\n                    align={align}\n                    onCloseAutoFocus={(e) => e.preventDefault()}\n                >\n                    <div\n                        className={cn(\n                            \"flex items-center justify-between gap-2 p-2\",\n                            classNames?.content?.menuItem\n                        )}\n                    >\n                        {(user && !(user as User).isAnonymous) || isPending ? (\n                            <>\n                                {activeOrganizationPending ||\n                                activeOrganization ||\n                                hidePersonal ? (\n                                    <OrganizationCellView\n                                        classNames={\n                                            classNames?.content?.organization\n                                        }\n                                        isPending={\n                                            isPending ||\n                                            activeOrganizationPending\n                                        }\n                                        organization={activeOrganization}\n                                        localization={localization}\n                                    />\n                                ) : (\n                                    <PersonalAccountView\n                                        classNames={classNames?.content?.user}\n                                        isPending={isPending}\n                                        localization={localization}\n                                        user={user}\n                                    />\n                                )}\n\n                                {!isPending && (\n                                    <Link\n                                        href={\n                                            activeOrganization\n                                                ? pathMode === \"slug\"\n                                                    ? `${organizationOptions?.basePath}/${activeOrganization.slug}/${organizationOptions?.viewPaths.SETTINGS}`\n                                                    : `${organizationOptions?.basePath}/${organizationOptions?.viewPaths.SETTINGS}`\n                                                : `${accountOptions?.basePath}/${accountOptions?.viewPaths.SETTINGS}`\n                                        }\n                                    >\n                                        <Button\n                                            size=\"icon\"\n                                            variant=\"outline\"\n                                            className=\"!size-8 ml-auto\"\n                                            onClick={() =>\n                                                setDropdownOpen(false)\n                                            }\n                                        >\n                                            <SettingsIcon className=\"size-4\" />\n                                        </Button>\n                                    </Link>\n                                )}\n                            </>\n                        ) : (\n                            <div className=\"-my-1 text-muted-foreground text-xs\">\n                                {localization.ORGANIZATION}\n                            </div>\n                        )}\n                    </div>\n\n                    <DropdownMenuSeparator\n                        className={classNames?.content?.separator}\n                    />\n\n                    {activeOrganization && !hidePersonal && (\n                        <DropdownMenuItem\n                            onClick={() => switchOrganization(null)}\n                        >\n                            <PersonalAccountView\n                                classNames={classNames?.content?.user}\n                                isPending={isPending}\n                                localization={localization}\n                                user={user}\n                            />\n                        </DropdownMenuItem>\n                    )}\n\n                    {organizations?.map(\n                        (organization) =>\n                            organization.id !== activeOrganization?.id && (\n                                <DropdownMenuItem\n                                    key={organization.id}\n                                    onClick={() =>\n                                        switchOrganization(organization)\n                                    }\n                                >\n                                    <OrganizationCellView\n                                        classNames={\n                                            classNames?.content?.organization\n                                        }\n                                        isPending={isPending}\n                                        localization={localization}\n                                        organization={organization}\n                                    />\n                                </DropdownMenuItem>\n                            )\n                    )}\n\n                    {organizations &&\n                        organizations.length > 0 &&\n                        (!hidePersonal || organizations.length > 1) && (\n                            <DropdownMenuSeparator\n                                className={classNames?.content?.separator}\n                            />\n                        )}\n\n                    {!isPending &&\n                    sessionData &&\n                    !(user as User).isAnonymous ? (\n                        <DropdownMenuItem\n                            className={cn(classNames?.content?.menuItem)}\n                            onClick={() => setIsCreateOrgDialogOpen(true)}\n                        >\n                            <PlusCircleIcon />\n                            {localization.CREATE_ORGANIZATION}\n                        </DropdownMenuItem>\n                    ) : (\n                        <Link href={`${basePath}/${viewPaths.SIGN_IN}`}>\n                            <DropdownMenuItem\n                                className={cn(classNames?.content?.menuItem)}\n                            >\n                                <LogInIcon />\n                                {localization.SIGN_IN}\n                            </DropdownMenuItem>\n                        </Link>\n                    )}\n                </DropdownMenuContent>\n            </DropdownMenu>\n\n            <CreateOrganizationDialog\n                open={isCreateOrgDialogOpen}\n                onOpenChange={setIsCreateOrgDialogOpen}\n                localization={localization}\n            />\n        </>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}