{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "member-cell",
  "type": "registry:component",
  "title": "Member Cell",
  "description": "",
  "dependencies": [
    "better-auth",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "card",
    "dropdown-menu",
    "https://better-auth-ui.com/r/leave-organization-dialog.json",
    "https://better-auth-ui.com/r/remove-member-dialog.json",
    "https://better-auth-ui.com/r/settings-card.json",
    "https://better-auth-ui.com/r/update-member-role-dialog.json",
    "https://better-auth-ui.com/r/user-view.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/organization/member-cell.tsx",
      "content": "\"use client\"\n\nimport type { User } from \"better-auth\"\nimport type { Member } from \"better-auth/plugins/organization\"\nimport { EllipsisIcon, UserCogIcon, UserXIcon } from \"lucide-react\"\nimport { useContext, useState } from \"react\"\n\nimport { AuthUIContext } from \"../../lib/auth-ui-provider\"\nimport { cn } from \"../../lib/utils\"\nimport type { AuthLocalization } from \"../../localization/auth-localization\"\nimport type { SettingsCardClassNames } from \"../settings/shared/settings-card\"\nimport { Button } from \"../ui/button\"\nimport { Card } from \"../ui/card\"\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger\n} from \"../ui/dropdown-menu\"\nimport { UserView } from \"../user-view\"\nimport { LeaveOrganizationDialog } from \"./leave-organization-dialog\"\nimport { RemoveMemberDialog } from \"./remove-member-dialog\"\nimport { UpdateMemberRoleDialog } from \"./update-member-role-dialog\"\n\nexport interface MemberCellProps {\n    className?: string\n    classNames?: SettingsCardClassNames\n    member: Member & { user?: Partial<User> | null }\n    localization?: AuthLocalization\n    hideActions?: boolean\n}\n\nexport function MemberCell({\n    className,\n    classNames,\n    member,\n    localization: localizationProp,\n    hideActions\n}: MemberCellProps) {\n    const {\n        organization: organizationOptions,\n        hooks: {\n            useListMembers,\n            useSession,\n            useListOrganizations,\n            useHasPermission\n        },\n        localization: contextLocalization\n    } = useContext(AuthUIContext)\n    const localization = { ...contextLocalization, ...localizationProp }\n\n    const { data: sessionData } = useSession()\n    const [removeDialogOpen, setRemoveDialogOpen] = useState(false)\n    const [leaveDialogOpen, setLeaveDialogOpen] = useState(false)\n    const [updateRoleDialogOpen, setUpdateRoleDialogOpen] = useState(false)\n\n    const builtInRoles = [\n        { role: \"owner\", label: localization.OWNER },\n        { role: \"admin\", label: localization.ADMIN },\n        { role: \"member\", label: localization.MEMBER }\n    ]\n\n    const { data } = useListMembers({\n        query: { organizationId: member.organizationId }\n    })\n\n    const members = data?.members\n\n    const myRole = members?.find(\n        (m) => m.user?.id === sessionData?.user.id\n    )?.role\n    const roles = [...builtInRoles, ...(organizationOptions?.customRoles || [])]\n    const role = roles.find((r) => r.role === member.role)\n\n    const isSelf = sessionData?.user.id === member?.userId\n\n    const { data: organizations } = useListOrganizations()\n    const organization = organizations?.find(\n        (org) => org.id === member.organizationId\n    )\n\n    const { data: hasPermissionToUpdateMember } = useHasPermission({\n        organizationId: member.organizationId,\n        permission: { member: [\"update\"] }\n    })\n\n    return (\n        <>\n            <Card\n                className={cn(\n                    \"flex-row items-center p-4\",\n                    className,\n                    classNames?.cell\n                )}\n            >\n                <UserView\n                    user={member.user}\n                    localization={localization}\n                    className=\"flex-1\"\n                />\n\n                <span className=\"text-xs opacity-70\">{role?.label}</span>\n\n                {!hideActions &&\n                    (isSelf ||\n                        member.role !== \"owner\" ||\n                        myRole === \"owner\") && (\n                        <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                                <Button\n                                    className={cn(\n                                        \"relative ms-auto\",\n                                        classNames?.button,\n                                        classNames?.outlineButton\n                                    )}\n                                    size=\"icon\"\n                                    type=\"button\"\n                                    variant=\"outline\"\n                                >\n                                    <EllipsisIcon\n                                        className={classNames?.icon}\n                                    />\n                                </Button>\n                            </DropdownMenuTrigger>\n\n                            <DropdownMenuContent\n                                onCloseAutoFocus={(e) => e.preventDefault()}\n                            >\n                                {hasPermissionToUpdateMember?.success && (\n                                    <DropdownMenuItem\n                                        onClick={() =>\n                                            setUpdateRoleDialogOpen(true)\n                                        }\n                                    >\n                                        <UserCogIcon\n                                            className={classNames?.icon}\n                                        />\n                                        {localization?.UPDATE_ROLE}\n                                    </DropdownMenuItem>\n                                )}\n\n                                <DropdownMenuItem\n                                    onClick={() =>\n                                        isSelf\n                                            ? setLeaveDialogOpen(true)\n                                            : setRemoveDialogOpen(true)\n                                    }\n                                    variant=\"destructive\"\n                                >\n                                    <UserXIcon className={classNames?.icon} />\n                                    {isSelf\n                                        ? localization?.LEAVE_ORGANIZATION\n                                        : localization?.REMOVE_MEMBER}\n                                </DropdownMenuItem>\n                            </DropdownMenuContent>\n                        </DropdownMenu>\n                    )}\n            </Card>\n\n            <RemoveMemberDialog\n                open={removeDialogOpen}\n                onOpenChange={setRemoveDialogOpen}\n                member={member}\n                classNames={classNames}\n                localization={localization}\n            />\n\n            {organization && (\n                <LeaveOrganizationDialog\n                    open={leaveDialogOpen}\n                    onOpenChange={setLeaveDialogOpen}\n                    organization={organization}\n                    classNames={classNames}\n                    localization={localization}\n                />\n            )}\n\n            <UpdateMemberRoleDialog\n                open={updateRoleDialogOpen}\n                onOpenChange={setUpdateRoleDialogOpen}\n                member={member}\n                classNames={classNames}\n                localization={localization}\n            />\n        </>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}