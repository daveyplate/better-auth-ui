{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "organization-members-card",
  "type": "registry:component",
  "title": "Organization Members Card",
  "description": "",
  "dependencies": [
    "better-auth"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "card",
    "https://better-auth-ui.com/r/invite-member-dialog.json",
    "https://better-auth-ui.com/r/member-cell.json",
    "https://better-auth-ui.com/r/settings-card.json",
    "https://better-auth-ui.com/r/use-current-organization.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/organization/organization-members-card.tsx",
      "content": "\"use client\"\n\nimport type { Organization } from \"better-auth/plugins/organization\"\nimport { useContext, useMemo, useState } from \"react\"\n\nimport { useCurrentOrganization } from \"../../hooks/use-current-organization\"\nimport { AuthUIContext } from \"../../lib/auth-ui-provider\"\nimport { cn } from \"../../lib/utils\"\nimport type { SettingsCardProps } from \"../settings/shared/settings-card\"\nimport { SettingsCard } from \"../settings/shared/settings-card\"\nimport { CardContent } from \"../ui/card\"\nimport { InviteMemberDialog } from \"./invite-member-dialog\"\nimport { MemberCell } from \"./member-cell\"\n\nexport function OrganizationMembersCard({\n    className,\n    classNames,\n    localization: localizationProp,\n    slug: slugProp,\n    ...props\n}: SettingsCardProps & { slug?: string }) {\n    const {\n        localization: contextLocalization,\n        organization: organizationOptions\n    } = useContext(AuthUIContext)\n\n    const localization = useMemo(\n        () => ({ ...contextLocalization, ...localizationProp }),\n        [contextLocalization, localizationProp]\n    )\n\n    const slug = slugProp || organizationOptions?.slug\n\n    const { data: organization } = useCurrentOrganization({ slug })\n\n    if (!organization) {\n        return (\n            <SettingsCard\n                className={className}\n                classNames={classNames}\n                title={localization.MEMBERS}\n                description={localization.MEMBERS_DESCRIPTION}\n                instructions={localization.MEMBERS_INSTRUCTIONS}\n                actionLabel={localization.INVITE_MEMBER}\n                isPending\n                {...props}\n            />\n        )\n    }\n\n    return (\n        <OrganizationMembersContent\n            className={className}\n            classNames={classNames}\n            localization={localization}\n            organization={organization}\n            {...props}\n        />\n    )\n}\n\nfunction OrganizationMembersContent({\n    className,\n    classNames,\n    localization: localizationProp,\n    organization,\n    ...props\n}: SettingsCardProps & { organization: Organization }) {\n    const {\n        hooks: { useHasPermission, useListMembers },\n        localization: contextLocalization\n    } = useContext(AuthUIContext)\n\n    const localization = useMemo(\n        () => ({ ...contextLocalization, ...localizationProp }),\n        [contextLocalization, localizationProp]\n    )\n\n    const { data: hasPermissionInvite, isPending: isPendingInvite } =\n        useHasPermission({\n            organizationId: organization.id,\n            permissions: {\n                invitation: [\"create\"]\n            }\n        })\n\n    const {\n        data: hasPermissionUpdateMember,\n        isPending: isPendingUpdateMember\n    } = useHasPermission({\n        organizationId: organization.id,\n        permission: {\n            member: [\"update\"]\n        }\n    })\n\n    const isPending = isPendingInvite || isPendingUpdateMember\n\n    const { data } = useListMembers({\n        query: { organizationId: organization.id }\n    })\n\n    const members = data?.members\n\n    const [inviteDialogOpen, setInviteDialogOpen] = useState(false)\n\n    return (\n        <>\n            <SettingsCard\n                className={className}\n                classNames={classNames}\n                title={localization.MEMBERS}\n                description={localization.MEMBERS_DESCRIPTION}\n                instructions={localization.MEMBERS_INSTRUCTIONS}\n                actionLabel={localization.INVITE_MEMBER}\n                action={() => setInviteDialogOpen(true)}\n                isPending={isPending}\n                disabled={!hasPermissionInvite?.success}\n                {...props}\n            >\n                {!isPending && members && members.length > 0 && (\n                    <CardContent\n                        className={cn(\"grid gap-4\", classNames?.content)}\n                    >\n                        {members\n                            .sort(\n                                (a, b) =>\n                                    new Date(a.createdAt).getTime() -\n                                    new Date(b.createdAt).getTime()\n                            )\n                            .map((member) => (\n                                <MemberCell\n                                    key={member.id}\n                                    classNames={classNames}\n                                    member={member}\n                                    localization={localization}\n                                    hideActions={\n                                        !hasPermissionUpdateMember?.success\n                                    }\n                                />\n                            ))}\n                    </CardContent>\n                )}\n            </SettingsCard>\n\n            <InviteMemberDialog\n                open={inviteDialogOpen}\n                onOpenChange={setInviteDialogOpen}\n                classNames={classNames}\n                localization={localization}\n                organization={organization}\n            />\n        </>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}