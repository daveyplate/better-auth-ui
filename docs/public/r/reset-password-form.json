{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "reset-password-form",
  "type": "registry:component",
  "title": "Reset Password Form",
  "description": "",
  "dependencies": [
    "@hookform/resolvers",
    "lucide-react",
    "react-hook-form",
    "zod"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-form.json",
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "form",
    "https://better-auth-ui.com/r/password-input.json",
    "https://better-auth-ui.com/r/password-validation.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/auth/forms/reset-password-form.tsx",
      "content": "\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { Loader2 } from \"lucide-react\"\nimport { useContext, useEffect, useRef } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n\nimport { AuthUIContext } from \"../../../lib/auth-ui-provider\"\nimport { cn, getLocalizedError, getPasswordSchema } from \"../../../lib/utils\"\nimport type { AuthLocalization } from \"../../../localization/auth-localization\"\nimport type { PasswordValidation } from \"../../../types/password-validation\"\nimport { PasswordInput } from \"../../password-input\"\nimport { Button } from \"../../ui/button\"\nimport {\n    Form,\n    FormControl,\n    FormField,\n    FormItem,\n    FormLabel,\n    FormMessage\n} from \"../../ui/form\"\nimport type { AuthFormClassNames } from \"../auth-form\"\n\nexport interface ResetPasswordFormProps {\n    className?: string\n    classNames?: AuthFormClassNames\n    localization: Partial<AuthLocalization>\n    passwordValidation?: PasswordValidation\n}\n\nexport function ResetPasswordForm({\n    className,\n    classNames,\n    localization,\n    passwordValidation\n}: ResetPasswordFormProps) {\n    const tokenChecked = useRef(false)\n\n    const {\n        authClient,\n        basePath,\n        credentials,\n        localization: contextLocalization,\n        viewPaths,\n        navigate,\n        toast\n    } = useContext(AuthUIContext)\n\n    const confirmPasswordEnabled = credentials?.confirmPassword\n    const contextPasswordValidation = credentials?.passwordValidation\n\n    localization = { ...contextLocalization, ...localization }\n    passwordValidation = { ...contextPasswordValidation, ...passwordValidation }\n\n    const formSchema = z\n        .object({\n            newPassword: getPasswordSchema(passwordValidation, {\n                PASSWORD_REQUIRED: localization.NEW_PASSWORD_REQUIRED,\n                PASSWORD_TOO_SHORT: localization.PASSWORD_TOO_SHORT,\n                PASSWORD_TOO_LONG: localization.PASSWORD_TOO_LONG,\n                INVALID_PASSWORD: localization.INVALID_PASSWORD\n            }),\n            confirmPassword: confirmPasswordEnabled\n                ? getPasswordSchema(passwordValidation, {\n                      PASSWORD_REQUIRED: localization.CONFIRM_PASSWORD_REQUIRED,\n                      PASSWORD_TOO_SHORT: localization.PASSWORD_TOO_SHORT,\n                      PASSWORD_TOO_LONG: localization.PASSWORD_TOO_LONG,\n                      INVALID_PASSWORD: localization.INVALID_PASSWORD\n                  })\n                : z.string().optional()\n        })\n        .refine(\n            (data) =>\n                !confirmPasswordEnabled ||\n                data.newPassword === data.confirmPassword,\n            {\n                message: localization.PASSWORDS_DO_NOT_MATCH,\n                path: [\"confirmPassword\"]\n            }\n        )\n\n    const form = useForm({\n        resolver: zodResolver(formSchema),\n        defaultValues: {\n            newPassword: \"\",\n            confirmPassword: \"\"\n        }\n    })\n\n    const isSubmitting = form.formState.isSubmitting\n\n    useEffect(() => {\n        if (tokenChecked.current) return\n        tokenChecked.current = true\n\n        const searchParams = new URLSearchParams(window.location.search)\n        const token = searchParams.get(\"token\")\n\n        if (!token || token === \"INVALID_TOKEN\") {\n            navigate(\n                `${basePath}/${viewPaths.SIGN_IN}${window.location.search}`\n            )\n            toast({ variant: \"error\", message: localization.INVALID_TOKEN })\n        }\n    }, [basePath, navigate, toast, viewPaths, localization])\n\n    async function resetPassword({ newPassword }: z.infer<typeof formSchema>) {\n        try {\n            const searchParams = new URLSearchParams(window.location.search)\n            const token = searchParams.get(\"token\") as string\n\n            await authClient.resetPassword({\n                newPassword,\n                token,\n                fetchOptions: { throw: true }\n            })\n\n            toast({\n                variant: \"success\",\n                message: localization.RESET_PASSWORD_SUCCESS\n            })\n\n            navigate(\n                `${basePath}/${viewPaths.SIGN_IN}${window.location.search}`\n            )\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n\n            form.reset()\n        }\n    }\n\n    return (\n        <Form {...form}>\n            <form\n                onSubmit={form.handleSubmit(resetPassword)}\n                className={cn(\"grid w-full gap-6\", className, classNames?.base)}\n            >\n                <FormField\n                    control={form.control}\n                    name=\"newPassword\"\n                    render={({ field }) => (\n                        <FormItem>\n                            <FormLabel className={classNames?.label}>\n                                {localization.NEW_PASSWORD}\n                            </FormLabel>\n\n                            <FormControl>\n                                <PasswordInput\n                                    autoComplete=\"new-password\"\n                                    className={classNames?.input}\n                                    placeholder={\n                                        localization.NEW_PASSWORD_PLACEHOLDER\n                                    }\n                                    disabled={isSubmitting}\n                                    {...field}\n                                />\n                            </FormControl>\n\n                            <FormMessage className={classNames?.error} />\n                        </FormItem>\n                    )}\n                />\n\n                {confirmPasswordEnabled && (\n                    <FormField\n                        control={form.control}\n                        name=\"confirmPassword\"\n                        render={({ field }) => (\n                            <FormItem>\n                                <FormLabel className={classNames?.label}>\n                                    {localization.CONFIRM_PASSWORD}\n                                </FormLabel>\n\n                                <FormControl>\n                                    <PasswordInput\n                                        autoComplete=\"new-password\"\n                                        className={classNames?.input}\n                                        placeholder={\n                                            localization.CONFIRM_PASSWORD_PLACEHOLDER\n                                        }\n                                        disabled={isSubmitting}\n                                        {...field}\n                                    />\n                                </FormControl>\n\n                                <FormMessage className={classNames?.error} />\n                            </FormItem>\n                        )}\n                    />\n                )}\n\n                <Button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    className={cn(\n                        \"w-full\",\n                        classNames?.button,\n                        classNames?.primaryButton\n                    )}\n                >\n                    {isSubmitting ? (\n                        <Loader2 className=\"animate-spin\" />\n                    ) : (\n                        localization.RESET_PASSWORD_ACTION\n                    )}\n                </Button>\n            </form>\n        </Form>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}