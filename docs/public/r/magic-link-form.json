{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "magic-link-form",
  "type": "registry:component",
  "title": "Magic Link Form",
  "description": "",
  "dependencies": [
    "@hookform/resolvers",
    "better-auth",
    "lucide-react",
    "react-hook-form",
    "zod"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-form.json",
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "https://better-auth-ui.com/r/captcha.json",
    "form",
    "input",
    "https://better-auth-ui.com/r/use-captcha.json",
    "https://better-auth-ui.com/r/use-hydrated.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/auth/forms/magic-link-form.tsx",
      "content": "\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport type { BetterFetchOption } from \"better-auth/react\"\nimport { Loader2 } from \"lucide-react\"\nimport { useCallback, useContext, useEffect } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n\nimport { useCaptcha } from \"../../../hooks/use-captcha\"\nimport { useIsHydrated } from \"../../../hooks/use-hydrated\"\nimport { AuthUIContext } from \"../../../lib/auth-ui-provider\"\nimport { cn, getLocalizedError, getSearchParam } from \"../../../lib/utils\"\nimport type { AuthLocalization } from \"../../../localization/auth-localization\"\nimport { Captcha } from \"../../captcha/captcha\"\nimport { Button } from \"../../ui/button\"\nimport {\n    Form,\n    FormControl,\n    FormField,\n    FormItem,\n    FormLabel,\n    FormMessage\n} from \"../../ui/form\"\nimport { Input } from \"../../ui/input\"\nimport type { AuthFormClassNames } from \"../auth-form\"\n\nexport interface MagicLinkFormProps {\n    className?: string\n    classNames?: AuthFormClassNames\n    callbackURL?: string\n    isSubmitting?: boolean\n    localization: Partial<AuthLocalization>\n    redirectTo?: string\n    setIsSubmitting?: (value: boolean) => void\n}\n\nexport function MagicLinkForm({\n    className,\n    classNames,\n    callbackURL: callbackURLProp,\n    isSubmitting,\n    localization,\n    redirectTo: redirectToProp,\n    setIsSubmitting\n}: MagicLinkFormProps) {\n    const isHydrated = useIsHydrated()\n    const { captchaRef, getCaptchaHeaders, resetCaptcha } = useCaptcha({\n        localization\n    })\n\n    const {\n        authClient,\n        basePath,\n        baseURL,\n        persistClient,\n        localization: contextLocalization,\n        redirectTo: contextRedirectTo,\n        viewPaths,\n        toast\n    } = useContext(AuthUIContext)\n\n    localization = { ...contextLocalization, ...localization }\n\n    const getRedirectTo = useCallback(\n        () =>\n            redirectToProp || getSearchParam(\"redirectTo\") || contextRedirectTo,\n        [redirectToProp, contextRedirectTo]\n    )\n\n    const getCallbackURL = useCallback(\n        () =>\n            `${baseURL}${\n                callbackURLProp ||\n                (persistClient\n                    ? `${basePath}/${viewPaths.CALLBACK}?redirectTo=${getRedirectTo()}`\n                    : getRedirectTo())\n            }`,\n        [\n            callbackURLProp,\n            persistClient,\n            basePath,\n            viewPaths,\n            baseURL,\n            getRedirectTo\n        ]\n    )\n\n    const formSchema = z.object({\n        email: z\n            .string()\n            .min(1, {\n                message: `${localization.EMAIL} ${localization.IS_REQUIRED}`\n            })\n            .email({\n                message: `${localization.EMAIL} ${localization.IS_INVALID}`\n            })\n    })\n\n    const form = useForm({\n        resolver: zodResolver(formSchema),\n        defaultValues: {\n            email: \"\"\n        }\n    })\n\n    isSubmitting = isSubmitting || form.formState.isSubmitting\n\n    useEffect(() => {\n        setIsSubmitting?.(form.formState.isSubmitting)\n    }, [form.formState.isSubmitting, setIsSubmitting])\n\n    async function sendMagicLink({ email }: z.infer<typeof formSchema>) {\n        try {\n            const fetchOptions: BetterFetchOption = {\n                throw: true,\n                headers: await getCaptchaHeaders(\"/sign-in/magic-link\")\n            }\n\n            await authClient.signIn.magicLink({\n                email,\n                callbackURL: getCallbackURL(),\n                fetchOptions\n            })\n\n            toast({\n                variant: \"success\",\n                message: localization.MAGIC_LINK_EMAIL\n            })\n\n            form.reset()\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n            resetCaptcha()\n        }\n    }\n\n    return (\n        <Form {...form}>\n            <form\n                onSubmit={form.handleSubmit(sendMagicLink)}\n                noValidate={isHydrated}\n                className={cn(\"grid w-full gap-6\", className, classNames?.base)}\n            >\n                <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                        <FormItem>\n                            <FormLabel className={classNames?.label}>\n                                {localization.EMAIL}\n                            </FormLabel>\n\n                            <FormControl>\n                                <Input\n                                    className={classNames?.input}\n                                    type=\"email\"\n                                    placeholder={localization.EMAIL_PLACEHOLDER}\n                                    disabled={isSubmitting}\n                                    {...field}\n                                />\n                            </FormControl>\n\n                            <FormMessage className={classNames?.error} />\n                        </FormItem>\n                    )}\n                />\n\n                <Captcha\n                    ref={captchaRef}\n                    localization={localization}\n                    action=\"/sign-in/magic-link\"\n                />\n\n                <Button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    className={cn(\n                        \"w-full\",\n                        classNames?.button,\n                        classNames?.primaryButton\n                    )}\n                >\n                    {isSubmitting ? (\n                        <Loader2 className=\"animate-spin\" />\n                    ) : (\n                        localization.MAGIC_LINK_ACTION\n                    )}\n                </Button>\n            </form>\n        </Form>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}