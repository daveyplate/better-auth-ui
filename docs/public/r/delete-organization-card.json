{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "delete-organization-card",
  "type": "registry:component",
  "title": "Delete Organization Card",
  "description": "",
  "dependencies": [
    "better-auth"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "https://better-auth-ui.com/r/delete-organization-dialog.json",
    "https://better-auth-ui.com/r/settings-card.json",
    "https://better-auth-ui.com/r/use-current-organization.json"
  ],
  "files": [
    {
      "path": "src/components/organization/delete-organization-card.tsx",
      "content": "\"use client\"\n\nimport type { Organization } from \"better-auth/plugins/organization\"\nimport { useContext, useMemo, useState } from \"react\"\n\nimport { useCurrentOrganization } from \"../../hooks/use-current-organization\"\nimport { AuthUIContext } from \"../../lib/auth-ui-provider\"\nimport type { SettingsCardProps } from \"../settings/shared/settings-card\"\nimport { SettingsCard } from \"../settings/shared/settings-card\"\nimport { DeleteOrganizationDialog } from \"./delete-organization-dialog\"\n\nexport function DeleteOrganizationCard({\n    className,\n    classNames,\n    localization: localizationProp,\n    slug,\n    ...props\n}: SettingsCardProps & { slug?: string }) {\n    const { localization: contextLocalization } = useContext(AuthUIContext)\n\n    const localization = useMemo(\n        () => ({ ...contextLocalization, ...localizationProp }),\n        [contextLocalization, localizationProp]\n    )\n\n    const { data: organization } = useCurrentOrganization({ slug })\n\n    if (!organization)\n        return (\n            <SettingsCard\n                className={className}\n                classNames={classNames}\n                actionLabel={localization?.DELETE_ORGANIZATION}\n                description={localization?.DELETE_ORGANIZATION_DESCRIPTION}\n                isPending\n                title={localization?.DELETE_ORGANIZATION}\n                variant=\"destructive\"\n            />\n        )\n\n    return (\n        <DeleteOrganizationForm\n            className={className}\n            classNames={classNames}\n            localization={localization}\n            organization={organization}\n            {...props}\n        />\n    )\n}\n\nfunction DeleteOrganizationForm({\n    className,\n    classNames,\n    localization: localizationProp,\n    organization\n}: SettingsCardProps & { organization: Organization }) {\n    const {\n        localization: contextLocalization,\n        hooks: { useHasPermission }\n    } = useContext(AuthUIContext)\n\n    const localization = useMemo(\n        () => ({ ...contextLocalization, ...localizationProp }),\n        [contextLocalization, localizationProp]\n    )\n\n    const { data: hasPermission, isPending } = useHasPermission({\n        organizationId: organization.id,\n        permissions: {\n            organization: [\"delete\"]\n        }\n    })\n\n    const [showDialog, setShowDialog] = useState(false)\n\n    if (!hasPermission?.success) return null\n\n    return (\n        <>\n            <SettingsCard\n                className={className}\n                classNames={classNames}\n                actionLabel={localization?.DELETE_ORGANIZATION}\n                description={localization?.DELETE_ORGANIZATION_DESCRIPTION}\n                isPending={isPending}\n                title={localization?.DELETE_ORGANIZATION}\n                variant=\"destructive\"\n                action={() => setShowDialog(true)}\n            />\n\n            <DeleteOrganizationDialog\n                classNames={classNames}\n                localization={localization}\n                open={showDialog}\n                onOpenChange={setShowDialog}\n                organization={organization}\n            />\n        </>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}