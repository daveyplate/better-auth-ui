{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "update-avatar-card",
  "type": "registry:component",
  "title": "Update Avatar Card",
  "description": "",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "card",
    "dropdown-menu",
    "https://better-auth-ui.com/r/image-utils.json",
    "https://better-auth-ui.com/r/settings-card.json",
    "https://better-auth-ui.com/r/settings-card-footer.json",
    "https://better-auth-ui.com/r/settings-card-header.json",
    "https://better-auth-ui.com/r/user-avatar.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/settings/account/update-avatar-card.tsx",
      "content": "\"use client\"\n\nimport { Trash2Icon, UploadCloudIcon } from \"lucide-react\"\nimport { type ComponentProps, useContext, useRef, useState } from \"react\"\n\nimport { AuthUIContext } from \"../../../lib/auth-ui-provider\"\nimport { fileToBase64, resizeAndCropImage } from \"../../../lib/image-utils\"\nimport { cn, getLocalizedError } from \"../../../lib/utils\"\nimport type { AuthLocalization } from \"../../../localization/auth-localization\"\nimport { Button } from \"../../ui/button\"\nimport { Card } from \"../../ui/card\"\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger\n} from \"../../ui/dropdown-menu\"\nimport { UserAvatar } from \"../../user-avatar\"\nimport type { SettingsCardClassNames } from \"../shared/settings-card\"\nimport { SettingsCardFooter } from \"../shared/settings-card-footer\"\nimport { SettingsCardHeader } from \"../shared/settings-card-header\"\n\nexport interface UpdateAvatarCardProps extends ComponentProps<typeof Card> {\n    className?: string\n    classNames?: SettingsCardClassNames\n    localization?: AuthLocalization\n}\n\nexport function UpdateAvatarCard({\n    className,\n    classNames,\n    localization,\n    ...props\n}: UpdateAvatarCardProps) {\n    const {\n        hooks: { useSession },\n        mutators: { updateUser },\n        localization: authLocalization,\n        optimistic,\n        avatar,\n        toast\n    } = useContext(AuthUIContext)\n\n    localization = { ...authLocalization, ...localization }\n\n    const { data: sessionData, isPending, refetch } = useSession()\n    const fileInputRef = useRef<HTMLInputElement | null>(null)\n    const [loading, setLoading] = useState(false)\n\n    const handleAvatarChange = async (file: File) => {\n        if (!sessionData || !avatar) return\n\n        setLoading(true)\n        const resizedFile = await resizeAndCropImage(\n            file,\n            crypto.randomUUID(),\n            avatar.size,\n            avatar.extension\n        )\n\n        let image: string | undefined | null\n\n        if (avatar.upload) {\n            image = await avatar.upload(resizedFile)\n        } else {\n            image = await fileToBase64(resizedFile)\n        }\n\n        if (!image) {\n            setLoading(false)\n            return\n        }\n\n        if (optimistic && !avatar.upload) setLoading(false)\n\n        try {\n            await updateUser({ image })\n            await refetch?.()\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n\n        setLoading(false)\n    }\n\n    const handleDeleteAvatar = async () => {\n        if (!sessionData) return\n\n        setLoading(true)\n\n        try {\n            // If a custom storage remover is provided, attempt to clean up the old asset first\n            if (sessionData.user.image && avatar?.delete) {\n                await avatar.delete(sessionData.user.image)\n            }\n\n            await updateUser({ image: null })\n            await refetch?.()\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n\n        setLoading(false)\n    }\n\n    const openFileDialog = () => fileInputRef.current?.click()\n\n    return (\n        <Card\n            className={cn(\n                \"w-full pb-0 text-start\",\n                className,\n                classNames?.base\n            )}\n            {...props}\n        >\n            <input\n                ref={fileInputRef}\n                accept=\"image/*\"\n                disabled={loading}\n                hidden\n                type=\"file\"\n                onChange={(e) => {\n                    const file = e.target.files?.item(0)\n                    if (file) handleAvatarChange(file)\n\n                    e.target.value = \"\"\n                }}\n            />\n\n            <div className=\"flex justify-between\">\n                <SettingsCardHeader\n                    className=\"grow self-start\"\n                    title={localization.AVATAR}\n                    description={localization.AVATAR_DESCRIPTION}\n                    isPending={isPending}\n                    classNames={classNames}\n                />\n\n                <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                        <Button\n                            className=\"me-6 size-fit rounded-full\"\n                            size=\"icon\"\n                            variant=\"ghost\"\n                        >\n                            <UserAvatar\n                                isPending={isPending || loading}\n                                key={sessionData?.user.image}\n                                className=\"size-20 text-2xl\"\n                                classNames={classNames?.avatar}\n                                user={sessionData?.user}\n                                localization={localization}\n                            />\n                        </Button>\n                    </DropdownMenuTrigger>\n\n                    <DropdownMenuContent\n                        align=\"end\"\n                        onCloseAutoFocus={(e) => e.preventDefault()}\n                    >\n                        <DropdownMenuItem\n                            onClick={openFileDialog}\n                            disabled={loading}\n                        >\n                            <UploadCloudIcon />\n                            {localization.UPLOAD_AVATAR}\n                        </DropdownMenuItem>\n                        {sessionData?.user.image && (\n                            <DropdownMenuItem\n                                onClick={handleDeleteAvatar}\n                                disabled={loading}\n                                variant=\"destructive\"\n                            >\n                                <Trash2Icon />\n                                {localization.DELETE_AVATAR}\n                            </DropdownMenuItem>\n                        )}\n                    </DropdownMenuContent>\n                </DropdownMenu>\n            </div>\n\n            <SettingsCardFooter\n                className=\"!py-5\"\n                instructions={localization.AVATAR_INSTRUCTIONS}\n                classNames={classNames}\n                isPending={isPending}\n                isSubmitting={loading}\n            />\n        </Card>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}