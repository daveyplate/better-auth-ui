{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "passkeys-card",
  "type": "registry:component",
  "title": "Passkeys Card",
  "description": "",
  "dependencies": [
    "react-hook-form"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "card",
    "form",
    "https://better-auth-ui.com/r/passkey-cell.json",
    "https://better-auth-ui.com/r/session-freshness-dialog.json",
    "https://better-auth-ui.com/r/settings-card.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/settings/passkey/passkeys-card.tsx",
      "content": "\"use client\"\n\nimport { useContext, useState } from \"react\"\nimport { useForm } from \"react-hook-form\"\n\nimport { AuthUIContext } from \"../../../lib/auth-ui-provider\"\nimport { cn, getLocalizedError } from \"../../../lib/utils\"\nimport type { AuthLocalization } from \"../../../localization/auth-localization\"\nimport { CardContent } from \"../../ui/card\"\nimport { Form } from \"../../ui/form\"\nimport { SessionFreshnessDialog } from \"../shared/session-freshness-dialog\"\nimport type { SettingsCardClassNames } from \"../shared/settings-card\"\nimport { SettingsCard } from \"../shared/settings-card\"\nimport { PasskeyCell } from \"./passkey-cell\"\n\nexport interface PasskeysCardProps {\n    className?: string\n    classNames?: SettingsCardClassNames\n    localization?: AuthLocalization\n}\n\nexport function PasskeysCard({\n    className,\n    classNames,\n    localization\n}: PasskeysCardProps) {\n    const {\n        authClient,\n        freshAge,\n        hooks: { useListPasskeys, useSession },\n        localization: authLocalization,\n        toast\n    } = useContext(AuthUIContext)\n\n    localization = { ...authLocalization, ...localization }\n\n    const { data: passkeys, isPending, refetch } = useListPasskeys()\n\n    const { data: sessionData } = useSession()\n    const session = sessionData?.session\n    const isFresh = session\n        ? Date.now() - new Date(session?.createdAt).getTime() < freshAge * 1000\n        : false\n\n    const [showFreshnessDialog, setShowFreshnessDialog] = useState(false)\n\n    const addPasskey = async () => {\n        // If session isn't fresh, show the freshness dialog\n        if (!isFresh) {\n            setShowFreshnessDialog(true)\n            return\n        }\n\n        try {\n            await authClient.passkey.addPasskey({\n                fetchOptions: { throw: true }\n            })\n            await refetch?.()\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n    }\n\n    const form = useForm()\n\n    return (\n        <>\n            <SessionFreshnessDialog\n                open={showFreshnessDialog}\n                onOpenChange={setShowFreshnessDialog}\n                classNames={classNames}\n                localization={localization}\n            />\n\n            <Form {...form}>\n                <form onSubmit={form.handleSubmit(addPasskey)}>\n                    <SettingsCard\n                        className={className}\n                        classNames={classNames}\n                        actionLabel={localization.ADD_PASSKEY}\n                        description={localization.PASSKEYS_DESCRIPTION}\n                        instructions={localization.PASSKEYS_INSTRUCTIONS}\n                        isPending={isPending}\n                        title={localization.PASSKEYS}\n                    >\n                        {passkeys && passkeys.length > 0 && (\n                            <CardContent\n                                className={cn(\n                                    \"grid gap-4\",\n                                    classNames?.content\n                                )}\n                            >\n                                {passkeys?.map((passkey) => (\n                                    <PasskeyCell\n                                        key={passkey.id}\n                                        classNames={classNames}\n                                        localization={localization}\n                                        passkey={passkey}\n                                    />\n                                ))}\n                            </CardContent>\n                        )}\n                    </SettingsCard>\n                </form>\n            </Form>\n        </>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}