{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "change-password-card",
  "type": "registry:component",
  "title": "Change Password Card",
  "description": "",
  "dependencies": [
    "@hookform/resolvers",
    "react-hook-form",
    "zod"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "card",
    "form",
    "https://better-auth-ui.com/r/input-field-skeleton.json",
    "https://better-auth-ui.com/r/password-input.json",
    "https://better-auth-ui.com/r/password-validation.json",
    "https://better-auth-ui.com/r/settings-card.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/settings/security/change-password-card.tsx",
      "content": "\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useContext } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n\nimport { AuthUIContext } from \"../../../lib/auth-ui-provider\"\nimport { cn, getLocalizedError, getPasswordSchema } from \"../../../lib/utils\"\nimport type { AuthLocalization } from \"../../../localization/auth-localization\"\nimport type { PasswordValidation } from \"../../../types/password-validation\"\nimport { PasswordInput } from \"../../password-input\"\nimport { CardContent } from \"../../ui/card\"\nimport {\n    Form,\n    FormControl,\n    FormField,\n    FormItem,\n    FormLabel,\n    FormMessage\n} from \"../../ui/form\"\nimport {\n    SettingsCard,\n    type SettingsCardClassNames\n} from \"../shared/settings-card\"\nimport { InputFieldSkeleton } from \"../skeletons/input-field-skeleton\"\n\nexport interface ChangePasswordCardProps {\n    className?: string\n    classNames?: SettingsCardClassNames\n    accounts?: { provider: string }[] | null\n    isPending?: boolean\n    localization?: AuthLocalization\n    skipHook?: boolean\n    passwordValidation?: PasswordValidation\n}\n\nexport function ChangePasswordCard({\n    className,\n    classNames,\n    accounts,\n    isPending,\n    localization,\n    skipHook,\n    passwordValidation\n}: ChangePasswordCardProps) {\n    const {\n        authClient,\n        basePath,\n        baseURL,\n        credentials,\n        hooks: { useSession, useListAccounts },\n        localization: contextLocalization,\n        viewPaths,\n        toast\n    } = useContext(AuthUIContext)\n\n    const confirmPasswordEnabled = credentials?.confirmPassword\n    const contextPasswordValidation = credentials?.passwordValidation\n\n    localization = { ...contextLocalization, ...localization }\n    passwordValidation = { ...contextPasswordValidation, ...passwordValidation }\n\n    const { data: sessionData } = useSession()\n\n    if (!skipHook) {\n        const result = useListAccounts()\n        accounts = result.data\n        isPending = result.isPending\n    }\n\n    const formSchema = z\n        .object({\n            currentPassword: getPasswordSchema(\n                passwordValidation,\n                localization\n            ),\n            newPassword: getPasswordSchema(passwordValidation, {\n                PASSWORD_REQUIRED: localization.NEW_PASSWORD_REQUIRED,\n                PASSWORD_TOO_SHORT: localization.PASSWORD_TOO_SHORT,\n                PASSWORD_TOO_LONG: localization.PASSWORD_TOO_LONG,\n                INVALID_PASSWORD: localization.INVALID_PASSWORD\n            }),\n            confirmPassword: confirmPasswordEnabled\n                ? getPasswordSchema(passwordValidation, {\n                      PASSWORD_REQUIRED: localization.CONFIRM_PASSWORD_REQUIRED,\n                      PASSWORD_TOO_SHORT: localization.PASSWORD_TOO_SHORT,\n                      PASSWORD_TOO_LONG: localization.PASSWORD_TOO_LONG,\n                      INVALID_PASSWORD: localization.INVALID_PASSWORD\n                  })\n                : z.string().optional()\n        })\n        .refine(\n            (data) =>\n                !confirmPasswordEnabled ||\n                data.newPassword === data.confirmPassword,\n            {\n                message: localization.PASSWORDS_DO_NOT_MATCH,\n                path: [\"confirmPassword\"]\n            }\n        )\n\n    const form = useForm({\n        resolver: zodResolver(formSchema),\n        defaultValues: {\n            currentPassword: \"\",\n            newPassword: \"\",\n            confirmPassword: \"\"\n        }\n    })\n\n    const setPasswordForm = useForm()\n\n    const { isSubmitting } = form.formState\n\n    const setPassword = async () => {\n        if (!sessionData) return\n        const email = sessionData?.user.email\n\n        try {\n            await authClient.requestPasswordReset({\n                email,\n                redirectTo: `${baseURL}${basePath}/${viewPaths.RESET_PASSWORD}`,\n                fetchOptions: { throw: true }\n            })\n\n            toast({\n                variant: \"success\",\n                message: localization.FORGOT_PASSWORD_EMAIL!\n            })\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n    }\n\n    const changePassword = async ({\n        currentPassword,\n        newPassword\n    }: z.infer<typeof formSchema>) => {\n        try {\n            await authClient.changePassword({\n                currentPassword,\n                newPassword,\n                revokeOtherSessions: true,\n                fetchOptions: { throw: true }\n            })\n\n            toast({\n                variant: \"success\",\n                message: localization.CHANGE_PASSWORD_SUCCESS!\n            })\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n\n        form.reset()\n    }\n\n    const credentialsLinked = accounts?.some(\n        (acc) => acc.provider === \"credential\"\n    )\n\n    if (!isPending && !credentialsLinked) {\n        return (\n            <Form {...setPasswordForm}>\n                <form onSubmit={setPasswordForm.handleSubmit(setPassword)}>\n                    <SettingsCard\n                        title={localization.SET_PASSWORD}\n                        description={localization.SET_PASSWORD_DESCRIPTION}\n                        actionLabel={localization.SET_PASSWORD}\n                        isPending={isPending}\n                        className={className}\n                        classNames={classNames}\n                    />\n                </form>\n            </Form>\n        )\n    }\n\n    return (\n        <Form {...form}>\n            <form onSubmit={form.handleSubmit(changePassword)}>\n                <SettingsCard\n                    className={className}\n                    classNames={classNames}\n                    actionLabel={localization.SAVE}\n                    description={localization.CHANGE_PASSWORD_DESCRIPTION}\n                    instructions={localization.CHANGE_PASSWORD_INSTRUCTIONS}\n                    isPending={isPending}\n                    title={localization.CHANGE_PASSWORD}\n                >\n                    <CardContent\n                        className={cn(\"grid gap-6\", classNames?.content)}\n                    >\n                        {isPending || !accounts ? (\n                            <>\n                                <InputFieldSkeleton classNames={classNames} />\n                                <InputFieldSkeleton classNames={classNames} />\n\n                                {confirmPasswordEnabled && (\n                                    <InputFieldSkeleton\n                                        classNames={classNames}\n                                    />\n                                )}\n                            </>\n                        ) : (\n                            <>\n                                <FormField\n                                    control={form.control}\n                                    name=\"currentPassword\"\n                                    render={({ field }) => (\n                                        <FormItem>\n                                            <FormLabel\n                                                className={classNames?.label}\n                                            >\n                                                {localization.CURRENT_PASSWORD}\n                                            </FormLabel>\n\n                                            <FormControl>\n                                                <PasswordInput\n                                                    className={\n                                                        classNames?.input\n                                                    }\n                                                    autoComplete=\"current-password\"\n                                                    placeholder={\n                                                        localization.CURRENT_PASSWORD_PLACEHOLDER\n                                                    }\n                                                    disabled={isSubmitting}\n                                                    {...field}\n                                                />\n                                            </FormControl>\n\n                                            <FormMessage\n                                                className={classNames?.error}\n                                            />\n                                        </FormItem>\n                                    )}\n                                />\n\n                                <FormField\n                                    control={form.control}\n                                    name=\"newPassword\"\n                                    render={({ field }) => (\n                                        <FormItem>\n                                            <FormLabel\n                                                className={classNames?.label}\n                                            >\n                                                {localization.NEW_PASSWORD}\n                                            </FormLabel>\n\n                                            <FormControl>\n                                                <PasswordInput\n                                                    className={\n                                                        classNames?.input\n                                                    }\n                                                    autoComplete=\"new-password\"\n                                                    disabled={isSubmitting}\n                                                    placeholder={\n                                                        localization.NEW_PASSWORD_PLACEHOLDER\n                                                    }\n                                                    enableToggle\n                                                    {...field}\n                                                />\n                                            </FormControl>\n\n                                            <FormMessage\n                                                className={classNames?.error}\n                                            />\n                                        </FormItem>\n                                    )}\n                                />\n\n                                {confirmPasswordEnabled && (\n                                    <FormField\n                                        control={form.control}\n                                        name=\"confirmPassword\"\n                                        render={({ field }) => (\n                                            <FormItem>\n                                                <FormLabel\n                                                    className={\n                                                        classNames?.label\n                                                    }\n                                                >\n                                                    {\n                                                        localization.CONFIRM_PASSWORD\n                                                    }\n                                                </FormLabel>\n\n                                                <FormControl>\n                                                    <PasswordInput\n                                                        className={\n                                                            classNames?.input\n                                                        }\n                                                        autoComplete=\"new-password\"\n                                                        placeholder={\n                                                            localization.CONFIRM_PASSWORD_PLACEHOLDER\n                                                        }\n                                                        disabled={isSubmitting}\n                                                        enableToggle\n                                                        {...field}\n                                                    />\n                                                </FormControl>\n\n                                                <FormMessage\n                                                    className={\n                                                        classNames?.error\n                                                    }\n                                                />\n                                            </FormItem>\n                                        )}\n                                    />\n                                )}\n                            </>\n                        )}\n                    </CardContent>\n                </SettingsCard>\n            </form>\n        </Form>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}