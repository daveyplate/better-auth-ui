{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "invite-member-dialog",
  "type": "registry:component",
  "title": "Invite Member Dialog",
  "description": "",
  "dependencies": [
    "@hookform/resolvers",
    "better-auth",
    "lucide-react",
    "react-hook-form",
    "zod"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "dialog",
    "form",
    "input",
    "select",
    "https://better-auth-ui.com/r/settings-card.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/organization/invite-member-dialog.tsx",
      "content": "\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport type { Organization } from \"better-auth/plugins/organization\"\nimport { Loader2 } from \"lucide-react\"\nimport { type ComponentProps, useContext, useMemo } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\nimport { AuthUIContext } from \"../../lib/auth-ui-provider\"\nimport { cn, getLocalizedError } from \"../../lib/utils\"\nimport type { AuthLocalization } from \"../../localization/auth-localization\"\nimport type { SettingsCardClassNames } from \"../settings/shared/settings-card\"\nimport { Button } from \"../ui/button\"\nimport {\n    Dialog,\n    DialogContent,\n    DialogDescription,\n    DialogFooter,\n    DialogHeader,\n    DialogTitle\n} from \"../ui/dialog\"\nimport {\n    Form,\n    FormControl,\n    FormField,\n    FormItem,\n    FormLabel,\n    FormMessage\n} from \"../ui/form\"\nimport { Input } from \"../ui/input\"\nimport {\n    Select,\n    SelectContent,\n    SelectItem,\n    SelectTrigger,\n    SelectValue\n} from \"../ui/select\"\n\nexport interface InviteMemberDialogProps extends ComponentProps<typeof Dialog> {\n    classNames?: SettingsCardClassNames\n    localization?: AuthLocalization\n    organization: Organization\n}\n\nexport function InviteMemberDialog({\n    classNames,\n    localization: localizationProp,\n    onOpenChange,\n    organization,\n    ...props\n}: InviteMemberDialogProps) {\n    const {\n        authClient,\n        hooks: { useListInvitations, useListMembers, useSession },\n        localization: contextLocalization,\n        toast,\n        organization: organizationOptions\n    } = useContext(AuthUIContext)\n\n    const localization = useMemo(\n        () => ({ ...contextLocalization, ...localizationProp }),\n        [contextLocalization, localizationProp]\n    )\n\n    const { data } = useListMembers({\n        query: { organizationId: organization.id }\n    })\n\n    const { refetch } = useListInvitations({\n        query: { organizationId: organization.id }\n    })\n\n    const members = data?.members\n\n    const { data: sessionData } = useSession()\n    const membership = members?.find((m) => m.userId === sessionData?.user.id)\n\n    const builtInRoles = [\n        { role: \"owner\", label: localization.OWNER },\n        { role: \"admin\", label: localization.ADMIN },\n        { role: \"member\", label: localization.MEMBER }\n    ] as const\n\n    const roles = [...builtInRoles, ...(organizationOptions?.customRoles || [])]\n    const availableRoles = roles.filter(\n        (role) => membership?.role === \"owner\" || role.role !== \"owner\"\n    )\n\n    const formSchema = z.object({\n        email: z\n            .string()\n            .min(1, { message: localization.EMAIL_REQUIRED })\n            .email({\n                message: localization.INVALID_EMAIL\n            }),\n        role: z.string().min(1, {\n            message: `${localization.ROLE} ${localization.IS_REQUIRED}`\n        })\n    })\n\n    const form = useForm({\n        resolver: zodResolver(formSchema),\n        defaultValues: {\n            email: \"\",\n            role: \"member\"\n        }\n    })\n\n    const isSubmitting = form.formState.isSubmitting\n\n    async function onSubmit({ email, role }: z.infer<typeof formSchema>) {\n        try {\n            await authClient.organization.inviteMember({\n                email,\n                role: role as (typeof builtInRoles)[number][\"role\"],\n                organizationId: organization.id,\n                fetchOptions: { throw: true }\n            })\n\n            await refetch?.()\n\n            onOpenChange?.(false)\n            form.reset()\n\n            toast({\n                variant: \"success\",\n                message:\n                    localization.SEND_INVITATION_SUCCESS ||\n                    \"Invitation sent successfully\"\n            })\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n    }\n\n    return (\n        <Dialog onOpenChange={onOpenChange} {...props}>\n            <DialogContent className={classNames?.dialog?.content}>\n                <DialogHeader className={classNames?.dialog?.header}>\n                    <DialogTitle\n                        className={cn(\"text-lg md:text-xl\", classNames?.title)}\n                    >\n                        {localization.INVITE_MEMBER}\n                    </DialogTitle>\n\n                    <DialogDescription\n                        className={cn(\n                            \"text-xs md:text-sm\",\n                            classNames?.description\n                        )}\n                    >\n                        {localization.INVITE_MEMBER_DESCRIPTION}\n                    </DialogDescription>\n                </DialogHeader>\n\n                <Form {...form}>\n                    <form\n                        onSubmit={form.handleSubmit(onSubmit)}\n                        className=\"space-y-6\"\n                    >\n                        <FormField\n                            control={form.control}\n                            name=\"email\"\n                            render={({ field }) => (\n                                <FormItem>\n                                    <FormLabel className={classNames?.label}>\n                                        {localization.EMAIL}\n                                    </FormLabel>\n\n                                    <FormControl>\n                                        <Input\n                                            placeholder={\n                                                localization.EMAIL_PLACEHOLDER\n                                            }\n                                            type=\"email\"\n                                            {...field}\n                                            className={classNames?.input}\n                                        />\n                                    </FormControl>\n\n                                    <FormMessage />\n                                </FormItem>\n                            )}\n                        />\n\n                        <FormField\n                            control={form.control}\n                            name=\"role\"\n                            render={({ field }) => (\n                                <FormItem>\n                                    <FormLabel className={classNames?.label}>\n                                        {localization.ROLE}\n                                    </FormLabel>\n\n                                    <Select\n                                        onValueChange={field.onChange}\n                                        defaultValue={field.value}\n                                    >\n                                        <FormControl>\n                                            <SelectTrigger>\n                                                <SelectValue />\n                                            </SelectTrigger>\n                                        </FormControl>\n\n                                        <SelectContent>\n                                            {availableRoles.map((role) => (\n                                                <SelectItem\n                                                    key={role.role}\n                                                    value={role.role}\n                                                >\n                                                    {role.label}\n                                                </SelectItem>\n                                            ))}\n                                        </SelectContent>\n                                    </Select>\n\n                                    <FormMessage />\n                                </FormItem>\n                            )}\n                        />\n\n                        <DialogFooter className={classNames?.dialog?.footer}>\n                            <Button\n                                type=\"button\"\n                                variant=\"outline\"\n                                onClick={() => onOpenChange?.(false)}\n                                className={cn(\n                                    classNames?.button,\n                                    classNames?.outlineButton\n                                )}\n                            >\n                                {localization.CANCEL}\n                            </Button>\n\n                            <Button\n                                type=\"submit\"\n                                className={cn(\n                                    classNames?.button,\n                                    classNames?.primaryButton\n                                )}\n                                disabled={isSubmitting}\n                            >\n                                {isSubmitting && (\n                                    <Loader2 className=\"animate-spin\" />\n                                )}\n\n                                {localization.SEND_INVITATION}\n                            </Button>\n                        </DialogFooter>\n                    </form>\n                </Form>\n            </DialogContent>\n        </Dialog>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}