{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "user-invitations-card",
  "type": "registry:component",
  "title": "User Invitations Card",
  "description": "",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "card",
    "dropdown-menu",
    "https://better-auth-ui.com/r/settings-card.json",
    "https://better-auth-ui.com/r/user-avatar.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/organization/user-invitations-card.tsx",
      "content": "\"use client\"\n\nimport { CheckIcon, EllipsisIcon, Loader2, XIcon } from \"lucide-react\"\nimport { useContext, useMemo, useState } from \"react\"\n\nimport { AuthUIContext } from \"../../lib/auth-ui-provider\"\nimport { cn, getLocalizedError } from \"../../lib/utils\"\nimport type { SettingsCardProps } from \"../settings/shared/settings-card\"\nimport { SettingsCard } from \"../settings/shared/settings-card\"\nimport { Button } from \"../ui/button\"\nimport { Card, CardContent } from \"../ui/card\"\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger\n} from \"../ui/dropdown-menu\"\nimport { UserAvatar } from \"../user-avatar\"\n\nexport function UserInvitationsCard({\n    className,\n    classNames,\n    localization: localizationProp,\n    ...props\n}: SettingsCardProps) {\n    const {\n        hooks: { useListUserInvitations, useListOrganizations },\n        localization: contextLocalization\n    } = useContext(AuthUIContext)\n\n    const localization = useMemo(\n        () => ({ ...contextLocalization, ...localizationProp }),\n        [contextLocalization, localizationProp]\n    )\n\n    const { data: invitations, refetch: refetchInvitations } =\n        useListUserInvitations()\n    const { refetch: refetchOrganizations } = useListOrganizations()\n\n    const handleRefresh = async () => {\n        await refetchInvitations?.()\n        await refetchOrganizations?.()\n    }\n\n    const pendingInvitations = invitations?.filter(\n        (invitation) => invitation.status === \"pending\"\n    )\n\n    if (!pendingInvitations?.length) return null\n\n    return (\n        <SettingsCard\n            className={className}\n            classNames={classNames}\n            title={localization.PENDING_INVITATIONS}\n            description={\n                localization.PENDING_USER_INVITATIONS_DESCRIPTION ||\n                localization.PENDING_INVITATIONS_DESCRIPTION\n            }\n            {...props}\n        >\n            <CardContent className={cn(\"grid gap-4\", classNames?.content)}>\n                {pendingInvitations.map((invitation) => (\n                    <UserInvitationRow\n                        key={invitation.id}\n                        classNames={classNames}\n                        invitation={{\n                            id: invitation.id,\n                            email: invitation.email,\n                            role: invitation.role,\n                            status: invitation.status,\n                            expiresAt: invitation.expiresAt\n                        }}\n                        onChanged={handleRefresh}\n                    />\n                ))}\n            </CardContent>\n        </SettingsCard>\n    )\n}\n\nfunction UserInvitationRow({\n    classNames,\n    invitation,\n    onChanged\n}: {\n    classNames?: SettingsCardProps[\"classNames\"]\n    invitation: {\n        id: string\n        email: string\n        role: string\n        status: string\n        expiresAt: Date\n    }\n    onChanged?: () => unknown\n}) {\n    const {\n        authClient,\n        organization: organizationOptions,\n        localization: contextLocalization,\n        toast\n    } = useContext(AuthUIContext)\n\n    const localization = contextLocalization\n\n    const [isLoading, setIsLoading] = useState(false)\n\n    const builtInRoles = [\n        { role: \"owner\", label: localization.OWNER },\n        { role: \"admin\", label: localization.ADMIN },\n        { role: \"member\", label: localization.MEMBER }\n    ]\n\n    const roles = [...builtInRoles, ...(organizationOptions?.customRoles || [])]\n    const role = roles.find((r) => r.role === invitation.role)\n\n    const handleAccept = async () => {\n        setIsLoading(true)\n\n        try {\n            await authClient.organization.acceptInvitation({\n                invitationId: invitation.id,\n                fetchOptions: { throw: true }\n            })\n\n            await onChanged?.()\n\n            toast({\n                variant: \"success\",\n                message: localization.INVITATION_ACCEPTED\n            })\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n\n        setIsLoading(false)\n    }\n\n    const handleReject = async () => {\n        setIsLoading(true)\n\n        try {\n            await authClient.organization.rejectInvitation({\n                invitationId: invitation.id,\n                fetchOptions: { throw: true }\n            })\n\n            await onChanged?.()\n\n            toast({\n                variant: \"success\",\n                message: localization.INVITATION_REJECTED\n            })\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n\n        setIsLoading(false)\n    }\n\n    return (\n        <Card className={cn(\"flex-row items-center p-4\", classNames?.cell)}>\n            <div className=\"flex flex-1 items-center gap-2\">\n                <UserAvatar\n                    className=\"my-0.5\"\n                    user={{ email: invitation.email }}\n                    localization={localization}\n                />\n\n                <div className=\"grid flex-1 text-left leading-tight\">\n                    <span className=\"truncate font-semibold text-sm\">\n                        {invitation.email}\n                    </span>\n\n                    <span className=\"truncate text-muted-foreground text-xs\">\n                        {localization.EXPIRES}{\" \"}\n                        {invitation.expiresAt.toLocaleDateString()}\n                    </span>\n                </div>\n            </div>\n\n            <span className=\"truncate text-sm opacity-70\">{role?.label}</span>\n\n            <div className=\"flex items-center gap-2\">\n                <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                        <Button\n                            className={cn(\n                                \"relative ms-auto\",\n                                classNames?.button,\n                                classNames?.outlineButton\n                            )}\n                            disabled={isLoading}\n                            size=\"icon\"\n                            type=\"button\"\n                            variant=\"outline\"\n                        >\n                            {isLoading ? (\n                                <Loader2 className=\"animate-spin\" />\n                            ) : (\n                                <EllipsisIcon className={classNames?.icon} />\n                            )}\n                        </Button>\n                    </DropdownMenuTrigger>\n\n                    <DropdownMenuContent\n                        onCloseAutoFocus={(e) => e.preventDefault()}\n                    >\n                        <DropdownMenuItem\n                            onClick={handleAccept}\n                            disabled={isLoading}\n                        >\n                            <CheckIcon className={classNames?.icon} />\n\n                            {localization.ACCEPT}\n                        </DropdownMenuItem>\n\n                        <DropdownMenuItem\n                            onClick={handleReject}\n                            disabled={isLoading}\n                            variant=\"destructive\"\n                        >\n                            <XIcon className={classNames?.icon} />\n\n                            {localization.REJECT}\n                        </DropdownMenuItem>\n                    </DropdownMenuContent>\n                </DropdownMenu>\n            </div>\n        </Card>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}