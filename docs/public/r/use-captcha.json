{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "use-captcha",
  "type": "registry:hook",
  "title": "Use Captcha",
  "description": "",
  "dependencies": [
    "@hcaptcha/react-hcaptcha",
    "@marsidev/react-turnstile",
    "@wojtekmaj/react-recaptcha-v3",
    "react-google-recaptcha"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json"
  ],
  "files": [
    {
      "path": "src/hooks/use-captcha.tsx",
      "content": "import type HCaptcha from \"@hcaptcha/react-hcaptcha\"\nimport type { TurnstileInstance } from \"@marsidev/react-turnstile\"\nimport { useGoogleReCaptcha } from \"@wojtekmaj/react-recaptcha-v3\"\nimport { type RefObject, useContext, useRef } from \"react\"\nimport type ReCAPTCHA from \"react-google-recaptcha\"\n\nimport { AuthUIContext } from \"../lib/auth-ui-provider\"\nimport type { AuthLocalization } from \"../localization/auth-localization\"\n\n// Default captcha endpoints\nconst DEFAULT_CAPTCHA_ENDPOINTS = [\n    \"/sign-up/email\",\n    \"/sign-in/email\",\n    \"/forget-password\"\n]\n\n// Sanitize action name for reCAPTCHA\n// Google reCAPTCHA only allows A-Za-z/_ in action names\nconst sanitizeActionName = (action: string): string => {\n    // First remove leading slash if present\n    let result = action.startsWith(\"/\") ? action.substring(1) : action\n\n    // Convert both kebab-case and path separators to camelCase\n    // Example: \"/sign-in/email\" becomes \"signInEmail\"\n    result = result\n        .replace(/-([a-z])/g, (_, letter) => letter.toUpperCase())\n        .replace(/\\/([a-z])/g, (_, letter) => letter.toUpperCase())\n        .replace(/\\//g, \"\")\n        .replace(/[^A-Za-z0-9_]/g, \"\")\n\n    return result\n}\n\nexport function useCaptcha({\n    localization\n}: {\n    localization: Partial<AuthLocalization>\n}) {\n    const { captcha, localization: contextLocalization } =\n        useContext(AuthUIContext)\n\n    localization = { ...contextLocalization, ...localization }\n\n    // biome-ignore lint/suspicious/noExplicitAny: ignore\n    const captchaRef = useRef<any>(null)\n    const { executeRecaptcha } = useGoogleReCaptcha()\n\n    const executeCaptcha = async (action: string) => {\n        if (!captcha) throw new Error(localization.MISSING_RESPONSE)\n\n        // Sanitize the action name for reCAPTCHA\n        let response: string | undefined | null\n\n        switch (captcha.provider) {\n            case \"google-recaptcha-v3\": {\n                const sanitizedAction = sanitizeActionName(action)\n                response = await executeRecaptcha?.(sanitizedAction)\n                break\n            }\n            case \"google-recaptcha-v2-checkbox\": {\n                const recaptchaRef = captchaRef as RefObject<ReCAPTCHA>\n                response = recaptchaRef.current.getValue()\n                break\n            }\n            case \"google-recaptcha-v2-invisible\": {\n                const recaptchaRef = captchaRef as RefObject<ReCAPTCHA>\n                response = await recaptchaRef.current.executeAsync()\n                break\n            }\n            case \"cloudflare-turnstile\": {\n                const turnstileRef = captchaRef as RefObject<TurnstileInstance>\n                response = turnstileRef.current.getResponse()\n                break\n            }\n            case \"hcaptcha\": {\n                const hcaptchaRef = captchaRef as RefObject<HCaptcha>\n                response = hcaptchaRef.current.getResponse()\n                break\n            }\n        }\n\n        if (!response) {\n            throw new Error(localization.MISSING_RESPONSE)\n        }\n\n        return response\n    }\n\n    const getCaptchaHeaders = async (action: string) => {\n        if (!captcha) return undefined\n\n        // Use custom endpoints if provided, otherwise use defaults\n        const endpoints = captcha.endpoints || DEFAULT_CAPTCHA_ENDPOINTS\n\n        // Only execute captcha if the action is in the endpoints list\n        if (endpoints.includes(action)) {\n            return { \"x-captcha-response\": await executeCaptcha(action) }\n        }\n\n        return undefined\n    }\n\n    const resetCaptcha = () => {\n        if (!captcha) return\n\n        switch (captcha.provider) {\n            case \"google-recaptcha-v3\": {\n                // No widget to reset; token is generated per execute call\n                break\n            }\n            case \"google-recaptcha-v2-checkbox\":\n            case \"google-recaptcha-v2-invisible\": {\n                const recaptchaRef = captchaRef as RefObject<ReCAPTCHA>\n                recaptchaRef.current?.reset?.()\n                break\n            }\n            case \"cloudflare-turnstile\": {\n                const turnstileRef = captchaRef as RefObject<TurnstileInstance>\n                // Some versions expose reset on the instance\n                // biome-ignore lint/suspicious/noExplicitAny: defensive\n                ;(turnstileRef.current as any)?.reset?.()\n                break\n            }\n            case \"hcaptcha\": {\n                const hcaptchaRef = captchaRef as RefObject<HCaptcha>\n                // HCaptcha uses resetCaptcha()\n                hcaptchaRef.current?.resetCaptcha?.()\n                break\n            }\n        }\n    }\n\n    return {\n        captchaRef,\n        getCaptchaHeaders,\n        resetCaptcha\n    }\n}\n",
      "type": "registry:hook"
    }
  ]
}