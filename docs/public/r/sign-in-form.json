{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sign-in-form",
  "type": "registry:component",
  "title": "Sign In Form",
  "description": "",
  "dependencies": [
    "@better-fetch/fetch",
    "@hookform/resolvers",
    "lucide-react",
    "react-hook-form",
    "zod"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-form.json",
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "https://better-auth-ui.com/r/captcha.json",
    "checkbox",
    "form",
    "input",
    "https://better-auth-ui.com/r/password-input.json",
    "https://better-auth-ui.com/r/password-validation.json",
    "https://better-auth-ui.com/r/use-captcha.json",
    "https://better-auth-ui.com/r/use-hydrated.json",
    "https://better-auth-ui.com/r/use-success-transition.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/auth/forms/sign-in-form.tsx",
      "content": "\"use client\"\n\nimport type { BetterFetchOption } from \"@better-fetch/fetch\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { Loader2 } from \"lucide-react\"\nimport { useContext, useEffect } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n\nimport { useCaptcha } from \"../../../hooks/use-captcha\"\nimport { useIsHydrated } from \"../../../hooks/use-hydrated\"\nimport { useOnSuccessTransition } from \"../../../hooks/use-success-transition\"\nimport { AuthUIContext } from \"../../../lib/auth-ui-provider\"\nimport {\n    cn,\n    getLocalizedError,\n    getPasswordSchema,\n    isValidEmail\n} from \"../../../lib/utils\"\nimport type { AuthLocalization } from \"../../../localization/auth-localization\"\nimport type { PasswordValidation } from \"../../../types/password-validation\"\nimport { Captcha } from \"../../captcha/captcha\"\nimport { PasswordInput } from \"../../password-input\"\nimport { Button } from \"../../ui/button\"\nimport { Checkbox } from \"../../ui/checkbox\"\nimport {\n    Form,\n    FormControl,\n    FormField,\n    FormItem,\n    FormLabel,\n    FormMessage\n} from \"../../ui/form\"\nimport { Input } from \"../../ui/input\"\nimport type { AuthFormClassNames } from \"../auth-form\"\n\nexport interface SignInFormProps {\n    className?: string\n    classNames?: AuthFormClassNames\n    isSubmitting?: boolean\n    localization: Partial<AuthLocalization>\n    redirectTo?: string\n    setIsSubmitting?: (isSubmitting: boolean) => void\n    passwordValidation?: PasswordValidation\n}\n\nexport function SignInForm({\n    className,\n    classNames,\n    isSubmitting,\n    localization,\n    redirectTo,\n    setIsSubmitting,\n    passwordValidation\n}: SignInFormProps) {\n    const isHydrated = useIsHydrated()\n    const { captchaRef, getCaptchaHeaders, resetCaptcha } = useCaptcha({\n        localization\n    })\n\n    const {\n        authClient,\n        basePath,\n        credentials,\n        localization: contextLocalization,\n        viewPaths,\n        navigate,\n        toast,\n        Link\n    } = useContext(AuthUIContext)\n\n    const rememberMeEnabled = credentials?.rememberMe\n    const usernameEnabled = credentials?.username\n    const contextPasswordValidation = credentials?.passwordValidation\n\n    localization = { ...contextLocalization, ...localization }\n    passwordValidation = { ...contextPasswordValidation, ...passwordValidation }\n\n    const { onSuccess, isPending: transitionPending } = useOnSuccessTransition({\n        redirectTo\n    })\n\n    const formSchema = z.object({\n        email: usernameEnabled\n            ? z.string().min(1, {\n                  message: `${localization.USERNAME} ${localization.IS_REQUIRED}`\n              })\n            : z\n                  .string()\n                  .min(1, {\n                      message: `${localization.EMAIL} ${localization.IS_REQUIRED}`\n                  })\n                  .email({\n                      message: `${localization.EMAIL} ${localization.IS_INVALID}`\n                  }),\n        password: getPasswordSchema(passwordValidation, localization),\n        rememberMe: z.boolean().optional()\n    })\n\n    const form = useForm({\n        resolver: zodResolver(formSchema),\n        defaultValues: {\n            email: \"\",\n            password: \"\",\n            rememberMe: !rememberMeEnabled\n        }\n    })\n\n    isSubmitting =\n        isSubmitting || form.formState.isSubmitting || transitionPending\n\n    useEffect(() => {\n        setIsSubmitting?.(form.formState.isSubmitting || transitionPending)\n    }, [form.formState.isSubmitting, transitionPending, setIsSubmitting])\n\n    async function signIn({\n        email,\n        password,\n        rememberMe\n    }: z.infer<typeof formSchema>) {\n        try {\n            let response: Record<string, unknown> = {}\n\n            if (usernameEnabled && !isValidEmail(email)) {\n                const fetchOptions: BetterFetchOption = {\n                    throw: true,\n                    headers: await getCaptchaHeaders(\"/sign-in/username\")\n                }\n\n                response = await authClient.signIn.username({\n                    username: email,\n                    password,\n                    rememberMe,\n                    fetchOptions\n                })\n            } else {\n                const fetchOptions: BetterFetchOption = {\n                    throw: true,\n                    headers: await getCaptchaHeaders(\"/sign-in/email\")\n                }\n\n                response = await authClient.signIn.email({\n                    email,\n                    password,\n                    rememberMe,\n                    fetchOptions\n                })\n            }\n\n            if (response.twoFactorRedirect) {\n                navigate(\n                    `${basePath}/${viewPaths.TWO_FACTOR}${window.location.search}`\n                )\n            } else {\n                await onSuccess()\n            }\n        } catch (error) {\n            form.resetField(\"password\")\n            resetCaptcha()\n\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n    }\n\n    return (\n        <Form {...form}>\n            <form\n                onSubmit={form.handleSubmit(signIn)}\n                noValidate={isHydrated}\n                className={cn(\"grid w-full gap-6\", className, classNames?.base)}\n            >\n                <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                        <FormItem>\n                            <FormLabel className={classNames?.label}>\n                                {usernameEnabled\n                                    ? localization.USERNAME\n                                    : localization.EMAIL}\n                            </FormLabel>\n\n                            <FormControl>\n                                <Input\n                                    autoComplete={\n                                        usernameEnabled ? \"username\" : \"email\"\n                                    }\n                                    className={classNames?.input}\n                                    type={usernameEnabled ? \"text\" : \"email\"}\n                                    placeholder={\n                                        usernameEnabled\n                                            ? localization.SIGN_IN_USERNAME_PLACEHOLDER\n                                            : localization.EMAIL_PLACEHOLDER\n                                    }\n                                    disabled={isSubmitting}\n                                    {...field}\n                                />\n                            </FormControl>\n\n                            <FormMessage className={classNames?.error} />\n                        </FormItem>\n                    )}\n                />\n\n                <FormField\n                    control={form.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                        <FormItem>\n                            <div className=\"flex items-center justify-between\">\n                                <FormLabel className={classNames?.label}>\n                                    {localization.PASSWORD}\n                                </FormLabel>\n\n                                {credentials?.forgotPassword && (\n                                    <Link\n                                        className={cn(\n                                            \"text-sm hover:underline\",\n                                            classNames?.forgotPasswordLink\n                                        )}\n                                        href={`${basePath}/${viewPaths.FORGOT_PASSWORD}${isHydrated ? window.location.search : \"\"}`}\n                                    >\n                                        {localization.FORGOT_PASSWORD_LINK}\n                                    </Link>\n                                )}\n                            </div>\n\n                            <FormControl>\n                                <PasswordInput\n                                    autoComplete=\"current-password\"\n                                    className={classNames?.input}\n                                    placeholder={\n                                        localization.PASSWORD_PLACEHOLDER\n                                    }\n                                    disabled={isSubmitting}\n                                    {...field}\n                                />\n                            </FormControl>\n\n                            <FormMessage className={classNames?.error} />\n                        </FormItem>\n                    )}\n                />\n\n                {rememberMeEnabled && (\n                    <FormField\n                        control={form.control}\n                        name=\"rememberMe\"\n                        render={({ field }) => (\n                            <FormItem className=\"flex\">\n                                <FormControl>\n                                    <Checkbox\n                                        checked={field.value}\n                                        onCheckedChange={field.onChange}\n                                        disabled={isSubmitting}\n                                    />\n                                </FormControl>\n\n                                <FormLabel>\n                                    {localization.REMEMBER_ME}\n                                </FormLabel>\n                            </FormItem>\n                        )}\n                    />\n                )}\n\n                <Captcha\n                    ref={captchaRef}\n                    localization={localization}\n                    action=\"/sign-in/email\"\n                />\n\n                <Button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    className={cn(\n                        \"w-full\",\n                        classNames?.button,\n                        classNames?.primaryButton\n                    )}\n                >\n                    {isSubmitting ? (\n                        <Loader2 className=\"animate-spin\" />\n                    ) : (\n                        localization.SIGN_IN_ACTION\n                    )}\n                </Button>\n            </form>\n        </Form>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}