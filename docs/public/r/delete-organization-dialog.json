{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "delete-organization-dialog",
  "type": "registry:component",
  "title": "Delete Organization Dialog",
  "description": "",
  "dependencies": [
    "@hookform/resolvers",
    "better-auth",
    "lucide-react",
    "react-hook-form",
    "zod"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "card",
    "dialog",
    "form",
    "input",
    "https://better-auth-ui.com/r/organization-cell-view.json",
    "https://better-auth-ui.com/r/settings-card.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/organization/delete-organization-dialog.tsx",
      "content": "\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport type { Organization } from \"better-auth/plugins/organization\"\nimport { Loader2 } from \"lucide-react\"\nimport { type ComponentProps, useContext, useMemo } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n\nimport { AuthUIContext } from \"../../lib/auth-ui-provider\"\nimport { cn, getLocalizedError } from \"../../lib/utils\"\nimport type { AuthLocalization } from \"../../localization/auth-localization\"\nimport type { SettingsCardClassNames } from \"../settings/shared/settings-card\"\nimport { Button } from \"../ui/button\"\nimport { Card } from \"../ui/card\"\nimport {\n    Dialog,\n    DialogContent,\n    DialogDescription,\n    DialogFooter,\n    DialogHeader,\n    DialogTitle\n} from \"../ui/dialog\"\nimport {\n    Form,\n    FormControl,\n    FormField,\n    FormItem,\n    FormLabel,\n    FormMessage\n} from \"../ui/form\"\nimport { Input } from \"../ui/input\"\nimport { OrganizationCellView } from \"./organization-cell-view\"\n\nexport interface DeleteOrganizationDialogProps\n    extends ComponentProps<typeof Dialog> {\n    classNames?: SettingsCardClassNames\n    localization?: AuthLocalization\n    organization: Organization\n}\n\nexport function DeleteOrganizationDialog({\n    classNames,\n    localization: localizationProp,\n    onOpenChange,\n    organization,\n    ...props\n}: DeleteOrganizationDialogProps) {\n    const {\n        authClient,\n        account: accountOptions,\n        hooks: { useListOrganizations },\n        localization: contextLocalization,\n        navigate,\n        toast\n    } = useContext(AuthUIContext)\n\n    const localization = useMemo(\n        () => ({ ...contextLocalization, ...localizationProp }),\n        [contextLocalization, localizationProp]\n    )\n\n    const { refetch: refetchOrganizations } = useListOrganizations()\n\n    const formSchema = z.object({\n        slug: z\n            .string()\n            .min(1, { message: localization.SLUG_REQUIRED! })\n            .refine((val) => val === organization.slug, {\n                message: localization.SLUG_DOES_NOT_MATCH!\n            })\n    })\n\n    const form = useForm({\n        resolver: zodResolver(formSchema),\n        defaultValues: {\n            slug: \"\"\n        }\n    })\n\n    const { isSubmitting } = form.formState\n\n    const deleteOrganization = async () => {\n        try {\n            await authClient.organization.delete({\n                organizationId: organization.id,\n                fetchOptions: { throw: true }\n            })\n\n            await refetchOrganizations?.()\n\n            toast({\n                variant: \"success\",\n                message: localization.DELETE_ORGANIZATION_SUCCESS!\n            })\n\n            navigate(\n                `${accountOptions?.basePath}/${accountOptions?.viewPaths.ORGANIZATIONS}`\n            )\n\n            onOpenChange?.(false)\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n    }\n\n    return (\n        <Dialog onOpenChange={onOpenChange} {...props}>\n            <DialogContent\n                className={cn(\"sm:max-w-md\", classNames?.dialog?.content)}\n            >\n                <DialogHeader className={classNames?.dialog?.header}>\n                    <DialogTitle\n                        className={cn(\"text-lg md:text-xl\", classNames?.title)}\n                    >\n                        {localization?.DELETE_ORGANIZATION}\n                    </DialogTitle>\n\n                    <DialogDescription\n                        className={cn(\n                            \"text-xs md:text-sm\",\n                            classNames?.description\n                        )}\n                    >\n                        {localization?.DELETE_ORGANIZATION_DESCRIPTION}\n                    </DialogDescription>\n                </DialogHeader>\n\n                <Card className={cn(\"my-2 flex-row p-4\", classNames?.cell)}>\n                    <OrganizationCellView\n                        organization={organization}\n                        localization={localization}\n                    />\n                </Card>\n\n                <Form {...form}>\n                    <form\n                        onSubmit={form.handleSubmit(deleteOrganization)}\n                        className=\"grid gap-6\"\n                    >\n                        <FormField\n                            control={form.control}\n                            name=\"slug\"\n                            render={({ field }) => (\n                                <FormItem>\n                                    <FormLabel className={classNames?.label}>\n                                        {\n                                            localization?.DELETE_ORGANIZATION_INSTRUCTIONS\n                                        }\n\n                                        <span className=\"font-bold\">\n                                            {organization.slug}\n                                        </span>\n                                    </FormLabel>\n\n                                    <FormControl>\n                                        <Input\n                                            placeholder={organization.slug}\n                                            className={classNames?.input}\n                                            autoComplete=\"off\"\n                                            {...field}\n                                        />\n                                    </FormControl>\n\n                                    <FormMessage\n                                        className={classNames?.error}\n                                    />\n                                </FormItem>\n                            )}\n                        />\n\n                        <DialogFooter className={classNames?.dialog?.footer}>\n                            <Button\n                                type=\"button\"\n                                variant=\"secondary\"\n                                className={cn(\n                                    classNames?.button,\n                                    classNames?.secondaryButton\n                                )}\n                                onClick={() => onOpenChange?.(false)}\n                            >\n                                {localization.CANCEL}\n                            </Button>\n\n                            <Button\n                                className={cn(\n                                    classNames?.button,\n                                    classNames?.destructiveButton\n                                )}\n                                disabled={isSubmitting}\n                                variant=\"destructive\"\n                                type=\"submit\"\n                            >\n                                {isSubmitting && (\n                                    <Loader2 className=\"animate-spin\" />\n                                )}\n\n                                {localization?.DELETE_ORGANIZATION}\n                            </Button>\n                        </DialogFooter>\n                    </form>\n                </Form>\n            </DialogContent>\n        </Dialog>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}