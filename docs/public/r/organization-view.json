{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "organization-view",
  "type": "registry:component",
  "title": "Organization View",
  "description": "",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/account-view.json",
    "https://better-auth-ui.com/r/api-keys-card.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "drawer",
    "label",
    "https://better-auth-ui.com/r/organization-invitations-card.json",
    "https://better-auth-ui.com/r/organization-members-card.json",
    "https://better-auth-ui.com/r/organization-settings-cards.json",
    "https://better-auth-ui.com/r/use-current-organization.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/organization/organization-view.tsx",
      "content": "\"use client\"\n\nimport { MenuIcon } from \"lucide-react\"\nimport { useContext, useEffect, useMemo } from \"react\"\n\nimport { useCurrentOrganization } from \"../../hooks/use-current-organization\"\nimport { AuthUIContext } from \"../../lib/auth-ui-provider\"\nimport { cn, getViewByPath } from \"../../lib/utils\"\nimport type { OrganizationViewPath } from \"../../server\"\nimport type { AccountViewProps } from \"../account/account-view\"\nimport { ApiKeysCard } from \"../settings/api-key/api-keys-card\"\nimport { Button } from \"../ui/button\"\nimport {\n    Drawer,\n    DrawerContent,\n    DrawerHeader,\n    DrawerTitle,\n    DrawerTrigger\n} from \"../ui/drawer\"\nimport { Label } from \"../ui/label\"\nimport { OrganizationInvitationsCard } from \"./organization-invitations-card\"\nimport { OrganizationMembersCard } from \"./organization-members-card\"\nimport { OrganizationSettingsCards } from \"./organization-settings-cards\"\n\nexport type OrganizationViewPageProps = Omit<AccountViewProps, \"view\"> & {\n    slug?: string\n    view?: OrganizationViewPath\n}\n\nexport function OrganizationView({\n    className,\n    classNames,\n    localization: localizationProp,\n    pathname,\n    view: viewProp,\n    hideNav,\n    slug: slugProp\n}: OrganizationViewPageProps) {\n    const {\n        organization: organizationOptions,\n        localization: contextLocalization,\n        account: accountOptions,\n        Link,\n        replace\n    } = useContext(AuthUIContext)\n\n    const { slug: contextSlug, viewPaths, apiKey } = organizationOptions || {}\n\n    const localization = useMemo(\n        () => ({ ...contextLocalization, ...localizationProp }),\n        [contextLocalization, localizationProp]\n    )\n\n    const view = viewProp || getViewByPath(viewPaths!, pathname) || \"SETTINGS\"\n\n    const slug = slugProp || contextSlug\n\n    const {\n        data: organization,\n        isPending: organizationPending,\n        isRefetching: organizationRefetching\n    } = useCurrentOrganization({ slug })\n\n    const navItems: {\n        view: OrganizationViewPath\n        label: string\n    }[] = [\n        { view: \"SETTINGS\", label: localization.SETTINGS },\n        { view: \"MEMBERS\", label: localization.MEMBERS }\n    ]\n\n    if (apiKey) {\n        navItems.push({\n            view: \"API_KEYS\",\n            label: localization.API_KEYS\n        })\n    }\n\n    useEffect(() => {\n        if (organization || organizationPending || organizationRefetching)\n            return\n\n        replace(\n            `${accountOptions?.basePath}/${accountOptions?.viewPaths?.ORGANIZATIONS}`\n        )\n    }, [\n        organization,\n        organizationPending,\n        organizationRefetching,\n        accountOptions?.basePath,\n        accountOptions?.viewPaths?.ORGANIZATIONS,\n        replace\n    ])\n\n    return (\n        <div\n            className={cn(\n                \"flex w-full grow flex-col gap-4 md:flex-row md:gap-12\",\n                className,\n                classNames?.base\n            )}\n        >\n            {!hideNav && (\n                <div className=\"flex justify-between gap-2 md:hidden\">\n                    <Label className=\"font-semibold text-base\">\n                        {navItems.find((i) => i.view === view)?.label}\n                    </Label>\n\n                    <Drawer>\n                        <DrawerTrigger asChild>\n                            <Button variant=\"outline\">\n                                <MenuIcon />\n                            </Button>\n                        </DrawerTrigger>\n\n                        <DrawerContent>\n                            <DrawerHeader>\n                                <DrawerTitle className=\"hidden\">\n                                    {localization.ORGANIZATION}\n                                </DrawerTitle>\n                            </DrawerHeader>\n                            <div className=\"flex flex-col px-4 pb-4\">\n                                {navItems.map((item) => (\n                                    <Link\n                                        key={item.view}\n                                        href={`${organizationOptions?.basePath}${organizationOptions?.pathMode === \"slug\" ? `/${slug}` : \"\"}/${organizationOptions?.viewPaths[item.view]}`}\n                                    >\n                                        <Button\n                                            size=\"lg\"\n                                            className={cn(\n                                                \"w-full justify-start px-4 transition-none\",\n                                                classNames?.drawer?.menuItem,\n                                                view === item.view\n                                                    ? \"font-semibold\"\n                                                    : \"text-foreground/70\"\n                                            )}\n                                            variant=\"ghost\"\n                                        >\n                                            {item.label}\n                                        </Button>\n                                    </Link>\n                                ))}\n                            </div>\n                        </DrawerContent>\n                    </Drawer>\n                </div>\n            )}\n\n            {!hideNav && (\n                <div className=\"hidden md:block\">\n                    <div\n                        className={cn(\n                            \"flex w-60 flex-col gap-1\",\n                            classNames?.sidebar?.base\n                        )}\n                    >\n                        {navItems.map((item) => (\n                            <Link\n                                key={item.view}\n                                href={`${organizationOptions?.basePath}${organizationOptions?.pathMode === \"slug\" ? `/${slug}` : \"\"}/${organizationOptions?.viewPaths[item.view]}`}\n                            >\n                                <Button\n                                    size=\"lg\"\n                                    className={cn(\n                                        \"w-full justify-start px-4 transition-none\",\n                                        classNames?.sidebar?.button,\n                                        view === item.view\n                                            ? \"font-semibold\"\n                                            : \"text-foreground/70\",\n                                        view === item.view &&\n                                            classNames?.sidebar?.buttonActive\n                                    )}\n                                    variant=\"ghost\"\n                                >\n                                    {item.label}\n                                </Button>\n                            </Link>\n                        ))}\n                    </div>\n                </div>\n            )}\n\n            {view === \"MEMBERS\" && (\n                <div\n                    className={cn(\n                        \"flex w-full flex-col gap-4 md:gap-6\",\n                        className,\n                        classNames?.cards\n                    )}\n                >\n                    <OrganizationMembersCard\n                        classNames={classNames?.card}\n                        localization={localization}\n                        slug={slug}\n                    />\n\n                    <OrganizationInvitationsCard\n                        classNames={classNames?.card}\n                        localization={localization}\n                        slug={slug}\n                    />\n                </div>\n            )}\n\n            {view === \"API_KEYS\" && (\n                <ApiKeysCard\n                    classNames={classNames?.card}\n                    localization={localization}\n                    isPending={organizationPending}\n                    organizationId={organization?.id}\n                />\n            )}\n\n            {view === \"SETTINGS\" && (\n                <OrganizationSettingsCards\n                    classNames={classNames}\n                    localization={localization}\n                    slug={slug}\n                />\n            )}\n        </div>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}