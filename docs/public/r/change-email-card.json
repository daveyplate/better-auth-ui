{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "change-email-card",
  "type": "registry:component",
  "title": "Change Email Card",
  "description": "",
  "dependencies": [
    "@hookform/resolvers",
    "react-hook-form",
    "zod"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "card",
    "form",
    "input",
    "https://better-auth-ui.com/r/settings-card.json",
    "skeleton",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/settings/security/change-email-card.tsx",
      "content": "\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useContext, useState } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\nimport { AuthUIContext } from \"../../../lib/auth-ui-provider\"\nimport { cn, getLocalizedError } from \"../../../lib/utils\"\nimport { CardContent } from \"../../ui/card\"\nimport {\n    Form,\n    FormControl,\n    FormField,\n    FormItem,\n    FormMessage\n} from \"../../ui/form\"\nimport { Input } from \"../../ui/input\"\nimport { Skeleton } from \"../../ui/skeleton\"\nimport type { SettingsCardProps } from \"../shared/settings-card\"\nimport { SettingsCard } from \"../shared/settings-card\"\n\nexport function ChangeEmailCard({\n    className,\n    classNames,\n    localization,\n    ...props\n}: SettingsCardProps) {\n    const {\n        authClient,\n        emailVerification,\n        hooks: { useSession },\n        localization: contextLocalization,\n        toast\n    } = useContext(AuthUIContext)\n\n    localization = { ...contextLocalization, ...localization }\n\n    const { data: sessionData, isPending, refetch } = useSession()\n    const [resendDisabled, setResendDisabled] = useState(false)\n\n    const formSchema = z.object({\n        email: z\n            .string()\n            .min(1, { message: localization.EMAIL_REQUIRED })\n            .email({ message: localization.INVALID_EMAIL })\n    })\n\n    const form = useForm({\n        resolver: zodResolver(formSchema),\n        values: {\n            email: sessionData?.user.email || \"\"\n        }\n    })\n\n    const resendForm = useForm()\n\n    const { isSubmitting } = form.formState\n\n    const changeEmail = async ({ email }: z.infer<typeof formSchema>) => {\n        if (email === sessionData?.user.email) {\n            await new Promise((resolve) => setTimeout(resolve))\n            toast({\n                variant: \"error\",\n                message: localization.EMAIL_IS_THE_SAME\n            })\n            return\n        }\n\n        try {\n            await authClient.changeEmail({\n                newEmail: email,\n                callbackURL: window.location.pathname,\n                fetchOptions: { throw: true }\n            })\n\n            if (sessionData?.user.emailVerified) {\n                toast({\n                    variant: \"success\",\n                    message: localization.EMAIL_VERIFY_CHANGE!\n                })\n            } else {\n                await refetch?.()\n                toast({\n                    variant: \"success\",\n                    message: `${localization.EMAIL} ${localization.UPDATED_SUCCESSFULLY}`\n                })\n            }\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n    }\n\n    const resendVerification = async () => {\n        if (!sessionData) return\n        const email = sessionData.user.email\n\n        setResendDisabled(true)\n\n        try {\n            await authClient.sendVerificationEmail({\n                email,\n                fetchOptions: { throw: true }\n            })\n\n            toast({\n                variant: \"success\",\n                message: localization.EMAIL_VERIFICATION!\n            })\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n            setResendDisabled(false)\n            throw error\n        }\n    }\n\n    return (\n        <>\n            <Form {...form}>\n                <form noValidate onSubmit={form.handleSubmit(changeEmail)}>\n                    <SettingsCard\n                        className={className}\n                        classNames={classNames}\n                        description={localization.EMAIL_DESCRIPTION}\n                        instructions={localization.EMAIL_INSTRUCTIONS}\n                        isPending={isPending}\n                        title={localization.EMAIL}\n                        actionLabel={localization.SAVE}\n                        {...props}\n                    >\n                        <CardContent className={classNames?.content}>\n                            {isPending ? (\n                                <Skeleton\n                                    className={cn(\n                                        \"h-9 w-full\",\n                                        classNames?.skeleton\n                                    )}\n                                />\n                            ) : (\n                                <FormField\n                                    control={form.control}\n                                    name=\"email\"\n                                    render={({ field }) => (\n                                        <FormItem>\n                                            <FormControl>\n                                                <Input\n                                                    className={\n                                                        classNames?.input\n                                                    }\n                                                    placeholder={\n                                                        localization.EMAIL_PLACEHOLDER\n                                                    }\n                                                    type=\"email\"\n                                                    disabled={isSubmitting}\n                                                    {...field}\n                                                />\n                                            </FormControl>\n\n                                            <FormMessage\n                                                className={classNames?.error}\n                                            />\n                                        </FormItem>\n                                    )}\n                                />\n                            )}\n                        </CardContent>\n                    </SettingsCard>\n                </form>\n            </Form>\n\n            {emailVerification &&\n                sessionData?.user &&\n                !sessionData?.user.emailVerified && (\n                    <Form {...resendForm}>\n                        <form\n                            onSubmit={resendForm.handleSubmit(\n                                resendVerification\n                            )}\n                        >\n                            <SettingsCard\n                                className={className}\n                                classNames={classNames}\n                                title={localization.VERIFY_YOUR_EMAIL}\n                                description={\n                                    localization.VERIFY_YOUR_EMAIL_DESCRIPTION\n                                }\n                                actionLabel={\n                                    localization.RESEND_VERIFICATION_EMAIL\n                                }\n                                disabled={resendDisabled}\n                                {...props}\n                            />\n                        </form>\n                    </Form>\n                )}\n        </>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}