{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "accounts-card",
  "type": "registry:component",
  "title": "Accounts Card",
  "description": "",
  "dependencies": [],
  "registryDependencies": [
    "https://better-auth-ui.com/r/account-cell.json",
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "card",
    "https://better-auth-ui.com/r/settings-card.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/settings/account/accounts-card.tsx",
      "content": "\"use client\"\nimport { useContext } from \"react\"\n\nimport { AuthUIContext } from \"../../../lib/auth-ui-provider\"\nimport { cn } from \"../../../lib/utils\"\nimport type { AuthLocalization } from \"../../../localization/auth-localization\"\nimport { CardContent } from \"../../ui/card\"\nimport type { SettingsCardClassNames } from \"../shared/settings-card\"\nimport { SettingsCard } from \"../shared/settings-card\"\nimport { AccountCell } from \"./account-cell\"\n\nexport interface AccountsCardProps {\n    className?: string\n    classNames?: SettingsCardClassNames\n    localization?: Partial<AuthLocalization>\n}\n\nexport function AccountsCard({\n    className,\n    classNames,\n    localization\n}: AccountsCardProps) {\n    const {\n        basePath,\n        hooks: { useListDeviceSessions, useSession },\n        localization: contextLocalization,\n        viewPaths,\n        navigate\n    } = useContext(AuthUIContext)\n\n    localization = { ...contextLocalization, ...localization }\n\n    const { data: deviceSessions, isPending, refetch } = useListDeviceSessions()\n    const { data: sessionData } = useSession()\n\n    const otherDeviceSessions = (deviceSessions || []).filter(\n        (ds) => ds.session.id !== sessionData?.session.id\n    )\n\n    return (\n        <SettingsCard\n            className={className}\n            classNames={classNames}\n            title={localization.ACCOUNTS}\n            description={localization.ACCOUNTS_DESCRIPTION}\n            actionLabel={localization.ADD_ACCOUNT}\n            instructions={localization.ACCOUNTS_INSTRUCTIONS}\n            isPending={isPending}\n            action={() => navigate(`${basePath}/${viewPaths.SIGN_IN}`)}\n        >\n            {deviceSessions?.length && (\n                <CardContent className={cn(\"grid gap-4\", classNames?.content)}>\n                    {sessionData && (\n                        <AccountCell\n                            classNames={classNames}\n                            deviceSession={sessionData}\n                            localization={localization}\n                            refetch={refetch}\n                        />\n                    )}\n\n                    {otherDeviceSessions.map((deviceSession) => (\n                        <AccountCell\n                            key={deviceSession.session.id}\n                            classNames={classNames}\n                            deviceSession={deviceSession}\n                            localization={localization}\n                            refetch={refetch}\n                        />\n                    ))}\n                </CardContent>\n            )}\n        </SettingsCard>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}