{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "providers-card",
  "type": "registry:component",
  "title": "Providers Card",
  "description": "",
  "dependencies": [],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "card",
    "https://better-auth-ui.com/r/provider-cell.json",
    "https://better-auth-ui.com/r/refetch.json",
    "https://better-auth-ui.com/r/settings-card.json",
    "https://better-auth-ui.com/r/settings-cell-skeleton.json",
    "https://better-auth-ui.com/r/social-providers.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/settings/providers/providers-card.tsx",
      "content": "\"use client\"\n\nimport { useContext } from \"react\"\n\nimport { AuthUIContext } from \"../../../lib/auth-ui-provider\"\nimport { socialProviders } from \"../../../lib/social-providers\"\nimport { cn } from \"../../../lib/utils\"\nimport type { AuthLocalization } from \"../../../localization/auth-localization\"\nimport type { Refetch } from \"../../../types/refetch\"\nimport { CardContent } from \"../../ui/card\"\nimport type { SettingsCardClassNames } from \"../shared/settings-card\"\nimport { SettingsCard } from \"../shared/settings-card\"\nimport { SettingsCellSkeleton } from \"../skeletons/settings-cell-skeleton\"\nimport { ProviderCell } from \"./provider-cell\"\n\nexport interface ProvidersCardProps {\n    className?: string\n    classNames?: SettingsCardClassNames\n    accounts?: { accountId: string; provider: string }[] | null\n    isPending?: boolean\n    localization?: Partial<AuthLocalization>\n    skipHook?: boolean\n    refetch?: Refetch\n}\n\nexport function ProvidersCard({\n    className,\n    classNames,\n    accounts,\n    isPending,\n    localization,\n    skipHook,\n    refetch\n}: ProvidersCardProps) {\n    const {\n        hooks: { useListAccounts },\n        localization: contextLocalization,\n        social,\n        genericOAuth\n    } = useContext(AuthUIContext)\n\n    localization = { ...contextLocalization, ...localization }\n\n    if (!skipHook) {\n        const result = useListAccounts()\n        accounts = result.data\n        isPending = result.isPending\n        refetch = result.refetch\n    }\n\n    return (\n        <SettingsCard\n            className={className}\n            classNames={classNames}\n            title={localization.PROVIDERS}\n            description={localization.PROVIDERS_DESCRIPTION}\n            isPending={isPending}\n        >\n            <CardContent className={cn(\"grid gap-4\", classNames?.content)}>\n                {isPending ? (\n                    social?.providers?.map((provider) => (\n                        <SettingsCellSkeleton\n                            key={provider}\n                            classNames={classNames}\n                        />\n                    ))\n                ) : (\n                    <>\n                        {social?.providers?.map((provider) => {\n                            const socialProvider = socialProviders.find(\n                                (socialProvider) =>\n                                    socialProvider.provider === provider\n                            )\n\n                            if (!socialProvider) return null\n\n                            return (\n                                <ProviderCell\n                                    key={provider}\n                                    classNames={classNames}\n                                    account={accounts?.find(\n                                        (acc) => acc.provider === provider\n                                    )}\n                                    provider={socialProvider}\n                                    refetch={refetch}\n                                />\n                            )\n                        })}\n\n                        {genericOAuth?.providers?.map((provider) => (\n                            <ProviderCell\n                                key={provider.provider}\n                                classNames={classNames}\n                                account={accounts?.find(\n                                    (acc) => acc.provider === provider.provider\n                                )}\n                                provider={provider}\n                                refetch={refetch}\n                                other\n                            />\n                        ))}\n                    </>\n                )}\n            </CardContent>\n        </SettingsCard>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}