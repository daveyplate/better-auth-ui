{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "sign-up-form",
  "type": "registry:component",
  "title": "Sign Up Form",
  "description": "",
  "dependencies": [
    "@hookform/resolvers",
    "better-auth",
    "lucide-react",
    "react-hook-form",
    "zod"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-form.json",
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "https://better-auth-ui.com/r/captcha.json",
    "checkbox",
    "dropdown-menu",
    "form",
    "https://better-auth-ui.com/r/image-utils.json",
    "input",
    "https://better-auth-ui.com/r/password-input.json",
    "https://better-auth-ui.com/r/password-validation.json",
    "textarea",
    "https://better-auth-ui.com/r/use-captcha.json",
    "https://better-auth-ui.com/r/use-hydrated.json",
    "https://better-auth-ui.com/r/use-success-transition.json",
    "https://better-auth-ui.com/r/user-avatar.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/auth/forms/sign-up-form.tsx",
      "content": "\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport type { BetterFetchOption } from \"better-auth/react\"\nimport { Loader2, Trash2Icon, UploadCloudIcon } from \"lucide-react\"\nimport { useCallback, useContext, useEffect, useRef, useState } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n\nimport { useCaptcha } from \"../../../hooks/use-captcha\"\nimport { useIsHydrated } from \"../../../hooks/use-hydrated\"\nimport { useOnSuccessTransition } from \"../../../hooks/use-success-transition\"\nimport { AuthUIContext } from \"../../../lib/auth-ui-provider\"\nimport { fileToBase64, resizeAndCropImage } from \"../../../lib/image-utils\"\nimport {\n    cn,\n    getLocalizedError,\n    getPasswordSchema,\n    getSearchParam\n} from \"../../../lib/utils\"\nimport type { AuthLocalization } from \"../../../localization/auth-localization\"\nimport type { PasswordValidation } from \"../../../types/password-validation\"\nimport { Captcha } from \"../../captcha/captcha\"\nimport { PasswordInput } from \"../../password-input\"\nimport { Button } from \"../../ui/button\"\nimport { Checkbox } from \"../../ui/checkbox\"\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger\n} from \"../../ui/dropdown-menu\"\nimport {\n    Form,\n    FormControl,\n    FormField,\n    FormItem,\n    FormLabel,\n    FormMessage\n} from \"../../ui/form\"\nimport { Input } from \"../../ui/input\"\nimport { Textarea } from \"../../ui/textarea\"\nimport { UserAvatar } from \"../../user-avatar\"\nimport type { AuthFormClassNames } from \"../auth-form\"\n\nexport interface SignUpFormProps {\n    className?: string\n    classNames?: AuthFormClassNames\n    callbackURL?: string\n    isSubmitting?: boolean\n    localization: Partial<AuthLocalization>\n    redirectTo?: string\n    setIsSubmitting?: (value: boolean) => void\n    passwordValidation?: PasswordValidation\n}\n\nexport function SignUpForm({\n    className,\n    classNames,\n    callbackURL,\n    isSubmitting,\n    localization,\n    redirectTo,\n    setIsSubmitting,\n    passwordValidation\n}: SignUpFormProps) {\n    const isHydrated = useIsHydrated()\n    const { captchaRef, getCaptchaHeaders, resetCaptcha } = useCaptcha({\n        localization\n    })\n\n    const {\n        additionalFields,\n        authClient,\n        basePath,\n        baseURL,\n        credentials,\n        localization: contextLocalization,\n        nameRequired,\n        persistClient,\n        redirectTo: contextRedirectTo,\n        signUp: signUpOptions,\n        viewPaths,\n        navigate,\n        toast,\n        avatar\n    } = useContext(AuthUIContext)\n\n    const confirmPasswordEnabled = credentials?.confirmPassword\n    const usernameEnabled = credentials?.username\n    const contextPasswordValidation = credentials?.passwordValidation\n    const signUpFields = signUpOptions?.fields\n\n    localization = { ...contextLocalization, ...localization }\n    passwordValidation = { ...contextPasswordValidation, ...passwordValidation }\n\n    // Avatar upload state\n    const fileInputRef = useRef<HTMLInputElement>(null)\n    const [avatarImage, setAvatarImage] = useState<string | null>(null)\n    const [uploadingAvatar, setUploadingAvatar] = useState(false)\n\n    const getRedirectTo = useCallback(\n        () => redirectTo || getSearchParam(\"redirectTo\") || contextRedirectTo,\n        [redirectTo, contextRedirectTo]\n    )\n\n    const getCallbackURL = useCallback(\n        () =>\n            `${baseURL}${\n                callbackURL ||\n                (persistClient\n                    ? `${basePath}/${viewPaths.CALLBACK}?redirectTo=${getRedirectTo()}`\n                    : getRedirectTo())\n            }`,\n        [\n            callbackURL,\n            persistClient,\n            basePath,\n            viewPaths,\n            baseURL,\n            getRedirectTo\n        ]\n    )\n\n    const { onSuccess, isPending: transitionPending } = useOnSuccessTransition({\n        redirectTo\n    })\n\n    // Create the base schema for standard fields\n    const schemaFields: Record<string, z.ZodTypeAny> = {\n        email: z\n            .string()\n            .min(1, {\n                message: `${localization.EMAIL} ${localization.IS_REQUIRED}`\n            })\n            .email({\n                message: `${localization.EMAIL} ${localization.IS_INVALID}`\n            }),\n        password: getPasswordSchema(passwordValidation, localization)\n    }\n\n    // Add confirmPassword field if enabled\n    if (confirmPasswordEnabled) {\n        schemaFields.confirmPassword = getPasswordSchema(passwordValidation, {\n            PASSWORD_REQUIRED: localization.CONFIRM_PASSWORD_REQUIRED,\n            PASSWORD_TOO_SHORT: localization.PASSWORD_TOO_SHORT,\n            PASSWORD_TOO_LONG: localization.PASSWORD_TOO_LONG,\n            INVALID_PASSWORD: localization.INVALID_PASSWORD\n        })\n    }\n\n    // Add name field if required or included in signUpFields\n    if (signUpFields?.includes(\"name\")) {\n        schemaFields.name = nameRequired\n            ? z.string().min(1, {\n                  message: `${localization.NAME} ${localization.IS_REQUIRED}`\n              })\n            : z.string().optional()\n    }\n\n    // Add username field if enabled\n    if (usernameEnabled) {\n        schemaFields.username = z.string().min(1, {\n            message: `${localization.USERNAME} ${localization.IS_REQUIRED}`\n        })\n    }\n\n    // Add image field if included in signUpFields\n    if (signUpFields?.includes(\"image\") && avatar) {\n        schemaFields.image = z.string().optional()\n    }\n\n    // Add additional fields from signUpFields\n    if (signUpFields) {\n        for (const field of signUpFields) {\n            if (field === \"name\") continue // Already handled above\n            if (field === \"image\") continue // Already handled above\n\n            const additionalField = additionalFields?.[field]\n            if (!additionalField) continue\n\n            let fieldSchema: z.ZodTypeAny\n\n            // Create the appropriate schema based on field type\n            if (additionalField.type === \"number\") {\n                fieldSchema = additionalField.required\n                    ? z.preprocess(\n                          (val) => (!val ? undefined : Number(val)),\n                          z.number({\n                              required_error: `${additionalField.label} ${localization.IS_REQUIRED}`,\n                              invalid_type_error: `${additionalField.label} ${localization.IS_INVALID}`\n                          })\n                      )\n                    : z.coerce\n                          .number({\n                              invalid_type_error: `${additionalField.label} ${localization.IS_INVALID}`\n                          })\n                          .optional()\n            } else if (additionalField.type === \"boolean\") {\n                fieldSchema = additionalField.required\n                    ? z.coerce\n                          .boolean({\n                              required_error: `${additionalField.label} ${localization.IS_REQUIRED}`,\n                              invalid_type_error: `${additionalField.label} ${localization.IS_INVALID}`\n                          })\n                          .refine((val) => val === true, {\n                              message: `${additionalField.label} ${localization.IS_REQUIRED}`\n                          })\n                    : z.coerce\n                          .boolean({\n                              invalid_type_error: `${additionalField.label} ${localization.IS_INVALID}`\n                          })\n                          .optional()\n            } else {\n                fieldSchema = additionalField.required\n                    ? z\n                          .string()\n                          .min(\n                              1,\n                              `${additionalField.label} ${localization.IS_REQUIRED}`\n                          )\n                    : z.string().optional()\n            }\n\n            schemaFields[field] = fieldSchema\n        }\n    }\n\n    const formSchema = z.object(schemaFields).refine(\n        (data) => {\n            // Skip validation if confirmPassword is not enabled\n            if (!confirmPasswordEnabled) return true\n            return data.password === data.confirmPassword\n        },\n        {\n            message: localization.PASSWORDS_DO_NOT_MATCH!,\n            path: [\"confirmPassword\"]\n        }\n    )\n\n    // Create default values for the form\n    const defaultValues: Record<string, unknown> = {\n        email: \"\",\n        password: \"\",\n        ...(confirmPasswordEnabled && { confirmPassword: \"\" }),\n        ...(signUpFields?.includes(\"name\") ? { name: \"\" } : {}),\n        ...(usernameEnabled ? { username: \"\" } : {}),\n        ...(signUpFields?.includes(\"image\") && avatar ? { image: \"\" } : {})\n    }\n\n    // Add default values for additional fields\n    if (signUpFields) {\n        for (const field of signUpFields) {\n            if (field === \"name\") continue\n            if (field === \"image\") continue\n            const additionalField = additionalFields?.[field]\n            if (!additionalField) continue\n\n            defaultValues[field] =\n                additionalField.type === \"boolean\" ? false : \"\"\n        }\n    }\n\n    const form = useForm({\n        resolver: zodResolver(formSchema),\n        defaultValues\n    })\n\n    isSubmitting =\n        isSubmitting || form.formState.isSubmitting || transitionPending\n\n    useEffect(() => {\n        setIsSubmitting?.(form.formState.isSubmitting || transitionPending)\n    }, [form.formState.isSubmitting, transitionPending, setIsSubmitting])\n\n    const handleAvatarChange = async (file: File) => {\n        if (!avatar) return\n\n        setUploadingAvatar(true)\n\n        try {\n            const resizedFile = await resizeAndCropImage(\n                file,\n                crypto.randomUUID(),\n                avatar.size,\n                avatar.extension\n            )\n\n            let image: string | undefined | null\n\n            if (avatar.upload) {\n                image = await avatar.upload(resizedFile)\n            } else {\n                image = await fileToBase64(resizedFile)\n            }\n\n            if (image) {\n                setAvatarImage(image)\n                form.setValue(\"image\", image)\n            } else {\n                setAvatarImage(null)\n                form.setValue(\"image\", \"\")\n            }\n        } catch (error) {\n            console.error(error)\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n\n        setUploadingAvatar(false)\n    }\n\n    const handleDeleteAvatar = () => {\n        setAvatarImage(null)\n        form.setValue(\"image\", \"\")\n    }\n\n    const openFileDialog = () => fileInputRef.current?.click()\n\n    async function signUp({\n        email,\n        password,\n        name,\n        username,\n        confirmPassword,\n        image,\n        ...additionalFieldValues\n    }: z.infer<typeof formSchema>) {\n        try {\n            // Validate additional fields with custom validators if provided\n            for (const [field, value] of Object.entries(\n                additionalFieldValues\n            )) {\n                const additionalField = additionalFields?.[field]\n                if (!additionalField?.validate) continue\n\n                if (\n                    typeof value === \"string\" &&\n                    !(await additionalField.validate(value))\n                ) {\n                    form.setError(field, {\n                        message: `${additionalField.label} ${localization.IS_INVALID}`\n                    })\n                    return\n                }\n            }\n\n            const fetchOptions: BetterFetchOption = {\n                throw: true,\n                headers: await getCaptchaHeaders(\"/sign-up/email\")\n            }\n\n            const data = await authClient.signUp.email({\n                email,\n                password,\n                name: name || \"\",\n                ...(username !== undefined && { username }),\n                ...(image !== undefined && { image }),\n                ...additionalFieldValues,\n                callbackURL: getCallbackURL(),\n                fetchOptions\n            })\n\n            if (\"token\" in data && data.token) {\n                await onSuccess()\n            } else {\n                navigate(\n                    `${basePath}/${viewPaths.SIGN_IN}${window.location.search}`\n                )\n                toast({\n                    variant: \"success\",\n                    message: localization.SIGN_UP_EMAIL!\n                })\n            }\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n\n            form.resetField(\"password\")\n            form.resetField(\"confirmPassword\")\n            resetCaptcha()\n        }\n    }\n\n    return (\n        <Form {...form}>\n            <form\n                onSubmit={form.handleSubmit(signUp)}\n                noValidate={isHydrated}\n                className={cn(\"grid w-full gap-6\", className, classNames?.base)}\n            >\n                {signUpFields?.includes(\"image\") && avatar && (\n                    <>\n                        <input\n                            ref={fileInputRef}\n                            accept=\"image/*\"\n                            disabled={uploadingAvatar}\n                            hidden\n                            type=\"file\"\n                            onChange={(e) => {\n                                const file = e.target.files?.item(0)\n                                if (file) handleAvatarChange(file)\n                                e.target.value = \"\"\n                            }}\n                        />\n\n                        <FormField\n                            control={form.control}\n                            name=\"image\"\n                            render={() => (\n                                <FormItem>\n                                    <FormLabel>{localization.AVATAR}</FormLabel>\n\n                                    <div className=\"flex items-center gap-4\">\n                                        <DropdownMenu>\n                                            <DropdownMenuTrigger asChild>\n                                                <Button\n                                                    className=\"size-fit rounded-full\"\n                                                    size=\"icon\"\n                                                    variant=\"ghost\"\n                                                    type=\"button\"\n                                                >\n                                                    <UserAvatar\n                                                        isPending={\n                                                            uploadingAvatar\n                                                        }\n                                                        className=\"size-16\"\n                                                        user={\n                                                            avatarImage\n                                                                ? {\n                                                                      name:\n                                                                          form.watch(\n                                                                              \"name\"\n                                                                          ) ||\n                                                                          \"\",\n                                                                      email: form.watch(\n                                                                          \"email\"\n                                                                      ),\n                                                                      image: avatarImage\n                                                                  }\n                                                                : null\n                                                        }\n                                                        localization={\n                                                            localization\n                                                        }\n                                                    />\n                                                </Button>\n                                            </DropdownMenuTrigger>\n\n                                            <DropdownMenuContent\n                                                align=\"start\"\n                                                onCloseAutoFocus={(e) =>\n                                                    e.preventDefault()\n                                                }\n                                            >\n                                                <DropdownMenuItem\n                                                    onClick={openFileDialog}\n                                                    disabled={uploadingAvatar}\n                                                >\n                                                    <UploadCloudIcon />\n                                                    {localization.UPLOAD_AVATAR}\n                                                </DropdownMenuItem>\n\n                                                {avatarImage && (\n                                                    <DropdownMenuItem\n                                                        onClick={\n                                                            handleDeleteAvatar\n                                                        }\n                                                        disabled={\n                                                            uploadingAvatar\n                                                        }\n                                                        variant=\"destructive\"\n                                                    >\n                                                        <Trash2Icon />\n                                                        {\n                                                            localization.DELETE_AVATAR\n                                                        }\n                                                    </DropdownMenuItem>\n                                                )}\n                                            </DropdownMenuContent>\n                                        </DropdownMenu>\n\n                                        <Button\n                                            type=\"button\"\n                                            variant=\"outline\"\n                                            onClick={openFileDialog}\n                                            disabled={uploadingAvatar}\n                                        >\n                                            {uploadingAvatar && (\n                                                <Loader2 className=\"animate-spin\" />\n                                            )}\n\n                                            {localization.UPLOAD}\n                                        </Button>\n                                    </div>\n\n                                    <FormMessage />\n                                </FormItem>\n                            )}\n                        />\n                    </>\n                )}\n\n                {signUpFields?.includes(\"name\") && (\n                    <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                            <FormItem>\n                                <FormLabel className={classNames?.label}>\n                                    {localization.NAME}\n                                </FormLabel>\n\n                                <FormControl>\n                                    <Input\n                                        className={classNames?.input}\n                                        placeholder={\n                                            localization.NAME_PLACEHOLDER\n                                        }\n                                        disabled={isSubmitting}\n                                        {...field}\n                                    />\n                                </FormControl>\n\n                                <FormMessage className={classNames?.error} />\n                            </FormItem>\n                        )}\n                    />\n                )}\n\n                {usernameEnabled && (\n                    <FormField\n                        control={form.control}\n                        name=\"username\"\n                        render={({ field }) => (\n                            <FormItem>\n                                <FormLabel className={classNames?.label}>\n                                    {localization.USERNAME}\n                                </FormLabel>\n\n                                <FormControl>\n                                    <Input\n                                        className={classNames?.input}\n                                        placeholder={\n                                            localization.USERNAME_PLACEHOLDER\n                                        }\n                                        disabled={isSubmitting}\n                                        {...field}\n                                    />\n                                </FormControl>\n\n                                <FormMessage className={classNames?.error} />\n                            </FormItem>\n                        )}\n                    />\n                )}\n\n                <FormField\n                    control={form.control}\n                    name=\"email\"\n                    render={({ field }) => (\n                        <FormItem>\n                            <FormLabel className={classNames?.label}>\n                                {localization.EMAIL}\n                            </FormLabel>\n\n                            <FormControl>\n                                <Input\n                                    className={classNames?.input}\n                                    type=\"email\"\n                                    placeholder={localization.EMAIL_PLACEHOLDER}\n                                    disabled={isSubmitting}\n                                    {...field}\n                                />\n                            </FormControl>\n\n                            <FormMessage className={classNames?.error} />\n                        </FormItem>\n                    )}\n                />\n\n                <FormField\n                    control={form.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                        <FormItem>\n                            <FormLabel className={classNames?.label}>\n                                {localization.PASSWORD}\n                            </FormLabel>\n\n                            <FormControl>\n                                <PasswordInput\n                                    autoComplete=\"new-password\"\n                                    className={classNames?.input}\n                                    placeholder={\n                                        localization.PASSWORD_PLACEHOLDER\n                                    }\n                                    disabled={isSubmitting}\n                                    enableToggle\n                                    {...field}\n                                />\n                            </FormControl>\n\n                            <FormMessage className={classNames?.error} />\n                        </FormItem>\n                    )}\n                />\n\n                {confirmPasswordEnabled && (\n                    <FormField\n                        control={form.control}\n                        name=\"confirmPassword\"\n                        render={({ field }) => (\n                            <FormItem>\n                                <FormLabel className={classNames?.label}>\n                                    {localization.CONFIRM_PASSWORD}\n                                </FormLabel>\n\n                                <FormControl>\n                                    <PasswordInput\n                                        autoComplete=\"new-password\"\n                                        className={classNames?.input}\n                                        placeholder={\n                                            localization.CONFIRM_PASSWORD_PLACEHOLDER\n                                        }\n                                        disabled={isSubmitting}\n                                        enableToggle\n                                        {...field}\n                                    />\n                                </FormControl>\n\n                                <FormMessage className={classNames?.error} />\n                            </FormItem>\n                        )}\n                    />\n                )}\n\n                {signUpFields\n                    ?.filter((field) => field !== \"name\" && field !== \"image\")\n                    .map((field) => {\n                        const additionalField = additionalFields?.[field]\n                        if (!additionalField) {\n                            console.error(`Additional field ${field} not found`)\n                            return null\n                        }\n\n                        return additionalField.type === \"boolean\" ? (\n                            <FormField\n                                key={field}\n                                control={form.control}\n                                name={field}\n                                render={({ field: formField }) => (\n                                    <FormItem className=\"flex\">\n                                        <FormControl>\n                                            <Checkbox\n                                                checked={\n                                                    formField.value as boolean\n                                                }\n                                                onCheckedChange={\n                                                    formField.onChange\n                                                }\n                                                disabled={isSubmitting}\n                                            />\n                                        </FormControl>\n\n                                        <FormLabel\n                                            className={classNames?.label}\n                                        >\n                                            {additionalField.label}\n                                        </FormLabel>\n\n                                        <FormMessage\n                                            className={classNames?.error}\n                                        />\n                                    </FormItem>\n                                )}\n                            />\n                        ) : (\n                            <FormField\n                                key={field}\n                                control={form.control}\n                                name={field}\n                                render={({ field: formField }) => (\n                                    <FormItem>\n                                        <FormLabel\n                                            className={classNames?.label}\n                                        >\n                                            {additionalField.label}\n                                        </FormLabel>\n\n                                        <FormControl>\n                                            {additionalField.type ===\n                                            \"number\" ? (\n                                                <Input\n                                                    className={\n                                                        classNames?.input\n                                                    }\n                                                    type=\"number\"\n                                                    placeholder={\n                                                        additionalField.placeholder ||\n                                                        (typeof additionalField.label ===\n                                                        \"string\"\n                                                            ? additionalField.label\n                                                            : \"\")\n                                                    }\n                                                    disabled={isSubmitting}\n                                                    {...formField}\n                                                />\n                                            ) : additionalField.multiline ? (\n                                                <Textarea\n                                                    className={\n                                                        classNames?.input\n                                                    }\n                                                    placeholder={\n                                                        additionalField.placeholder ||\n                                                        (typeof additionalField.label ===\n                                                        \"string\"\n                                                            ? additionalField.label\n                                                            : \"\")\n                                                    }\n                                                    disabled={isSubmitting}\n                                                    {...formField}\n                                                />\n                                            ) : (\n                                                <Input\n                                                    className={\n                                                        classNames?.input\n                                                    }\n                                                    type=\"text\"\n                                                    placeholder={\n                                                        additionalField.placeholder ||\n                                                        (typeof additionalField.label ===\n                                                        \"string\"\n                                                            ? additionalField.label\n                                                            : \"\")\n                                                    }\n                                                    disabled={isSubmitting}\n                                                    {...formField}\n                                                />\n                                            )}\n                                        </FormControl>\n\n                                        <FormMessage\n                                            className={classNames?.error}\n                                        />\n                                    </FormItem>\n                                )}\n                            />\n                        )\n                    })}\n\n                <Captcha\n                    ref={captchaRef}\n                    localization={localization}\n                    action=\"/sign-up/email\"\n                />\n\n                <Button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    className={cn(\n                        \"w-full\",\n                        classNames?.button,\n                        classNames?.primaryButton\n                    )}\n                >\n                    {isSubmitting ? (\n                        <Loader2 className=\"animate-spin\" />\n                    ) : (\n                        localization.SIGN_UP_ACTION\n                    )}\n                </Button>\n            </form>\n        </Form>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}