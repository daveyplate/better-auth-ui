{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "organization-logo-card",
  "type": "registry:component",
  "title": "Organization Logo Card",
  "description": "",
  "dependencies": [
    "better-auth",
    "lucide-react"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "card",
    "dropdown-menu",
    "https://better-auth-ui.com/r/image-utils.json",
    "https://better-auth-ui.com/r/organization-logo.json",
    "https://better-auth-ui.com/r/settings-card.json",
    "https://better-auth-ui.com/r/settings-card-footer.json",
    "https://better-auth-ui.com/r/settings-card-header.json",
    "https://better-auth-ui.com/r/use-current-organization.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/organization/organization-logo-card.tsx",
      "content": "\"use client\"\n\nimport type { Organization } from \"better-auth/plugins/organization\"\nimport { Trash2Icon, UploadCloudIcon } from \"lucide-react\"\nimport {\n    type ComponentProps,\n    useContext,\n    useMemo,\n    useRef,\n    useState\n} from \"react\"\n\nimport { useCurrentOrganization } from \"../../hooks/use-current-organization\"\nimport { AuthUIContext } from \"../../lib/auth-ui-provider\"\nimport { fileToBase64, resizeAndCropImage } from \"../../lib/image-utils\"\nimport { cn, getLocalizedError } from \"../../lib/utils\"\nimport type { AuthLocalization } from \"../../localization/auth-localization\"\nimport type { SettingsCardClassNames } from \"../settings/shared/settings-card\"\nimport { SettingsCardFooter } from \"../settings/shared/settings-card-footer\"\nimport { SettingsCardHeader } from \"../settings/shared/settings-card-header\"\nimport { Button } from \"../ui/button\"\nimport { Card } from \"../ui/card\"\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger\n} from \"../ui/dropdown-menu\"\nimport { OrganizationLogo } from \"./organization-logo\"\n\nexport interface OrganizationLogoCardProps extends ComponentProps<typeof Card> {\n    className?: string\n    classNames?: SettingsCardClassNames\n    localization?: AuthLocalization\n    slug?: string\n}\n\nexport function OrganizationLogoCard({\n    className,\n    classNames,\n    localization: localizationProp,\n    slug,\n    ...props\n}: OrganizationLogoCardProps) {\n    const { localization: contextLocalization } = useContext(AuthUIContext)\n\n    const localization = useMemo(\n        () => ({ ...contextLocalization, ...localizationProp }),\n        [contextLocalization, localizationProp]\n    )\n\n    const { data: organization } = useCurrentOrganization({ slug })\n\n    if (!organization) {\n        return (\n            <Card\n                className={cn(\n                    \"w-full pb-0 text-start\",\n                    className,\n                    classNames?.base\n                )}\n                {...props}\n            >\n                <div className=\"flex justify-between\">\n                    <SettingsCardHeader\n                        className=\"grow self-start\"\n                        title={localization.LOGO}\n                        description={localization.LOGO_DESCRIPTION}\n                        isPending\n                        classNames={classNames}\n                    />\n\n                    <Button\n                        type=\"button\"\n                        className=\"me-6 size-fit rounded-full\"\n                        size=\"icon\"\n                        variant=\"ghost\"\n                        disabled\n                    >\n                        <OrganizationLogo\n                            isPending\n                            className=\"size-20 text-2xl\"\n                            classNames={classNames?.avatar}\n                            localization={localization}\n                        />\n                    </Button>\n                </div>\n\n                <SettingsCardFooter\n                    className=\"!py-5\"\n                    instructions={localization.LOGO_INSTRUCTIONS}\n                    classNames={classNames}\n                    isPending\n                />\n            </Card>\n        )\n    }\n\n    return (\n        <OrganizationLogoForm\n            className={className}\n            classNames={classNames}\n            localization={localization}\n            organization={organization}\n            {...props}\n        />\n    )\n}\n\nfunction OrganizationLogoForm({\n    className,\n    classNames,\n    localization: localizationProp,\n    organization,\n    ...props\n}: OrganizationLogoCardProps & { organization: Organization }) {\n    const {\n        hooks: { useHasPermission },\n        localization: authLocalization,\n        organization: organizationOptions,\n        mutators: { updateOrganization },\n        toast\n    } = useContext(AuthUIContext)\n\n    const localization = useMemo(\n        () => ({ ...authLocalization, ...localizationProp }),\n        [authLocalization, localizationProp]\n    )\n\n    const { refetch: refetchOrganization } = useCurrentOrganization({\n        slug: organization.slug\n    })\n\n    const { data: hasPermission, isPending: permissionPending } =\n        useHasPermission({\n            organizationId: organization.id,\n            permissions: {\n                organization: [\"update\"]\n            }\n        })\n\n    const isPending = permissionPending\n\n    const fileInputRef = useRef<HTMLInputElement | null>(null)\n    const [loading, setLoading] = useState(false)\n\n    const handleLogoChange = async (file: File) => {\n        if (!organizationOptions?.logo || !hasPermission?.success) return\n\n        setLoading(true)\n\n        const resizedFile = await resizeAndCropImage(\n            file,\n            crypto.randomUUID(),\n            organizationOptions.logo.size,\n            organizationOptions.logo.extension\n        )\n\n        let image: string | undefined | null\n\n        if (organizationOptions.logo.upload) {\n            image = await organizationOptions.logo.upload(resizedFile)\n        } else {\n            image = await fileToBase64(resizedFile)\n        }\n\n        if (!image) {\n            setLoading(false)\n            return\n        }\n\n        try {\n            await updateOrganization({\n                organizationId: organization.id,\n                data: { logo: image }\n            })\n\n            await refetchOrganization?.()\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n\n        setLoading(false)\n    }\n\n    const handleDeleteLogo = async () => {\n        if (!hasPermission?.success) return\n\n        setLoading(true)\n\n        try {\n            if (organization.logo) {\n                await organizationOptions?.logo?.delete?.(organization.logo)\n            }\n\n            await updateOrganization({\n                organizationId: organization.id,\n                data: { logo: \"\" }\n            })\n\n            await refetchOrganization?.()\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n\n        setLoading(false)\n    }\n\n    const openFileDialog = () => {\n        fileInputRef.current?.click()\n    }\n\n    return (\n        <Card\n            className={cn(\n                \"w-full pb-0 text-start\",\n                className,\n                classNames?.base\n            )}\n            {...props}\n        >\n            <input\n                ref={fileInputRef}\n                accept=\"image/*\"\n                disabled={loading || !hasPermission?.success}\n                hidden\n                type=\"file\"\n                onChange={(e) => {\n                    const file = e.target.files?.item(0)\n                    if (file) handleLogoChange(file)\n\n                    e.target.value = \"\"\n                }}\n            />\n\n            <div className=\"flex justify-between\">\n                <SettingsCardHeader\n                    className=\"grow self-start\"\n                    title={localization.LOGO}\n                    description={localization.LOGO_DESCRIPTION}\n                    isPending={isPending}\n                    classNames={classNames}\n                />\n\n                <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                        <Button\n                            type=\"button\"\n                            className=\"me-6 size-fit rounded-full\"\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            disabled={!hasPermission?.success}\n                        >\n                            <OrganizationLogo\n                                isPending={isPending || loading}\n                                key={organization.logo}\n                                className=\"size-20 text-2xl\"\n                                classNames={classNames?.avatar}\n                                organization={organization}\n                                localization={localization}\n                            />\n                        </Button>\n                    </DropdownMenuTrigger>\n\n                    <DropdownMenuContent\n                        align=\"end\"\n                        onCloseAutoFocus={(e) => e.preventDefault()}\n                    >\n                        <DropdownMenuItem\n                            onClick={openFileDialog}\n                            disabled={loading || !hasPermission?.success}\n                        >\n                            <UploadCloudIcon />\n\n                            {localization.UPLOAD_LOGO}\n                        </DropdownMenuItem>\n\n                        {organization.logo && (\n                            <DropdownMenuItem\n                                onClick={handleDeleteLogo}\n                                disabled={loading || !hasPermission?.success}\n                                variant=\"destructive\"\n                            >\n                                <Trash2Icon />\n\n                                {localization.DELETE_LOGO}\n                            </DropdownMenuItem>\n                        )}\n                    </DropdownMenuContent>\n                </DropdownMenu>\n            </div>\n\n            <SettingsCardFooter\n                className=\"!py-5\"\n                instructions={localization.LOGO_INSTRUCTIONS}\n                classNames={classNames}\n                isPending={isPending}\n                isSubmitting={loading}\n            />\n        </Card>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}