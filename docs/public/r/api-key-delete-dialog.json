{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "api-key-delete-dialog",
  "type": "registry:component",
  "title": "Api Key Delete Dialog",
  "description": "",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/api-key.json",
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "card",
    "dialog",
    "https://better-auth-ui.com/r/refetch.json",
    "https://better-auth-ui.com/r/settings-card.json",
    "https://better-auth-ui.com/r/use-lang.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/settings/api-key/api-key-delete-dialog.tsx",
      "content": "\"use client\"\n\nimport { KeyRoundIcon, Loader2 } from \"lucide-react\"\nimport { type ComponentProps, useContext, useState } from \"react\"\n\nimport { useLang } from \"../../../hooks/use-lang\"\nimport { AuthUIContext } from \"../../../lib/auth-ui-provider\"\nimport { cn, getLocalizedError } from \"../../../lib/utils\"\nimport type { AuthLocalization } from \"../../../localization/auth-localization\"\nimport type { ApiKey } from \"../../../types/api-key\"\nimport type { Refetch } from \"../../../types/refetch\"\nimport { Button } from \"../../ui/button\"\nimport { Card } from \"../../ui/card\"\nimport {\n    Dialog,\n    DialogContent,\n    DialogDescription,\n    DialogFooter,\n    DialogHeader,\n    DialogTitle\n} from \"../../ui/dialog\"\nimport type { SettingsCardClassNames } from \"../shared/settings-card\"\n\ninterface ApiKeyDeleteDialogProps extends ComponentProps<typeof Dialog> {\n    classNames?: SettingsCardClassNames\n    apiKey: ApiKey\n    localization?: AuthLocalization\n    refetch?: Refetch\n}\n\nexport function ApiKeyDeleteDialog({\n    classNames,\n    apiKey,\n    localization,\n    refetch,\n    onOpenChange,\n    ...props\n}: ApiKeyDeleteDialogProps) {\n    const {\n        localization: contextLocalization,\n        mutators: { deleteApiKey },\n        toast\n    } = useContext(AuthUIContext)\n\n    localization = { ...contextLocalization, ...localization }\n\n    const { lang } = useLang()\n    const [isLoading, setIsLoading] = useState(false)\n\n    const handleDelete = async () => {\n        setIsLoading(true)\n\n        try {\n            await deleteApiKey({ keyId: apiKey.id })\n            await refetch?.()\n            onOpenChange?.(false)\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n\n        setIsLoading(false)\n    }\n\n    // Format expiration date or show \"Never expires\"\n    const formatExpiration = () => {\n        if (!apiKey.expiresAt) return localization.NEVER_EXPIRES\n\n        const expiresDate = new Date(apiKey.expiresAt)\n        return `${localization.EXPIRES} ${expiresDate.toLocaleDateString(\n            lang ?? \"en\",\n            {\n                month: \"short\",\n                day: \"numeric\",\n                year: \"numeric\"\n            }\n        )}`\n    }\n\n    return (\n        <Dialog onOpenChange={onOpenChange} {...props}>\n            <DialogContent\n                onOpenAutoFocus={(e) => e.preventDefault()}\n                className={classNames?.dialog?.content}\n            >\n                <DialogHeader className={classNames?.dialog?.header}>\n                    <DialogTitle\n                        className={cn(\"text-lg md:text-xl\", classNames?.title)}\n                    >\n                        {localization.DELETE} {localization.API_KEY}\n                    </DialogTitle>\n\n                    <DialogDescription\n                        className={cn(\n                            \"text-xs md:text-sm\",\n                            classNames?.description\n                        )}\n                    >\n                        {localization.DELETE_API_KEY_CONFIRM}\n                    </DialogDescription>\n                </DialogHeader>\n\n                <Card\n                    className={cn(\n                        \"my-2 flex-row items-center gap-3 px-4 py-3\",\n                        classNames?.cell\n                    )}\n                >\n                    <KeyRoundIcon className={cn(\"size-4\", classNames?.icon)} />\n\n                    <div className=\"flex flex-col\">\n                        <div className=\"flex items-center gap-2\">\n                            <span className=\"font-semibold text-sm\">\n                                {apiKey.name}\n                            </span>\n\n                            <span className=\"text-muted-foreground text-sm\">\n                                {apiKey.start}\n                                {\"******\"}\n                            </span>\n                        </div>\n\n                        <div className=\"text-muted-foreground text-xs\">\n                            {formatExpiration()}\n                        </div>\n                    </div>\n                </Card>\n\n                <DialogFooter className={classNames?.dialog?.footer}>\n                    <Button\n                        type=\"button\"\n                        variant=\"secondary\"\n                        onClick={() => onOpenChange?.(false)}\n                        disabled={isLoading}\n                        className={cn(\n                            classNames?.button,\n                            classNames?.secondaryButton\n                        )}\n                    >\n                        {localization.CANCEL}\n                    </Button>\n\n                    <Button\n                        type=\"button\"\n                        variant=\"destructive\"\n                        onClick={handleDelete}\n                        disabled={isLoading}\n                        className={cn(\n                            classNames?.button,\n                            classNames?.destructiveButton\n                        )}\n                    >\n                        {isLoading && <Loader2 className=\"animate-spin\" />}\n                        {localization.DELETE}\n                    </Button>\n                </DialogFooter>\n            </DialogContent>\n        </Dialog>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}