{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "accept-invitation-card",
  "type": "registry:component",
  "title": "Accept Invitation Card",
  "description": "",
  "dependencies": [
    "lucide-react"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "card",
    "https://better-auth-ui.com/r/organization-cell-view.json",
    "https://better-auth-ui.com/r/settings-card.json",
    "skeleton",
    "https://better-auth-ui.com/r/use-authenticate.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/organization/accept-invitation-card.tsx",
      "content": "\"use client\"\n\nimport { CheckIcon, Loader2, XIcon } from \"lucide-react\"\nimport { useCallback, useContext, useEffect, useMemo, useState } from \"react\"\n\nimport { useAuthenticate } from \"../../hooks/use-authenticate\"\nimport { AuthUIContext } from \"../../lib/auth-ui-provider\"\nimport { cn, getLocalizedError, getSearchParam } from \"../../lib/utils\"\nimport type { AuthLocalization } from \"../../localization/auth-localization\"\nimport type { SettingsCardClassNames } from \"../settings/shared/settings-card\"\nimport { Button } from \"../ui/button\"\nimport {\n    Card,\n    CardContent,\n    CardDescription,\n    CardHeader,\n    CardTitle\n} from \"../ui/card\"\nimport { Skeleton } from \"../ui/skeleton\"\nimport { OrganizationCellView } from \"./organization-cell-view\"\n\nexport interface AcceptInvitationCardProps {\n    className?: string\n    classNames?: SettingsCardClassNames\n    localization?: Partial<AuthLocalization>\n}\n\nexport function AcceptInvitationCard({\n    className,\n    classNames,\n    localization: localizationProp\n}: AcceptInvitationCardProps) {\n    const {\n        localization: contextLocalization,\n        redirectTo,\n        replace,\n        toast\n    } = useContext(AuthUIContext)\n\n    const localization = useMemo(\n        () => ({ ...contextLocalization, ...localizationProp }),\n        [contextLocalization, localizationProp]\n    )\n\n    const { data: sessionData } = useAuthenticate()\n    const [invitationId, setInvitationId] = useState<string | null>(null)\n\n    useEffect(() => {\n        const invitationIdParam = getSearchParam(\"invitationId\")\n\n        if (!invitationIdParam) {\n            toast({\n                variant: \"error\",\n                message: localization.INVITATION_NOT_FOUND\n            })\n\n            replace(redirectTo)\n            return\n        }\n\n        setInvitationId(invitationIdParam)\n    }, [localization.INVITATION_NOT_FOUND, toast, replace, redirectTo])\n\n    if (!sessionData || !invitationId) {\n        return (\n            <AcceptInvitationSkeleton\n                className={className}\n                classNames={classNames}\n            />\n        )\n    }\n\n    return (\n        <AcceptInvitationContent\n            className={className}\n            classNames={classNames}\n            localization={localization}\n            invitationId={invitationId}\n        />\n    )\n}\n\nfunction AcceptInvitationContent({\n    className,\n    classNames,\n    localization: localizationProp,\n    invitationId\n}: AcceptInvitationCardProps & { invitationId: string }) {\n    const {\n        authClient,\n        hooks: { useInvitation },\n        localization: contextLocalization,\n        organization,\n        redirectTo,\n        replace,\n        toast\n    } = useContext(AuthUIContext)\n\n    const localization = useMemo(\n        () => ({ ...contextLocalization, ...localizationProp }),\n        [contextLocalization, localizationProp]\n    )\n\n    const [isRejecting, setIsRejecting] = useState(false)\n    const [isAccepting, setIsAccepting] = useState(false)\n    const isProcessing = isRejecting || isAccepting\n\n    const { data: invitation, isPending } = useInvitation({\n        query: {\n            id: invitationId\n        }\n    })\n\n    const getRedirectTo = useCallback(\n        () => getSearchParam(\"redirectTo\") || redirectTo,\n        [redirectTo]\n    )\n\n    useEffect(() => {\n        if (isPending || !invitationId) return\n\n        if (!invitation) {\n            toast({\n                variant: \"error\",\n                message: localization.INVITATION_NOT_FOUND\n            })\n\n            replace(redirectTo)\n            return\n        }\n\n        if (\n            invitation.status !== \"pending\" ||\n            new Date(invitation.expiresAt) < new Date()\n        ) {\n            toast({\n                variant: \"error\",\n                message:\n                    new Date(invitation.expiresAt) < new Date()\n                        ? localization.INVITATION_EXPIRED\n                        : localization.INVITATION_NOT_FOUND\n            })\n\n            replace(redirectTo)\n        }\n    }, [\n        invitation,\n        isPending,\n        invitationId,\n        localization,\n        toast,\n        replace,\n        redirectTo\n    ])\n\n    const acceptInvitation = async () => {\n        setIsAccepting(true)\n\n        try {\n            await authClient.organization.acceptInvitation({\n                invitationId: invitationId,\n                fetchOptions: { throw: true }\n            })\n\n            toast({\n                variant: \"success\",\n                message:\n                    localization.INVITATION_ACCEPTED || \"Invitation accepted\"\n            })\n\n            replace(getRedirectTo())\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n\n            setIsAccepting(false)\n        }\n    }\n\n    const rejectInvitation = async () => {\n        setIsRejecting(true)\n\n        try {\n            await authClient.organization.rejectInvitation({\n                invitationId: invitationId,\n                fetchOptions: { throw: true }\n            })\n\n            toast({\n                variant: \"success\",\n                message: localization.INVITATION_REJECTED\n            })\n\n            replace(redirectTo)\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n\n            setIsRejecting(false)\n        }\n    }\n\n    const builtInRoles = [\n        { role: \"owner\", label: localization.OWNER },\n        { role: \"admin\", label: localization.ADMIN },\n        { role: \"member\", label: localization.MEMBER }\n    ]\n\n    const roles = [...builtInRoles, ...(organization?.customRoles || [])]\n    const roleLabel =\n        roles.find((r) => r.role === invitation?.role)?.label ||\n        invitation?.role\n\n    if (!invitation)\n        return (\n            <AcceptInvitationSkeleton\n                className={className}\n                classNames={classNames}\n            />\n        )\n\n    return (\n        <Card className={cn(\"w-full max-w-sm\", className, classNames?.base)}>\n            <CardHeader\n                className={cn(\n                    \"justify-items-center text-center\",\n                    classNames?.header\n                )}\n            >\n                <CardTitle\n                    className={cn(\"text-lg md:text-xl\", classNames?.title)}\n                >\n                    {localization.ACCEPT_INVITATION}\n                </CardTitle>\n\n                <CardDescription\n                    className={cn(\n                        \"text-xs md:text-sm\",\n                        classNames?.description\n                    )}\n                >\n                    {localization.ACCEPT_INVITATION_DESCRIPTION}\n                </CardDescription>\n            </CardHeader>\n\n            <CardContent\n                className={cn(\n                    \"flex flex-col gap-6 truncate\",\n                    classNames?.content\n                )}\n            >\n                <Card className={cn(\"flex-row items-center p-4\")}>\n                    <OrganizationCellView\n                        organization={{\n                            id: invitation.organizationId,\n                            name: invitation.organizationName,\n                            slug: invitation.organizationSlug,\n                            logo: invitation.organizationLogo,\n                            createdAt: new Date()\n                        }}\n                        localization={localization}\n                    />\n\n                    <p className=\"ml-auto text-muted-foreground text-sm\">\n                        {roleLabel}\n                    </p>\n                </Card>\n\n                <div className=\"grid grid-cols-2 gap-3\">\n                    <Button\n                        variant=\"outline\"\n                        className={cn(\n                            classNames?.button,\n                            classNames?.outlineButton\n                        )}\n                        onClick={rejectInvitation}\n                        disabled={isProcessing}\n                    >\n                        {isRejecting ? (\n                            <Loader2 className=\"animate-spin\" />\n                        ) : (\n                            <XIcon />\n                        )}\n\n                        {localization.REJECT}\n                    </Button>\n\n                    <Button\n                        className={cn(\n                            classNames?.button,\n                            classNames?.primaryButton\n                        )}\n                        onClick={acceptInvitation}\n                        disabled={isProcessing}\n                    >\n                        {isAccepting ? (\n                            <Loader2 className=\"animate-spin\" />\n                        ) : (\n                            <CheckIcon />\n                        )}\n\n                        {localization.ACCEPT}\n                    </Button>\n                </div>\n            </CardContent>\n        </Card>\n    )\n}\n\nconst AcceptInvitationSkeleton = ({\n    className,\n    classNames,\n    localization\n}: AcceptInvitationCardProps) => {\n    return (\n        <Card className={cn(\"w-full max-w-sm\", className, classNames?.base)}>\n            <CardHeader\n                className={cn(\"justify-items-center\", classNames?.header)}\n            >\n                <Skeleton\n                    className={cn(\n                        \"my-1 h-5 w-full max-w-32 md:h-5.5 md:w-40\",\n                        classNames?.skeleton\n                    )}\n                />\n\n                <Skeleton\n                    className={cn(\n                        \"my-0.5 h-3 w-full max-w-56 md:h-3.5 md:w-64\",\n                        classNames?.skeleton\n                    )}\n                />\n            </CardHeader>\n\n            <CardContent\n                className={cn(\n                    \"flex flex-col gap-6 truncate\",\n                    classNames?.content\n                )}\n            >\n                <Card className={cn(\"flex-row items-center p-4\")}>\n                    <OrganizationCellView\n                        isPending\n                        localization={localization}\n                    />\n\n                    <Skeleton className=\"mt-0.5 ml-auto h-4 w-full max-w-14 shrink-2\" />\n                </Card>\n\n                <div className=\"grid grid-cols-2 gap-3\">\n                    <Skeleton className=\"h-9 w-full\" />\n\n                    <Skeleton className=\"h-9 w-full\" />\n                </div>\n            </CardContent>\n        </Card>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}