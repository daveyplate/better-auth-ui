{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "two-factor-password-dialog",
  "type": "registry:component",
  "title": "Two Factor Password Dialog",
  "description": "",
  "dependencies": [
    "@hookform/resolvers",
    "lucide-react",
    "react-hook-form",
    "zod"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "https://better-auth-ui.com/r/backup-codes-dialog.json",
    "button",
    "dialog",
    "form",
    "https://better-auth-ui.com/r/password-input.json",
    "https://better-auth-ui.com/r/settings-card.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/settings/two-factor/two-factor-password-dialog.tsx",
      "content": "\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { Loader2 } from \"lucide-react\"\nimport { type ComponentProps, useContext, useState } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\n\nimport { AuthUIContext } from \"../../../lib/auth-ui-provider\"\nimport { cn, getLocalizedError } from \"../../../lib/utils\"\nimport { PasswordInput } from \"../../password-input\"\nimport { Button } from \"../../ui/button\"\nimport {\n    Dialog,\n    DialogContent,\n    DialogDescription,\n    DialogFooter,\n    DialogHeader,\n    DialogTitle\n} from \"../../ui/dialog\"\nimport {\n    Form,\n    FormControl,\n    FormField,\n    FormItem,\n    FormLabel,\n    FormMessage\n} from \"../../ui/form\"\nimport type { SettingsCardClassNames } from \"../shared/settings-card\"\nimport { BackupCodesDialog } from \"./backup-codes-dialog\"\n\ninterface TwoFactorPasswordDialogProps extends ComponentProps<typeof Dialog> {\n    classNames?: SettingsCardClassNames\n    isTwoFactorEnabled: boolean\n}\n\nexport function TwoFactorPasswordDialog({\n    classNames,\n    onOpenChange,\n    isTwoFactorEnabled,\n    ...props\n}: TwoFactorPasswordDialogProps) {\n    const {\n        localization,\n        authClient,\n        basePath,\n        viewPaths,\n        navigate,\n        toast,\n        twoFactor\n    } = useContext(AuthUIContext)\n    const [showBackupCodesDialog, setShowBackupCodesDialog] = useState(false)\n    const [backupCodes, setBackupCodes] = useState<string[]>([])\n    const [totpURI, setTotpURI] = useState<string | null>(null)\n\n    const formSchema = z.object({\n        password: z.string().min(1, { message: localization.PASSWORD_REQUIRED })\n    })\n\n    const form = useForm({\n        resolver: zodResolver(formSchema),\n        defaultValues: {\n            password: \"\"\n        }\n    })\n\n    const { isSubmitting } = form.formState\n\n    async function enableTwoFactor({ password }: z.infer<typeof formSchema>) {\n        try {\n            const response = await authClient.twoFactor.enable({\n                password,\n                fetchOptions: { throw: true }\n            })\n\n            onOpenChange?.(false)\n            setBackupCodes(response.backupCodes)\n\n            if (twoFactor?.includes(\"totp\")) {\n                setTotpURI(response.totpURI)\n            }\n\n            setTimeout(() => {\n                setShowBackupCodesDialog(true)\n            }, 250)\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n    }\n\n    async function disableTwoFactor({ password }: z.infer<typeof formSchema>) {\n        try {\n            await authClient.twoFactor.disable({\n                password,\n                fetchOptions: { throw: true }\n            })\n\n            toast({\n                variant: \"success\",\n                message: localization.TWO_FACTOR_DISABLED\n            })\n\n            onOpenChange?.(false)\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n    }\n\n    return (\n        <>\n            <Dialog onOpenChange={onOpenChange} {...props}>\n                <DialogContent\n                    className={cn(\"sm:max-w-md\", classNames?.dialog)}\n                >\n                    <DialogHeader className={classNames?.dialog?.header}>\n                        <DialogTitle className={classNames?.title}>\n                            {localization.TWO_FACTOR}\n                        </DialogTitle>\n\n                        <DialogDescription className={classNames?.description}>\n                            {isTwoFactorEnabled\n                                ? localization.TWO_FACTOR_DISABLE_INSTRUCTIONS\n                                : localization.TWO_FACTOR_ENABLE_INSTRUCTIONS}\n                        </DialogDescription>\n                    </DialogHeader>\n\n                    <Form {...form}>\n                        <form\n                            onSubmit={form.handleSubmit(\n                                isTwoFactorEnabled\n                                    ? disableTwoFactor\n                                    : enableTwoFactor\n                            )}\n                            className=\"grid gap-4\"\n                        >\n                            <FormField\n                                control={form.control}\n                                name=\"password\"\n                                render={({ field }) => (\n                                    <FormItem>\n                                        <FormLabel\n                                            className={classNames?.label}\n                                        >\n                                            {localization.PASSWORD}\n                                        </FormLabel>\n\n                                        <FormControl>\n                                            <PasswordInput\n                                                className={classNames?.input}\n                                                placeholder={\n                                                    localization.PASSWORD_PLACEHOLDER\n                                                }\n                                                autoComplete=\"current-password\"\n                                                {...field}\n                                            />\n                                        </FormControl>\n\n                                        <FormMessage\n                                            className={classNames?.error}\n                                        />\n                                    </FormItem>\n                                )}\n                            />\n\n                            <DialogFooter\n                                className={classNames?.dialog?.footer}\n                            >\n                                <Button\n                                    type=\"button\"\n                                    variant=\"secondary\"\n                                    onClick={() => onOpenChange?.(false)}\n                                    className={cn(\n                                        classNames?.button,\n                                        classNames?.secondaryButton\n                                    )}\n                                >\n                                    {localization.CANCEL}\n                                </Button>\n\n                                <Button\n                                    type=\"submit\"\n                                    disabled={isSubmitting}\n                                    className={cn(\n                                        classNames?.button,\n                                        classNames?.primaryButton\n                                    )}\n                                >\n                                    {isSubmitting && (\n                                        <Loader2 className=\"animate-spin\" />\n                                    )}\n                                    {isTwoFactorEnabled\n                                        ? localization.DISABLE_TWO_FACTOR\n                                        : localization.ENABLE_TWO_FACTOR}\n                                </Button>\n                            </DialogFooter>\n                        </form>\n                    </Form>\n                </DialogContent>\n            </Dialog>\n\n            <BackupCodesDialog\n                classNames={classNames}\n                open={showBackupCodesDialog}\n                onOpenChange={(open) => {\n                    setShowBackupCodesDialog(open)\n\n                    if (!open) {\n                        const url = `${basePath}/${viewPaths.TWO_FACTOR}`\n                        navigate(\n                            twoFactor?.includes(\"totp\") && totpURI\n                                ? `${url}?totpURI=${totpURI}`\n                                : url\n                        )\n                    }\n                }}\n                backupCodes={backupCodes}\n            />\n        </>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}