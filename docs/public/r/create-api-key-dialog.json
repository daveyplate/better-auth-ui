{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "create-api-key-dialog",
  "type": "registry:component",
  "title": "Create Api Key Dialog",
  "description": "",
  "dependencies": [
    "@hookform/resolvers",
    "better-auth",
    "lucide-react",
    "react-hook-form",
    "zod"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/auth-localization.json",
    "https://better-auth-ui.com/r/auth-ui-provider.json",
    "button",
    "dialog",
    "form",
    "input",
    "https://better-auth-ui.com/r/organization-cell-view.json",
    "https://better-auth-ui.com/r/personal-account-view.json",
    "https://better-auth-ui.com/r/refetch.json",
    "select",
    "https://better-auth-ui.com/r/settings-card.json",
    "https://better-auth-ui.com/r/use-lang.json",
    "https://better-auth-ui.com/r/utils.json"
  ],
  "files": [
    {
      "path": "src/components/settings/api-key/create-api-key-dialog.tsx",
      "content": "\"use client\"\n\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport type { Organization } from \"better-auth/plugins/organization\"\nimport { Loader2 } from \"lucide-react\"\nimport { type ComponentProps, useContext } from \"react\"\nimport { useForm } from \"react-hook-form\"\nimport * as z from \"zod\"\nimport { useLang } from \"../../../hooks/use-lang\"\nimport { AuthUIContext } from \"../../../lib/auth-ui-provider\"\nimport { cn, getLocalizedError } from \"../../../lib/utils\"\nimport type { AuthLocalization } from \"../../../localization/auth-localization\"\nimport type { Refetch } from \"../../../types/refetch\"\nimport { OrganizationCellView } from \"../../organization/organization-cell-view\"\nimport { PersonalAccountView } from \"../../organization/personal-account-view\"\nimport { Button } from \"../../ui/button\"\nimport {\n    Dialog,\n    DialogContent,\n    DialogDescription,\n    DialogFooter,\n    DialogHeader,\n    DialogTitle\n} from \"../../ui/dialog\"\nimport {\n    Form,\n    FormControl,\n    FormField,\n    FormItem,\n    FormLabel,\n    FormMessage\n} from \"../../ui/form\"\nimport { Input } from \"../../ui/input\"\nimport {\n    Select,\n    SelectContent,\n    SelectItem,\n    SelectTrigger,\n    SelectValue\n} from \"../../ui/select\"\nimport type { SettingsCardClassNames } from \"../shared/settings-card\"\n\ninterface CreateApiKeyDialogProps extends ComponentProps<typeof Dialog> {\n    classNames?: SettingsCardClassNames\n    localization?: AuthLocalization\n    onSuccess: (key: string) => void\n    refetch?: Refetch\n    organizationId?: string\n}\n\nexport function CreateApiKeyDialog({\n    classNames,\n    localization,\n    onSuccess,\n    refetch,\n    organizationId,\n    onOpenChange,\n    ...props\n}: CreateApiKeyDialogProps) {\n    const {\n        authClient,\n        apiKey,\n        hooks: { useListOrganizations, useSession },\n        localization: contextLocalization,\n        organization: contextOrganization,\n        toast\n    } = useContext(AuthUIContext)\n\n    localization = { ...contextLocalization, ...localization }\n\n    const { lang } = useLang()\n\n    let organizations: Organization[] | null | undefined\n    if (contextOrganization) {\n        const { data } = useListOrganizations()\n        organizations = data\n    }\n\n    const { data: sessionData } = useSession()\n    const user = sessionData?.user\n\n    const showOrganizationSelect = contextOrganization?.apiKey\n\n    const formSchema = z.object({\n        name: z\n            .string()\n            .min(1, `${localization.NAME} ${localization.IS_REQUIRED}`),\n        expiresInDays: z.string().optional(),\n        organizationId: showOrganizationSelect\n            ? z\n                  .string()\n                  .min(\n                      1,\n                      `${localization.ORGANIZATION} ${localization.IS_REQUIRED}`\n                  )\n            : z.string().optional()\n    })\n\n    const form = useForm({\n        resolver: zodResolver(formSchema),\n        values: {\n            name: \"\",\n            expiresInDays: \"none\",\n            organizationId: organizationId ?? \"personal\"\n        }\n    })\n\n    const { isSubmitting } = form.formState\n\n    const onSubmit = async (values: z.infer<typeof formSchema>) => {\n        try {\n            const expiresIn =\n                values.expiresInDays && values.expiresInDays !== \"none\"\n                    ? Number.parseInt(values.expiresInDays) * 60 * 60 * 24\n                    : undefined\n\n            const selectedOrgId =\n                values.organizationId === \"personal\"\n                    ? undefined\n                    : values.organizationId\n\n            const metadata = {\n                ...(typeof apiKey === \"object\" ? apiKey.metadata : {}),\n                ...(contextOrganization && selectedOrgId\n                    ? { organizationId: selectedOrgId }\n                    : {})\n            }\n\n            const result = await authClient.apiKey.create({\n                name: values.name,\n                expiresIn,\n                prefix: typeof apiKey === \"object\" ? apiKey.prefix : undefined,\n                metadata:\n                    Object.keys(metadata).length > 0 ? metadata : undefined,\n                fetchOptions: { throw: true }\n            })\n\n            await refetch?.()\n            onSuccess(result.key)\n            onOpenChange?.(false)\n            form.reset()\n        } catch (error) {\n            toast({\n                variant: \"error\",\n                message: getLocalizedError({ error, localization })\n            })\n        }\n    }\n\n    const rtf = new Intl.RelativeTimeFormat(lang ?? \"en\")\n\n    return (\n        <Dialog onOpenChange={onOpenChange} {...props}>\n            <DialogContent\n                onOpenAutoFocus={(e) => e.preventDefault()}\n                className={classNames?.dialog?.content}\n            >\n                <DialogHeader className={classNames?.dialog?.header}>\n                    <DialogTitle\n                        className={cn(\"text-lg md:text-xl\", classNames?.title)}\n                    >\n                        {localization.CREATE_API_KEY}\n                    </DialogTitle>\n\n                    <DialogDescription\n                        className={cn(\n                            \"text-xs md:text-sm\",\n                            classNames?.description\n                        )}\n                    >\n                        {localization.CREATE_API_KEY_DESCRIPTION}\n                    </DialogDescription>\n                </DialogHeader>\n\n                <Form {...form}>\n                    <form\n                        onSubmit={form.handleSubmit(onSubmit)}\n                        className=\"space-y-6\"\n                    >\n                        {showOrganizationSelect && (\n                            <FormField\n                                control={form.control}\n                                name=\"organizationId\"\n                                render={({ field }) => (\n                                    <FormItem className=\"w-full\">\n                                        <FormLabel\n                                            className={classNames?.label}\n                                        >\n                                            {localization.ORGANIZATION}\n                                        </FormLabel>\n\n                                        <Select\n                                            onValueChange={field.onChange}\n                                            value={field.value}\n                                            disabled={isSubmitting}\n                                        >\n                                            <FormControl>\n                                                <SelectTrigger\n                                                    className={cn(\n                                                        \"w-full p-2\",\n                                                        classNames?.input\n                                                    )}\n                                                >\n                                                    <SelectValue\n                                                        placeholder={\n                                                            localization.ORGANIZATION\n                                                        }\n                                                    />\n                                                </SelectTrigger>\n                                            </FormControl>\n\n                                            <SelectContent className=\"w-[--radix-select-trigger-width]\">\n                                                <SelectItem\n                                                    value=\"personal\"\n                                                    className=\"p-2\"\n                                                >\n                                                    <PersonalAccountView\n                                                        user={user}\n                                                        localization={\n                                                            localization\n                                                        }\n                                                        size=\"sm\"\n                                                    />\n                                                </SelectItem>\n\n                                                {organizations?.map((org) => (\n                                                    <SelectItem\n                                                        key={org.id}\n                                                        value={org.id}\n                                                        className=\"p-2\"\n                                                    >\n                                                        <OrganizationCellView\n                                                            organization={org}\n                                                            localization={\n                                                                localization\n                                                            }\n                                                            size=\"sm\"\n                                                        />\n                                                    </SelectItem>\n                                                ))}\n                                            </SelectContent>\n                                        </Select>\n\n                                        <FormMessage />\n                                    </FormItem>\n                                )}\n                            />\n                        )}\n\n                        <div className=\"flex gap-4\">\n                            <FormField\n                                control={form.control}\n                                name=\"name\"\n                                render={({ field }) => (\n                                    <FormItem className=\"flex-1\">\n                                        <FormLabel\n                                            className={classNames?.label}\n                                        >\n                                            {localization.NAME}\n                                        </FormLabel>\n\n                                        <FormControl>\n                                            <Input\n                                                className={classNames?.input}\n                                                placeholder={\n                                                    localization.API_KEY_NAME_PLACEHOLDER\n                                                }\n                                                autoFocus\n                                                disabled={isSubmitting}\n                                                {...field}\n                                            />\n                                        </FormControl>\n\n                                        <FormMessage />\n                                    </FormItem>\n                                )}\n                            />\n\n                            <FormField\n                                control={form.control}\n                                name=\"expiresInDays\"\n                                render={({ field }) => (\n                                    <FormItem>\n                                        <FormLabel\n                                            className={classNames?.label}\n                                        >\n                                            {localization.EXPIRES}\n                                        </FormLabel>\n\n                                        <Select\n                                            onValueChange={field.onChange}\n                                            defaultValue={field.value}\n                                            disabled={isSubmitting}\n                                        >\n                                            <FormControl>\n                                                <SelectTrigger\n                                                    className={\n                                                        classNames?.input\n                                                    }\n                                                >\n                                                    <SelectValue\n                                                        placeholder={\n                                                            localization.NO_EXPIRATION\n                                                        }\n                                                    />\n                                                </SelectTrigger>\n                                            </FormControl>\n\n                                            <SelectContent>\n                                                <SelectItem value=\"none\">\n                                                    {localization.NO_EXPIRATION}\n                                                </SelectItem>\n\n                                                {[\n                                                    1, 7, 30, 60, 90, 180, 365\n                                                ].map((days) => (\n                                                    <SelectItem\n                                                        key={days}\n                                                        value={days.toString()}\n                                                    >\n                                                        {days === 365\n                                                            ? rtf.format(\n                                                                  1,\n                                                                  \"year\"\n                                                              )\n                                                            : rtf.format(\n                                                                  days,\n                                                                  \"day\"\n                                                              )}\n                                                    </SelectItem>\n                                                ))}\n                                            </SelectContent>\n                                        </Select>\n\n                                        <FormMessage />\n                                    </FormItem>\n                                )}\n                            />\n                        </div>\n\n                        <DialogFooter className={classNames?.dialog?.footer}>\n                            <Button\n                                type=\"button\"\n                                variant=\"outline\"\n                                onClick={() => onOpenChange?.(false)}\n                                className={cn(\n                                    classNames?.button,\n                                    classNames?.outlineButton\n                                )}\n                                disabled={isSubmitting}\n                            >\n                                {localization.CANCEL}\n                            </Button>\n\n                            <Button\n                                type=\"submit\"\n                                variant=\"default\"\n                                className={cn(\n                                    classNames?.button,\n                                    classNames?.primaryButton\n                                )}\n                                disabled={isSubmitting}\n                            >\n                                {isSubmitting && (\n                                    <Loader2 className=\"animate-spin\" />\n                                )}\n\n                                {localization.CREATE_API_KEY}\n                            </Button>\n                        </DialogFooter>\n                    </form>\n                </Form>\n            </DialogContent>\n        </Dialog>\n    )\n}\n",
      "type": "registry:component"
    }
  ]
}