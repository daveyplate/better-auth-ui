{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "auth-hooks",
  "type": "registry:file",
  "title": "Auth Hooks",
  "description": "",
  "dependencies": [
    "@better-fetch/fetch",
    "better-auth"
  ],
  "registryDependencies": [
    "https://better-auth-ui.com/r/any-auth-client.json",
    "https://better-auth-ui.com/r/api-key.json",
    "https://better-auth-ui.com/r/auth-client.json",
    "https://better-auth-ui.com/r/invitation.json",
    "https://better-auth-ui.com/r/refetch.json"
  ],
  "files": [
    {
      "path": "src/types/auth-hooks.ts",
      "content": "import type { BetterFetchError } from \"@better-fetch/fetch\"\nimport type { User } from \"better-auth\"\nimport type { Member } from \"better-auth/plugins/organization\"\nimport type { AnyAuthClient } from \"./any-auth-client\"\nimport type { ApiKey } from \"./api-key\"\nimport type { AuthClient } from \"./auth-client\"\nimport type { Invitation } from \"./invitation\"\nimport type { Refetch } from \"./refetch\"\n\ntype AnyAuthSession = AnyAuthClient[\"$Infer\"][\"Session\"]\n\ntype AuthHook<T> = {\n    isPending: boolean\n    data?: T | null\n    error?: BetterFetchError | null\n    refetch?: Refetch\n}\n\nexport type AuthHooks = {\n    useSession: () => ReturnType<AnyAuthClient[\"useSession\"]>\n    useListAccounts: () => AuthHook<{ accountId: string; provider: string }[]>\n    useAccountInfo: (\n        params: Parameters<AuthClient[\"accountInfo\"]>[0]\n    ) => AuthHook<{ user: User }>\n    useListDeviceSessions: () => AuthHook<AnyAuthClient[\"$Infer\"][\"Session\"][]>\n    useListSessions: () => AuthHook<AnyAuthSession[\"session\"][]>\n    useListPasskeys: () => Partial<ReturnType<AuthClient[\"useListPasskeys\"]>>\n    useListApiKeys: () => AuthHook<ApiKey[]>\n    useActiveOrganization: () => Partial<\n        ReturnType<AuthClient[\"useActiveOrganization\"]>\n    >\n    useListOrganizations: () => Partial<\n        ReturnType<AuthClient[\"useListOrganizations\"]>\n    >\n    useHasPermission: (\n        params: Parameters<AuthClient[\"organization\"][\"hasPermission\"]>[0]\n    ) => AuthHook<{\n        error: null\n        success: boolean\n    }>\n    useInvitation: (\n        params: Parameters<AuthClient[\"organization\"][\"getInvitation\"]>[0]\n    ) => AuthHook<\n        Invitation & {\n            organizationName: string\n            organizationSlug: string\n            organizationLogo?: string\n        }\n    >\n    useListInvitations: (\n        params: Parameters<AuthClient[\"organization\"][\"listInvitations\"]>[0]\n    ) => AuthHook<Invitation[]>\n    useListUserInvitations: () => AuthHook<Invitation[]>\n    useListMembers: (\n        params: Parameters<AuthClient[\"organization\"][\"listMembers\"]>[0]\n    ) => AuthHook<{\n        members: (Member & { user?: Partial<User> | null })[]\n        total: number\n    }>\n    useIsRestoring?: () => boolean\n}\n",
      "type": "registry:file",
      "target": "types/auth-hooks.ts"
    }
  ]
}